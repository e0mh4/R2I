{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_b2sum.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401b20",
            "funcEndAddr": "0x402e50",
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  unsigned int v3; // r14d\n  const char *v4; // r13\n  int v6; // ebx\n  int v7; // eax\n  char *v8; // rax\n  __int64 v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  char *v12; // rax\n  char v13; // dl\n  const char *v14; // rsi\n  char *v15; // rax\n  __int64 v16; // rax\n  unsigned int v17; // eax\n  char *v18; // rax\n  FILE *v19; // r13\n  __int64 v20; // r12\n  __ssize_t v21; // rax\n  char *v22; // r15\n  char v23; // dl\n  __ssize_t v24; // r10\n  __int64 v25; // rbx\n  char *v26; // r8\n  __int64 v27; // rbx\n  char *v28; // r11\n  char v29; // bp\n  char *const *v30; // rsi\n  __int64 v31; // rax\n  __ssize_t v32; // r10\n  char *v33; // r11\n  unsigned __int64 v34; // rax\n  char v35; // al\n  char *v36; // rax\n  __int64 v37; // rsi\n  const unsigned __int16 *v38; // rdi\n  __int64 i; // rax\n  __int64 v40; // rbx\n  __int64 v41; // rdx\n  __int64 v42; // rax\n  char *v43; // r8\n  char v44; // dl\n  const char *v45; // rbx\n  _BOOL8 v46; // rbp\n  char *v47; // rax\n  unsigned int v48; // eax\n  char *v49; // rdx\n  char *v50; // r8\n  char *v51; // rcx\n  char *IO_write_ptr; // rax\n  const char *v53; // rsi\n  char *v54; // rax\n  int v55; // ebx\n  char v56; // al\n  __int64 v57; // rbx\n  char *v58; // rax\n  unsigned __int64 v59; // rdx\n  const __int32_t **v60; // rax\n  const __int32_t *v61; // rdi\n  char *v62; // rax\n  __int64 v63; // rax\n  __int64 v64; // rax\n  __int64 v66; // rbx\n  __ssize_t v67; // r10\n  char *const *v68; // r11\n  const char *v69; // r10\n  const char *v70; // rbx\n  int *v71; // rax\n  __int64 v72; // r8\n  unsigned int v73; // ebx\n  char *v74; // rax\n  unsigned __int64 v75; // rbp\n  __int64 v76; // rdx\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  __int64 v80; // rcx\n  char *v81; // rdx\n  __int64 v82; // rbp\n  char *v83; // rax\n  __int64 v84; // rbx\n  char *v85; // rax\n  char v86; // dl\n  __int64 v87; // rax\n  const char *v88; // rdx\n  char v89; // al\n  char *v90; // r8\n  char v91; // al\n  __int64 v92; // rbp\n  char *v93; // rax\n  char *v94; // rbx\n  int *v95; // rax\n  __int64 v96; // rdx\n  __int64 v97; // rcx\n  __int64 v98; // r8\n  char *v99; // rax\n  char *v100; // rax\n  char *v101; // rax\n  char *v102; // rax\n  __int64 v103; // rax\n  __int64 v104; // rbx\n  char *v105; // rax\n  __int64 v106; // rbx\n  char *v107; // rax\n  char *v108; // [rsp+8h] [rbp-150h]\n  char *v109; // [rsp+8h] [rbp-150h]\n  unsigned __int64 v110; // [rsp+8h] [rbp-150h]\n  const char **v111; // [rsp+10h] [rbp-148h]\n  char *s; // [rsp+18h] [rbp-140h]\n  __ssize_t v113; // [rsp+20h] [rbp-138h]\n  char *v114; // [rsp+20h] [rbp-138h]\n  unsigned __int8 v115; // [rsp+20h] [rbp-138h]\n  char *v116; // [rsp+20h] [rbp-138h]\n  __ssize_t v117; // [rsp+28h] [rbp-130h]\n  unsigned __int64 v118; // [rsp+28h] [rbp-130h]\n  __ssize_t v119; // [rsp+28h] [rbp-130h]\n  __ssize_t v120; // [rsp+28h] [rbp-130h]\n  __ssize_t v121; // [rsp+28h] [rbp-130h]\n  unsigned __int64 v122; // [rsp+30h] [rbp-128h]\n  char v123; // [rsp+3Bh] [rbp-11Dh]\n  int v124; // [rsp+3Ch] [rbp-11Ch]\n  unsigned __int64 v125; // [rsp+40h] [rbp-118h]\n  char **v126; // [rsp+48h] [rbp-110h]\n  unsigned __int64 v127; // [rsp+50h] [rbp-108h]\n  char v128; // [rsp+58h] [rbp-100h]\n  char v129; // [rsp+59h] [rbp-FFh]\n  char v130; // [rsp+5Ah] [rbp-FEh]\n  unsigned __int8 v131; // [rsp+5Bh] [rbp-FDh]\n  int v132; // [rsp+5Ch] [rbp-FCh]\n  char *lineptr; // [rsp+68h] [rbp-F0h] BYREF\n  size_t n; // [rsp+70h] [rbp-E8h] BYREF\n  unsigned __int64 v135; // [rsp+78h] [rbp-E0h] BYREF\n  char v136[80]; // [rsp+80h] [rbp-D8h] BYREF\n  char v137[136]; // [rsp+D0h] [rbp-88h] BYREF\n\n  v3 = 0;\n  v4 = \"\";\n  v6 = -1;\n  sub_4057F0(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_409D30(sub_405670);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  v123 = 0;\n  while ( 1 )\n  {\n    v7 = sub_409590(a1, a2, \"l:bctw\", &off_40AA00, 0LL);\n    if ( v7 == -1 )\n      break;\n    if ( v7 == 116 )\n    {\n      v6 = 0;\n    }\n    else if ( v7 <= 116 )\n    {\n      if ( v7 == 98 )\n        goto LABEL_16;\n      if ( v7 <= 98 )\n        goto LABEL_20;\n      if ( v7 == 99 )\n      {\n        v3 = 1;\n      }\n      else\n      {\n        if ( v7 != 108 )\n          goto LABEL_45;\n        v8 = dcgettext(0LL, \"invalid length\", 5);\n        v9 = sub_407D40(qword_60E4C0, 0LL, -1LL, \"\", v8, 0LL);\n        v4 = (const char *)qword_60E4C0;\n        qword_60E2F8 = v9;\n        if ( (v9 & 7) != 0 )\n        {\n          v10 = sub_407410(qword_60E4C0);\n          v11 = dcgettext(0LL, \"invalid length: %s\", 5);\n          error(0, 0, v11, v10);\n          v12 = dcgettext(0LL, \"length is not a multiple of 8\", 5);\n          error(1, 0, v12);\nLABEL_20:\n          if ( v7 == -131 )\n          {\n            sub_4078A0(\n              (_DWORD)stdout,\n              (unsigned int)\"b2sum\",\n              (unsigned int)&unk_409E16,\n              (_DWORD)off_60E240,\n              (unsigned int)\"Padraig Brady\",\n              (unsigned int)\"Samuel Neves\",\n              0);\n            exit(0);\n          }\n          if ( v7 == -130 )\n            sub_403280(0);\nLABEL_45:\n          sub_403280(1);\n        }\n      }\n    }\n    else if ( v7 == 129 )\n    {\n      byte_60E308 = 1;\n      byte_60E307 = 0;\n      byte_60E305 = 0;\n    }\n    else if ( v7 <= 129 )\n    {\n      if ( v7 == 119 )\n      {\n        byte_60E308 = 0;\n        byte_60E307 = 1;\n        byte_60E305 = 0;\n      }\n      else\n      {\n        if ( v7 != 128 )\n          goto LABEL_45;\n        byte_60E306 = 1;\n      }\n    }\n    else if ( v7 == 131 )\n    {\n      byte_60E304 = 1;\n    }\n    else if ( v7 >= 131 )\n    {\n      if ( v7 != 132 )\n        goto LABEL_45;\n      v123 = 1;\nLABEL_16:\n      v6 = 1;\n    }\n    else\n    {\n      byte_60E308 = 0;\n      byte_60E307 = 0;\n      byte_60E305 = 1;\n    }\n  }\n  qword_60E318 = 3LL;\n  if ( (unsigned __int64)qword_60E2F8 > 0x200 )\n  {\n    v104 = sub_407410(v4);\n    v105 = dcgettext(0LL, \"invalid length: %s\", 5);\n    error(0, 0, v105, v104);\n    v106 = sub_407410((&off_40ABB0)[dword_60E300]);\n    v107 = dcgettext(0LL, \"maximum digest length for %s is %lu bits\", 5);\n    error(1, 0, v107, v106, 512LL);\n    start();\n  }\n  v13 = v123 & (v6 == 0);\n  if ( !qword_60E2F8 && !(_BYTE)v3 )\n  {\n    qword_60E2F8 = 512LL;\n    qword_60E310 = 128LL;\n    if ( !v13 )\n    {\n      if ( byte_60E306 )\n        goto LABEL_250;\n      if ( byte_60E308 )\n        goto LABEL_223;\n      goto LABEL_49;\n    }\nLABEL_249:\n    v14 = \"--tag does not support --text mode\";\n    goto LABEL_44;\n  }\n  qword_60E310 = (unsigned __int64)qword_60E2F8 >> 2;\n  if ( v13 )\n    goto LABEL_249;\n  if ( (_BYTE)v3 )\n  {\n    v14 = \"the --tag option is meaningless when verifying checksums\";\n    if ( v123 )\n      goto LABEL_44;\n  }\n  if ( v6 >= 0 )\n  {\n    v14 = \"the --binary and --text options are meaningless when verifying checksums\";\n    if ( (_BYTE)v3 )\n      goto LABEL_44;\n  }\n  if ( byte_60E306 )\n  {\n    if ( (_BYTE)v3 )\n      goto LABEL_41;\nLABEL_250:\n    v14 = \"the --ignore-missing option is meaningful only when verifying checksums\";\nLABEL_44:\n    v15 = dcgettext(0LL, v14, 5);\n    error(0, 0, v15);\n    goto LABEL_45;\n  }\n  if ( byte_60E308 )\n  {\n    if ( !(_BYTE)v3 )\n    {\nLABEL_223:\n      v14 = \"the --status option is meaningful only when verifying checksums\";\n      goto LABEL_44;\n    }\nLABEL_41:\n    if ( !byte_60E307 )\n    {\nLABEL_42:\n      if ( byte_60E304 )\n      {\n        v14 = \"the --strict option is meaningful only when verifying checksums\";\n        if ( !(_BYTE)v3 )\n          goto LABEL_44;\n      }\n    }\n    goto LABEL_51;\n  }\nLABEL_49:\n  if ( !byte_60E307 )\n  {\n    if ( byte_60E305 == 1 )\n    {\n      v14 = \"the --quiet option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v3 )\n        goto LABEL_44;\n    }\n    goto LABEL_42;\n  }\n  v14 = \"the --warn option is meaningful only when verifying checksums\";\n  if ( !(_BYTE)v3 )\n    goto LABEL_44;\nLABEL_51:\n  if ( v6 == -1 )\n    v6 = 0;\n  v126 = &a2[a1];\n  v16 = dword_60E2BC;\n  if ( dword_60E2BC == a1 )\n    *v126++ = \"-\";\n  v111 = (const char **)&a2[v16];\n  if ( v126 <= (char **)v111 )\n  {\n    v129 = 1;\n    goto LABEL_157;\n  }\n  v129 = 1;\n  v17 = v6 == 0 ? 0xFFFFFFF6 : 0;\n  v132 = v17 + 42;\n  v131 = v17 + 42;\nLABEL_57:\n  s = (char *)*v111;\n  if ( (_BYTE)v3 )\n  {\n    v124 = strcmp(*v111, \"-\");\n    if ( v124 )\n    {\n      v19 = (FILE *)sub_405750(s, \"r\");\n      if ( !v19 )\n        goto LABEL_175;\n    }\n    else\n    {\n      byte_60E320 = 1;\n      v18 = dcgettext(0LL, \"standard input\", 5);\n      v19 = stdin;\n      s = v18;\n    }\n    lineptr = 0LL;\n    v20 = 1LL;\n    n = 0LL;\n    v130 = 0;\n    v128 = 0;\n    v127 = 0LL;\n    v125 = 0LL;\n    v122 = 0LL;\n    while ( 1 )\n    {\n      v21 = __getdelim(&lineptr, &n, 10, v19);\n      if ( v21 <= 0 )\n        goto LABEL_121;\n      v22 = lineptr;\n      v23 = *lineptr;\n      if ( *lineptr == 35 )\n        goto LABEL_90;\n      v24 = v21;\n      if ( lineptr[v21 - 1] == 10 )\n      {\n        v24 = v21 - 1;\n        lineptr[v21 - 1] = 0;\n        v22 = lineptr;\n        v23 = *lineptr;\n      }\n      v25 = 0LL;\n      if ( v23 == 9 || v23 == 32 )\n      {\n        do\n        {\n          do\n            v23 = v22[++v25];\n          while ( v23 == 32 );\n        }\n        while ( v23 == 9 );\n      }\n      LOBYTE(v108) = 0;\n      if ( v23 == 92 )\n      {\n        LOBYTE(v108) = v3;\n        ++v25;\n      }\n      v26 = &v22[v25];\n      if ( !memcmp(&v22[v25], \"BLAKE2\", 6uLL) )\n        break;\n      while ( 2 )\n      {\n        v117 = v24;\n        v114 = v26;\n        if ( v24 - v25 < qword_60E318 + (unsigned __int64)(*v26 == 92) )\n          goto LABEL_88;\n        qword_60E310 = 0LL;\n        v37 = 0LL;\n        v38 = *__ctype_b_loc();\n        for ( i = 0LL; (v38[(unsigned __int8)v114[i]] & 0x1000) != 0; ++i )\n          v37 = v3;\n        if ( !(_BYTE)v37 )\n          goto LABEL_88;\n        qword_60E310 = i;\n        if ( (unsigned __int64)(i - 2) > 0x7E )\n          goto LABEL_88;\n        if ( (i & 1) != 0 )\n          goto LABEL_88;\n        v40 = i + v25;\n        qword_60E2F8 = 4 * i;\n        v41 = (unsigned __int8)v22[v40];\n        if ( (_BYTE)v41 != 32 && (_BYTE)v41 != 9 )\n          goto LABEL_88;\n        v22[v40] = 0;\n        if ( !(unsigned __int8)sub_402F30(v114, v37, v41) )\n          goto LABEL_88;\n        v42 = v40 + 1;\n        v43 = v114;\n        if ( v117 - (v40 + 1) != 1 && ((v44 = v22[v40 + 1], v44 == 32) || v44 == 42) )\n        {\n          if ( dword_60E230 != 1 )\n          {\n            dword_60E230 = 0;\n            v42 = v40 + 2;\n          }\n        }\n        else\n        {\n          if ( !dword_60E230 )\n            goto LABEL_88;\n          dword_60E230 = 1;\n        }\n        v45 = &v22[v42];\n        if ( (_BYTE)v108 )\n        {\n          LOBYTE(v108) = (_BYTE)v114;\n          v103 = sub_402F90(&v22[v42], v117 - v42);\n          v43 = v114;\n          v91 = v103 != 0;\nLABEL_213:\n          if ( !v91 )\n            goto LABEL_88;\n        }\n        if ( !v124 && !strcmp(v45, \"-\") )\n          goto LABEL_88;\n        LODWORD(v46) = 0;\n        if ( !byte_60E308 )\n        {\n          v109 = v43;\n          v47 = strchr(v45, 10);\n          v43 = v109;\n          v46 = v47 != 0LL;\n        }\n        v108 = v43;\n        v48 = sub_4030D0(v45, v137, &v135);\n        v50 = v108;\n        v51 = (char *)v48;\n        if ( !(_BYTE)v48 )\n        {\n          ++v125;\n          if ( byte_60E308 )\n            goto LABEL_120;\n          if ( v46 )\n          {\n            IO_write_ptr = stdout->_IO_write_ptr;\n            if ( IO_write_ptr >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              v49 = IO_write_ptr + 1;\n              stdout->_IO_write_ptr = IO_write_ptr + 1;\n              *IO_write_ptr = 92;\n            }\n          }\n          sub_403020(v45, v46, v49, v51, v50);\n          v53 = \"FAILED open or read\";\n          goto LABEL_119;\n        }\n        if ( byte_60E306 && (_BYTE)v135 )\n          goto LABEL_120;\n        v59 = (unsigned __int64)qword_60E310 >> 1;\n        if ( !((unsigned __int64)qword_60E310 >> 1) )\n        {\n          v22 = 0LL;\n          goto LABEL_196;\n        }\n        v118 = (unsigned __int64)qword_60E310 >> 1;\n        v22 = 0LL;\n        v115 = v48;\n        v60 = __ctype_tolower_loc();\n        v50 = v108;\n        v51 = (char *)v115;\n        v61 = *v60;\n        v59 = v118;\n        do\n        {\n          if ( v61[(unsigned __int8)v108[2 * (_QWORD)v22]] != byte_40A9E0[((unsigned __int8)v137[(_QWORD)v22] >> 4) & 0xF]\n            || v61[(unsigned __int8)v108[2 * (_QWORD)v22 + 1]] != byte_40A9E0[v137[(_QWORD)v22] & 0xF] )\n          {\n            ++v127;\n            if ( byte_60E308 )\n              goto LABEL_120;\n            if ( v46 )\n            {\nLABEL_146:\n              v62 = stdout->_IO_write_ptr;\n              if ( v62 >= stdout->_IO_write_end )\n              {\n                v110 = v59;\n                __overflow(stdout, 92);\n                v59 = v110;\n              }\n              else\n              {\n                v51 = v62 + 1;\n                stdout->_IO_write_ptr = v62 + 1;\n                *v62 = 92;\n              }\n            }\n            v108 = (char *)v59;\n            sub_403020(v45, v46, v59, v51, v50);\n            if ( v108 == v22 )\n            {\nLABEL_218:\n              if ( byte_60E305 )\n                goto LABEL_120;\n              v53 = \"OK\";\n            }\n            else\n            {\n              v53 = \"FAILED\";\n            }\nLABEL_119:\n            v54 = dcgettext(0LL, v53, 5);\n            __printf_chk(1LL, \": %s\\n\", v54);\n            goto LABEL_120;\n          }\n          ++v22;\n        }\n        while ( (char *)v118 != v22 );\n        v22 = (char *)v118;\nLABEL_196:\n        v130 = byte_60E308;\n        if ( !byte_60E308 )\n        {\n          v130 = byte_60E305;\n          if ( !byte_60E305 )\n          {\n            if ( v46 )\n            {\n              v130 = (char)v51;\n              goto LABEL_146;\n            }\n            LOBYTE(v108) = (_BYTE)v51;\n            sub_403020(v45, 0LL, v59, v51, v50);\n            v130 = (char)v108;\n            goto LABEL_218;\n          }\n        }\nLABEL_120:\n        v128 = v3;\n        if ( (v19->_flags & 0x30) != 0 )\n        {\nLABEL_121:\n          free(lineptr);\n          v55 = v19->_flags & 0x20;\n          if ( v55 )\n          {\n            v84 = sub_407290(0LL, 3LL, s);\n            v85 = dcgettext(0LL, \"%s: read error\", 5);\n            error(0, 0, v85, v84);\n            v56 = 0;\n            goto LABEL_136;\n          }\n          if ( v124 && (unsigned int)sub_4085E0(v19) )\n          {\nLABEL_175:\n            v70 = (const char *)sub_407290(0LL, 3LL, s);\n            v71 = __errno_location();\n            error(0, *v71, \"%s\", v70);\n            v56 = 0;\n            goto LABEL_136;\n          }\n          if ( v128 )\n          {\n            if ( byte_60E308 )\n              goto LABEL_176;\n            if ( v122 )\n            {\n              v101 = dcngettext(\n                       0LL,\n                       \"WARNING: %lu line is improperly formatted\",\n                       \"WARNING: %lu lines are improperly formatted\",\n                       v122,\n                       5);\n              error(0, 0, v101, v122);\n            }\n            if ( v125 )\n            {\n              v100 = dcngettext(\n                       0LL,\n                       \"WARNING: %lu listed file could not be read\",\n                       \"WARNING: %lu listed files could not be read\",\n                       v125,\n                       5);\n              error(0, 0, v100, v125);\n            }\n            if ( v127 )\n            {\n              v99 = dcngettext(\n                      0LL,\n                      \"WARNING: %lu computed checksum did NOT match\",\n                      \"WARNING: %lu computed checksums did NOT match\",\n                      v127,\n                      5);\n              error(0, 0, v99, v127);\n            }\n            if ( !byte_60E306 )\n            {\nLABEL_176:\n              if ( v130 )\n                goto LABEL_133;\n            }\n            else if ( v130 )\n            {\nLABEL_133:\n              if ( !(v127 | v125) )\n                LOBYTE(v55) = (v122 == 0) | byte_60E304 ^ 1;\n            }\n            else\n            {\n              v92 = sub_407290(0LL, 3LL, s);\n              v93 = dcgettext(0LL, \"%s: no file was verified\", 5);\n              error(0, 0, v93, v92);\n            }\n          }\n          else\n          {\n            v82 = sub_407290(0LL, 3LL, s);\n            v83 = dcgettext(0LL, \"%s: no properly formatted %s checksum lines found\", 5);\n            error(0, 0, v83, v82, \"BLAKE2\");\n          }\n          v56 = v55 & 1;\nLABEL_136:\n          v129 &= v56;\n          goto LABEL_156;\n        }\nLABEL_91:\n        if ( !++v20 )\n        {\n          v25 = sub_407290(0LL, 3LL, s);\n          v36 = dcgettext(0LL, \"%s: too many checksum lines\", 5);\n          error(1, 0, v36, v25);\n          continue;\n        }\n        break;\n      }\n    }\n    v27 = v25 + 6;\n    v28 = &v22[v27];\n    v29 = v22[v27];\n    if ( v29 )\n    {\n      if ( v29 != 9 && v29 != 32 )\n      {\n        while ( 1 )\n        {\n          if ( v29 == 45 )\n            goto LABEL_81;\n          if ( v29 == 40 )\n            break;\n          v29 = v22[++v27];\n          v28 = &v22[v27];\n          if ( !v29 )\n            goto LABEL_81;\n          if ( v29 == 32 || v29 == 9 )\n            goto LABEL_150;\n        }\n        *v28 = 0;\n        v30 = &::s;\n        v120 = v24;\n        v116 = v28;\n        v64 = sub_4052D0(v26, &::s, 0LL, 0LL);\n        v33 = v116;\n        v32 = v120;\n        if ( v64 < 0 )\n        {\nLABEL_88:\n          ++v122;\n          if ( byte_60E307 )\n          {\n            v57 = sub_407290(0LL, 3LL, s);\n            v58 = dcgettext(0LL, \"%s: %lu: improperly formatted %s checksum line\", 5);\n            error(0, 0, v58, v57, v20, \"BLAKE2\");\n          }\nLABEL_90:\n          if ( (v19->_flags & 0x30) != 0 )\n            goto LABEL_121;\n          goto LABEL_91;\n        }\n        dword_60E300 = v64;\n        *v116 = 40;\n        goto LABEL_84;\n      }\nLABEL_150:\n      *v28 = 0;\n      v30 = &::s;\n      v119 = v24;\n      v63 = sub_4052D0(v26, &::s, 0LL, 0LL);\n      if ( v63 < 0 )\n        goto LABEL_88;\n      dword_60E300 = v63;\n      v32 = v119;\n      ++v27;\n    }\n    else\n    {\nLABEL_81:\n      *v28 = 0;\n      v30 = &::s;\n      v113 = v24;\n      v31 = sub_4052D0(v26, &::s, 0LL, 0LL);\n      v32 = v113;\n      if ( v31 < 0 )\n        goto LABEL_88;\n      dword_60E300 = v31;\n      ++v27;\n    }\n    v33 = &v22[v27];\n    if ( v29 == 45 )\n    {\n      v30 = 0LL;\n      v121 = v32;\n      if ( (unsigned int)sub_407D70(&v22[v27]) || v135 - 1 > 0x1FF || (v135 & 7) != 0 )\n        goto LABEL_88;\n      qword_60E2F8 = v135;\n      v32 = v121;\n      v33 = &v22[v27];\n      while ( (unsigned int)(v22[v27] - 48) <= 9 )\n        v33 = &v22[++v27];\n      v34 = v135 >> 2;\nLABEL_85:\n      qword_60E310 = v34;\n      v35 = *v33;\n      if ( *v33 == 32 )\n        v35 = v22[++v27];\n      if ( v35 != 40 )\n        goto LABEL_88;\n      v66 = v27 + 1;\n      v67 = v32 - v66;\n      if ( !v67 )\n        goto LABEL_88;\n      v45 = &v22[v66];\n      v68 = (char *const *)(v67 - 1);\n      if ( v67 != 1 )\n      {\n        if ( v45[v67 - 1] == 41 )\n        {\nLABEL_202:\n          v69 = (char *)v68 + (_QWORD)v45;\nLABEL_203:\n          if ( (_BYTE)v108 )\n          {\n            v30 = v68;\n            if ( !sub_402F90(v45, v68) )\n              goto LABEL_88;\n          }\n          *v69 = 0;\n          v86 = *((_BYTE *)v68 + (_QWORD)v45 + 1);\n          v87 = (__int64)v68 + 1;\n          if ( v86 == 9 || v86 == 32 )\n          {\n            do\n            {\n              do\n                v86 = v45[++v87];\n              while ( v86 == 32 );\n            }\n            while ( v86 == 9 );\n          }\n          if ( v86 != 61 )\n            goto LABEL_88;\n          v88 = &v45[v87 + 1];\n          do\n          {\n            do\n            {\n              v89 = *v88;\n              v90 = (char *)v88++;\n            }\n            while ( v89 == 32 );\n          }\n          while ( v89 == 9 );\n          v108 = v90;\n          v91 = sub_402F30(v90, v30, v88);\n          v43 = v108;\n          goto LABEL_213;\n        }\n        while ( 1 )\n        {\n          v68 = (char *const *)((char *)v68 - 1);\n          if ( !v68 )\n            break;\n          if ( *((_BYTE *)v68 + (_QWORD)v45) == 41 )\n            goto LABEL_202;\n        }\n      }\n      if ( *v45 != 41 )\n        goto LABEL_88;\n      v69 = v45;\n      v68 = 0LL;\n      goto LABEL_203;\n    }\nLABEL_84:\n    qword_60E2F8 = 512LL;\n    v34 = 128LL;\n    goto LABEL_85;\n  }\n  if ( !(unsigned __int8)sub_4030D0(s, v136, v137) )\n  {\n    v129 = 0;\n    goto LABEL_156;\n  }\n  if ( strchr(s, 92) )\n  {\nLABEL_179:\n    if ( v123 )\n    {\n      v102 = stdout->_IO_write_ptr;\n      v73 = 1;\n      if ( stdout->_IO_write_end <= v102 )\n      {\n        __overflow(stdout, 92);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v102 + 1;\n        *v102 = 92;\n      }\n      goto LABEL_228;\n    }\n    v73 = 1;\n    v74 = stdout->_IO_write_ptr;\n    if ( v74 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 92);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v74 + 1;\n      *v74 = 92;\n    }\nLABEL_182:\n    if ( !((unsigned __int64)qword_60E310 >> 1) )\n    {\nLABEL_188:\n      v78 = stdout->_IO_write_ptr;\n      if ( v78 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 32);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v78 + 1;\n        *v78 = 32;\n      }\n      v79 = stdout->_IO_write_ptr;\n      if ( v79 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, v132);\n      }\n      else\n      {\n        v80 = v131;\n        v81 = v79 + 1;\n        stdout->_IO_write_ptr = v79 + 1;\n        *v79 = v131;\n      }\n      sub_403020(s, v73, v81, v80, v72);\n      goto LABEL_186;\n    }\nLABEL_183:\n    v75 = 0LL;\n    do\n    {\n      v76 = (unsigned __int8)v136[v75++];\n      __printf_chk(1LL, \"%02x\", v76);\n    }\n    while ( (unsigned __int64)qword_60E310 >> 1 > v75 );\n    goto LABEL_185;\n  }\n  while ( 1 )\n  {\n    if ( strchr(s, 10) )\n      goto LABEL_179;\n    v73 = 0;\n    if ( !v123 )\n      goto LABEL_182;\nLABEL_228:\n    fputs_unlocked((&::s)[dword_60E300], stdout);\n    if ( (unsigned __int64)qword_60E2F8 <= 0x1FF )\n      __printf_chk(1LL, \"-%lu\", qword_60E2F8);\n    fwrite_unlocked(\" (\", 1uLL, 2uLL, stdout);\n    sub_403020(s, v73, v96, v97, v98);\n    fwrite_unlocked(\") = \", 1uLL, 4uLL, stdout);\n    if ( (unsigned __int64)qword_60E310 >> 1 )\n      goto LABEL_183;\nLABEL_185:\n    if ( !v123 )\n      goto LABEL_188;\nLABEL_186:\n    v77 = stdout->_IO_write_ptr;\n    if ( v77 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, 10);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v77 + 1;\n      *v77 = 10;\n    }\nLABEL_156:\n    if ( v126 > (char **)++v111 )\n      goto LABEL_57;\nLABEL_157:\n    if ( !byte_60E320 || (unsigned int)sub_4085E0(stdin) != -1 )\n      return (unsigned __int8)v129 ^ 1u;\n    v94 = dcgettext(0LL, \"standard input\", 5);\n    v95 = __errno_location();\n    error(1, *v95, v94);\n  }\n}\n"
        },
        {
            "funcName": "sub_402E7B",
            "funcStartAddr": "0x402e7b",
            "funcEndAddr": "0x402e9a",
            "decompiledFuncCode": "__int64 *sub_402E7B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_402E9A",
            "funcStartAddr": "0x402e9a",
            "funcEndAddr": "0x402ed1",
            "decompiledFuncCode": "__int64 sub_402E9A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402ED1",
            "funcStartAddr": "0x402ed1",
            "funcEndAddr": "0x402f28",
            "decompiledFuncCode": "__int64 *sub_402ED1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60E2E8 )\n  {\n    while ( qword_60E2F0 < (unsigned __int64)(&qword_60DE48 - qword_60DE40 - 1) )\n      ((void (*)(void))qword_60DE40[++qword_60E2F0])();\n    result = sub_402E7B();\n    byte_60E2E8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402F28",
            "funcStartAddr": "0x402f28",
            "funcEndAddr": "0x402f2d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402F28()\n{\n  return sub_402E9A();\n}\n"
        },
        {
            "funcName": "sub_402F30",
            "funcStartAddr": "0x402f30",
            "funcEndAddr": "0x402f8d",
            "decompiledFuncCode": "bool __fastcall sub_402F30(_BYTE *a1)\n{\n  unsigned __int64 v2; // rbp\n  const unsigned __int16 *v3; // rcx\n  unsigned __int64 v4; // rax\n\n  v2 = qword_60E310;\n  if ( !qword_60E310 )\n    return *a1 == 0;\n  v3 = *__ctype_b_loc();\n  LODWORD(v4) = 0;\n  while ( (v3[(unsigned __int8)*a1] & 0x1000) != 0 )\n  {\n    ++a1;\n    v4 = (unsigned int)(v4 + 1);\n    if ( v4 >= v2 )\n      return *a1 == 0;\n  }\n  return 0;\n}\n"
        },
        {
            "funcName": "sub_402F90",
            "funcStartAddr": "0x402f90",
            "funcEndAddr": "0x403011",
            "decompiledFuncCode": "__int64 __fastcall sub_402F90(__int64 a1, unsigned __int64 a2)\n{\n  _BYTE *v2; // rax\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  char v5; // cl\n  _BYTE *v7; // r9\n\n  v2 = (_BYTE *)(a1 + 1);\n  v3 = 0LL;\n  if ( a2 )\n  {\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      if ( !v4 )\n        return 0LL;\n      if ( v4 == 92 )\n      {\n        if ( a2 - 1 == v3 )\n          return 0LL;\n        ++v3;\n        v5 = *(_BYTE *)(a1 + v3);\n        if ( v5 == 92 )\n        {\n          v7 = v2;\n          *(v2 - 1) = 92;\n        }\n        else\n        {\n          if ( v5 != 110 )\n            return 0LL;\n          v7 = v2;\n          *(v2 - 1) = 10;\n        }\n      }\n      else\n      {\n        *(v2 - 1) = v4;\n        v7 = v2;\n      }\n      ++v3;\n      ++v2;\n    }\n    while ( a2 > v3 );\n    if ( (unsigned __int64)v7 < a1 + a2 )\n      *v7 = 0;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_403020",
            "funcStartAddr": "0x403020",
            "funcEndAddr": "0x4030c5",
            "decompiledFuncCode": "void __fastcall sub_403020(const char *a1, char a2)\n{\n  const char *v2; // rbx\n  char *IO_write_ptr; // rax\n  int v4; // esi\n\n  v2 = a1;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v4 = *(unsigned __int8 *)v2;\n      if ( !(_BYTE)v4 )\n        break;\n      if ( (_BYTE)v4 == 10 )\n      {\n        fwrite_unlocked(&unk_409D84, 1uLL, 2uLL, stdout);\n      }\n      else if ( (_BYTE)v4 == 92 )\n      {\n        fwrite_unlocked(&unk_409D87, 1uLL, 2uLL, stdout);\n      }\n      else\n      {\n        IO_write_ptr = stdout->_IO_write_ptr;\n        if ( IO_write_ptr >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v4);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = IO_write_ptr + 1;\n          *IO_write_ptr = v4;\n        }\n      }\n      ++v2;\n    }\n  }\n  else\n  {\n    fputs_unlocked(a1, stdout);\n  }\n}\n"
        },
        {
            "funcName": "sub_4030D0",
            "funcStartAddr": "0x4030d0",
            "funcEndAddr": "0x403272",
            "decompiledFuncCode": "__int64 __fastcall sub_4030D0(const char *a1, __int64 a2, _BYTE *a3)\n{\n  FILE *v3; // rbx\n  unsigned int v4; // r12d\n  __int64 v7; // rax\n  const char *v8; // rbx\n  int *v9; // rax\n  const char *v10; // rbp\n  int *v11; // rax\n  int *v12; // rax\n  int *v13; // rbx\n  const char *v14; // rax\n\n  *a3 = 0;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = stdin;\n    byte_60E320 = 1;\n    sub_405720(stdin, 2LL);\n    if ( !(unsigned int)sub_4051D0(v3) )\n      return 1;\nLABEL_9:\n    v4 = 0;\n    v10 = (const char *)sub_407290(0LL, 3LL, a1);\n    v11 = __errno_location();\n    error(0, *v11, \"%s\", v10);\n    if ( stdin != v3 )\n      sub_4085E0(v3);\n    return v4;\n  }\n  v7 = sub_405750(a1, 4234976LL);\n  v3 = (FILE *)v7;\n  if ( v7 )\n  {\n    sub_405720(v7, 2LL);\n    if ( !(unsigned int)sub_4051D0(v3) )\n    {\n      if ( (unsigned int)sub_4085E0(v3) )\n      {\n        v4 = 0;\n        v8 = (const char *)sub_407290(0LL, 3LL, a1);\n        v9 = __errno_location();\n        error(0, *v9, \"%s\", v8);\n        return v4;\n      }\n      return 1;\n    }\n    goto LABEL_9;\n  }\n  v12 = __errno_location();\n  v4 = (unsigned __int8)byte_60E306;\n  v13 = v12;\n  if ( byte_60E306 && *v12 == 2 )\n  {\n    *a3 = 1;\n  }\n  else\n  {\n    v4 = 0;\n    v14 = (const char *)sub_407290(0LL, 3LL, a1);\n    error(0, *v13, \"%s\", v14);\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x403675",
            "decompiledFuncCode": "void __fastcall __noreturn sub_403280(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  FILE *v19; // rbp\n  char *v20; // rax\n  char *v21; // rax\n  __int64 *v22; // rax\n  char *v23; // rbp\n  char *v24; // rax\n  char *v25; // rax\n  const char *v26; // r12\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  __int64 v33[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60E338;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5);\n  __printf_chk(1LL, v3, v1, \"BLAKE2\", 512LL);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\n  -b, --binary         read in binary mode\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = dcgettext(0LL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5);\n  __printf_chk(1LL, v8, \"BLAKE2\");\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"  -l, --length         digest length in bits; must not exceed the maximum for\\n\"\n          \"                       the blake2 algorithm and must be a multiple of 8\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"      --tag            create a BSD-style checksum\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(0LL, \"  -t, --text           read in text mode (default)\\n\", 5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following five options are useful only when verifying checksums:\\n\"\n          \"      --ignore-missing  don't fail or report status for missing files\\n\"\n          \"      --quiet          don't print OK for each successfully verified file\\n\"\n          \"      --status         don't output anything, status code shows success\\n\"\n          \"      --strict         exit non-zero for improperly formatted checksum lines\\n\"\n          \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = stdout;\n  v20 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v20, v19);\n  v21 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The sums are computed as described in %s.  When checking, the input\\n\"\n          \"should be a former output of this program.  The default mode is to print a\\n\"\n          \"line with checksum, a space, a character indicating input mode ('*' for binary,\\n\"\n          \"' ' for text or where binary is insignificant), and name for each FILE.\\n\",\n          5);\n  __printf_chk(1LL, v21, \"RFC 7693\");\n  v33[0] = (__int64)\"[\";\n  v22 = v33;\n  v33[1] = (__int64)\"test invocation\";\n  v33[2] = (__int64)\"coreutils\";\n  v33[3] = (__int64)\"Multi-call invocation\";\n  v33[4] = (__int64)\"sha224sum\";\n  v33[5] = (__int64)\"sha2 utilities\";\n  v33[6] = (__int64)\"sha256sum\";\n  v33[7] = (__int64)\"sha2 utilities\";\n  v33[8] = (__int64)\"sha384sum\";\n  v33[9] = (__int64)\"sha2 utilities\";\n  v33[10] = (__int64)\"sha512sum\";\n  v33[11] = (__int64)\"sha2 utilities\";\n  v33[12] = 0LL;\n  v33[13] = 0LL;\n  do\n    v22 += 2;\n  while ( *v22 && strcmp(\"b2sum\", (const char *)*v22) );\n  v23 = (char *)v22[1];\n  if ( v23 )\n  {\n    v24 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v24, &unk_409E16, \"https://www.gnu.org/software/coreutils/\");\n    v25 = setlocale(5, 0LL);\n    if ( !v25 || !strncmp(v25, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v29 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v29, &unk_409E16, \"https://www.gnu.org/software/coreutils/\");\n    v30 = setlocale(5, 0LL);\n    if ( !v30 || !strncmp(v30, \"en_\", 3uLL) )\n    {\n      v23 = \"b2sum\";\n      v31 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v26 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v31, \"https://www.gnu.org/software/coreutils/\", \"b2sum\");\nLABEL_12:\n      v28 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v28, v23, v26);\nLABEL_3:\n      exit(status);\n    }\n    v23 = \"b2sum\";\n  }\n  v32 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v32, \"b2sum\");\nLABEL_10:\n  v26 = \"Multi-call invocation\" + 10;\n  v27 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v27, \"https://www.gnu.org/software/coreutils/\", \"b2sum\");\n  if ( v23 != \"b2sum\" )\n    v26 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_403680",
            "funcStartAddr": "0x403680",
            "funcEndAddr": "0x404c1d",
            "decompiledFuncCode": "__int64 __fastcall sub_403680(_QWORD *a1, __int64 a2)\n{\n  __int64 i; // rax\n  __int64 j; // rax\n  __int64 v4; // rbp\n  __int64 v5; // rbx\n  __int64 v6; // r9\n  __int64 v7; // r14\n  __int64 v8; // r11\n  __int64 v9; // r8\n  __int64 v10; // r15\n  __int64 v11; // r13\n  __int64 v12; // rbp\n  __int64 v13; // rcx\n  __int64 v14; // rbx\n  __int64 v15; // r9\n  __int64 v16; // r14\n  __int64 v17; // r8\n  __int64 v18; // rcx\n  __int64 v19; // rsi\n  __int64 v20; // r10\n  __int64 v21; // r12\n  __int64 v22; // rbp\n  __int64 v23; // rdx\n  __int64 v24; // r11\n  __int64 v25; // r13\n  __int64 v26; // r15\n  __int64 v27; // rsi\n  __int64 v28; // r12\n  __int64 v29; // rax\n  __int64 v30; // r10\n  __int64 v31; // rdx\n  __int64 v32; // r13\n  __int64 v33; // r15\n  __int64 v34; // r13\n  __int64 v35; // r12\n  __int64 v36; // rax\n  __int64 v37; // rcx\n  __int64 v38; // rbx\n  __int64 v39; // rbp\n  __int64 v40; // r11\n  __int64 v41; // r9\n  __int64 v42; // r13\n  __int64 v43; // r8\n  __int64 v44; // r12\n  __int64 v45; // r13\n  __int64 v46; // r14\n  __int64 v47; // rdx\n  __int64 v48; // rax\n  __int64 v49; // rbx\n  __int64 v50; // r11\n  __int64 v51; // rcx\n  __int64 v52; // r9\n  __int64 v53; // r8\n  __int64 v54; // rdx\n  __int64 v55; // r14\n  __int64 v56; // r10\n  __int64 v57; // rax\n  __int64 v58; // rsi\n  __int64 v59; // r15\n  __int64 v60; // r13\n  __int64 v61; // r10\n  __int64 v62; // rsi\n  __int64 v63; // r15\n  __int64 v64; // r13\n  __int64 v65; // rbp\n  __int64 v66; // r9\n  __int64 v67; // r14\n  __int64 v68; // r13\n  __int64 v69; // rbp\n  __int64 v70; // r9\n  __int64 v71; // r14\n  __int64 v72; // rbx\n  __int64 v73; // r11\n  __int64 v74; // r8\n  __int64 v75; // r10\n  __int64 v76; // r15\n  __int64 v77; // rsi\n  __int64 v78; // r12\n  __int64 v79; // rcx\n  __int64 v80; // rdx\n  __int64 v81; // rbx\n  __int64 v82; // r13\n  __int64 v83; // r11\n  __int64 v84; // r8\n  __int64 v85; // rsi\n  __int64 v86; // r12\n  __int64 v87; // rcx\n  __int64 v88; // r15\n  __int64 v89; // rdx\n  __int64 v90; // rax\n  __int64 v91; // rbp\n  __int64 v92; // r10\n  __int64 v93; // rbx\n  __int64 v94; // r13\n  __int64 v95; // r9\n  __int64 v96; // r15\n  __int64 v97; // r13\n  __int64 v98; // rax\n  __int64 v99; // r15\n  __int64 v100; // r12\n  __int64 v101; // rax\n  __int64 v102; // rdx\n  __int64 v103; // rcx\n  __int64 v104; // rbx\n  __int64 v105; // rbp\n  __int64 v106; // r13\n  __int64 v107; // r12\n  __int64 v108; // rcx\n  __int64 v109; // r9\n  __int64 v110; // r11\n  __int64 v111; // r10\n  __int64 v112; // r8\n  __int64 v113; // rsi\n  __int64 v114; // r14\n  __int64 v115; // rdx\n  __int64 v116; // r15\n  __int64 v117; // rax\n  __int64 v118; // r11\n  __int64 v119; // r13\n  __int64 v120; // r10\n  __int64 v121; // r8\n  __int64 v122; // r14\n  __int64 v123; // rsi\n  __int64 v124; // r15\n  __int64 v125; // rax\n  __int64 v126; // r13\n  __int64 v127; // rbp\n  __int64 v128; // rbx\n  __int64 v129; // r9\n  __int64 v130; // r8\n  __int64 v131; // r14\n  __int64 v132; // r15\n  __int64 v133; // r13\n  __int64 v134; // rcx\n  __int64 v135; // rbp\n  __int64 v136; // rbx\n  __int64 v137; // r9\n  __int64 v138; // r8\n  __int64 v139; // r14\n  __int64 v140; // rcx\n  __int64 v141; // r11\n  __int64 v142; // rsi\n  __int64 v143; // r10\n  __int64 v144; // r12\n  __int64 v145; // rbp\n  __int64 v146; // r13\n  __int64 v147; // rdx\n  __int64 v148; // r15\n  __int64 v149; // r11\n  __int64 v150; // rax\n  __int64 v151; // rsi\n  __int64 v152; // r10\n  __int64 v153; // r12\n  __int64 v154; // r13\n  __int64 v155; // rdx\n  __int64 v156; // r15\n  __int64 v157; // r13\n  __int64 v158; // r12\n  __int64 v159; // rax\n  __int64 v160; // rcx\n  __int64 v161; // rbx\n  __int64 v162; // rbp\n  __int64 v163; // r11\n  __int64 v164; // r9\n  __int64 v165; // r13\n  __int64 v166; // r15\n  __int64 v167; // r8\n  __int64 v168; // r12\n  __int64 v169; // r14\n  __int64 v170; // rdx\n  __int64 v171; // rcx\n  __int64 v172; // rbx\n  __int64 v173; // rax\n  __int64 v174; // r11\n  __int64 v175; // r9\n  __int64 v176; // r8\n  __int64 v177; // rdx\n  __int64 v178; // r14\n  __int64 v179; // r10\n  __int64 v180; // rax\n  __int64 v181; // rsi\n  __int64 v182; // r15\n  __int64 v183; // r13\n  __int64 v184; // r10\n  __int64 v185; // rsi\n  __int64 v186; // r15\n  __int64 v187; // r13\n  __int64 v188; // rbp\n  __int64 v189; // r9\n  __int64 v190; // r14\n  __int64 v191; // r13\n  __int64 v192; // rbp\n  __int64 v193; // r9\n  __int64 v194; // r14\n  __int64 v195; // rbx\n  __int64 v196; // r11\n  __int64 v197; // r8\n  __int64 v198; // r10\n  __int64 v199; // r15\n  __int64 v200; // rsi\n  __int64 v201; // r12\n  __int64 v202; // rcx\n  __int64 v203; // rdx\n  __int64 v204; // rbx\n  __int64 v205; // r13\n  __int64 v206; // r11\n  __int64 v207; // r8\n  __int64 v208; // rsi\n  __int64 v209; // r12\n  __int64 v210; // rcx\n  __int64 v211; // r15\n  __int64 v212; // rdx\n  __int64 v213; // rax\n  __int64 v214; // rbp\n  __int64 v215; // r10\n  __int64 v216; // r13\n  __int64 v217; // r15\n  __int64 v218; // r13\n  __int64 v219; // r12\n  __int64 v220; // rax\n  __int64 v221; // rcx\n  __int64 v222; // rbp\n  __int64 v223; // r12\n  __int64 v224; // rbx\n  __int64 v225; // rcx\n  __int64 v226; // r9\n  __int64 v227; // r15\n  __int64 v228; // rdx\n  __int64 v229; // rbx\n  __int64 v230; // r9\n  __int64 v231; // r11\n  __int64 v232; // r10\n  __int64 v233; // r8\n  __int64 v234; // rsi\n  __int64 v235; // r14\n  __int64 v236; // rdx\n  __int64 v237; // r15\n  __int64 v238; // rax\n  __int64 v239; // r11\n  __int64 v240; // r13\n  __int64 v241; // r10\n  __int64 v242; // r8\n  __int64 v243; // r14\n  __int64 v244; // rsi\n  __int64 v245; // r15\n  __int64 v246; // rax\n  __int64 v247; // r13\n  __int64 v248; // rbp\n  __int64 v249; // rbx\n  __int64 v250; // r9\n  __int64 v251; // r8\n  __int64 v252; // r11\n  __int64 v253; // r14\n  __int64 v254; // r15\n  __int64 v255; // r13\n  __int64 v256; // rcx\n  __int64 v257; // rbp\n  __int64 v258; // rbx\n  __int64 v259; // r9\n  __int64 v260; // r8\n  __int64 v261; // r14\n  __int64 v262; // rcx\n  __int64 v263; // rsi\n  __int64 v264; // r12\n  __int64 v265; // r10\n  __int64 v266; // rdx\n  __int64 v267; // rbp\n  __int64 v268; // r13\n  __int64 v269; // r11\n  __int64 v270; // r15\n  __int64 v271; // rsi\n  __int64 v272; // rax\n  __int64 v273; // r12\n  __int64 v274; // r10\n  __int64 v275; // rdx\n  __int64 v276; // r13\n  __int64 v277; // r15\n  __int64 v278; // r13\n  __int64 v279; // r12\n  __int64 v280; // rax\n  __int64 v281; // rcx\n  __int64 v282; // rbx\n  __int64 v283; // rbp\n  __int64 v284; // r11\n  __int64 v285; // r9\n  __int64 v286; // r13\n  __int64 v287; // r15\n  __int64 v288; // r8\n  __int64 v289; // r12\n  __int64 v290; // r14\n  __int64 v291; // rdx\n  __int64 v292; // rcx\n  __int64 v293; // rbx\n  __int64 v294; // rax\n  __int64 v295; // r11\n  __int64 v296; // r9\n  __int64 v297; // r8\n  __int64 v298; // rdx\n  __int64 v299; // r14\n  __int64 v300; // r10\n  __int64 v301; // rax\n  __int64 v302; // rsi\n  __int64 v303; // r15\n  __int64 v304; // r13\n  __int64 v305; // r10\n  __int64 v306; // rsi\n  __int64 v307; // r15\n  __int64 v308; // r13\n  __int64 v309; // rbp\n  __int64 v310; // r9\n  __int64 v311; // r14\n  __int64 v312; // r13\n  __int64 v313; // rbp\n  __int64 v314; // r9\n  __int64 v315; // r14\n  __int64 v316; // rbx\n  __int64 v317; // r11\n  __int64 v318; // r8\n  __int64 v319; // r15\n  __int64 v320; // rsi\n  __int64 v321; // r10\n  __int64 v322; // r12\n  __int64 v323; // rcx\n  __int64 v324; // r13\n  __int64 v325; // rbx\n  __int64 v326; // rdx\n  __int64 v327; // r11\n  __int64 v328; // r8\n  __int64 v329; // rsi\n  __int64 v330; // r12\n  __int64 v331; // rcx\n  __int64 v332; // r15\n  __int64 v333; // rdx\n  __int64 v334; // rax\n  __int64 v335; // rbp\n  __int64 v336; // r10\n  __int64 v337; // rbx\n  __int64 v338; // r13\n  __int64 v339; // r9\n  __int64 v340; // r15\n  __int64 v341; // r13\n  __int64 v342; // rax\n  __int64 v343; // r15\n  __int64 v344; // r12\n  __int64 v345; // rax\n  __int64 v346; // rdx\n  __int64 v347; // rcx\n  __int64 v348; // rbx\n  __int64 v349; // rbp\n  __int64 v350; // r13\n  __int64 v351; // r12\n  __int64 v352; // rcx\n  __int64 v353; // r9\n  __int64 v354; // r11\n  __int64 v355; // r10\n  __int64 v356; // r8\n  __int64 v357; // rsi\n  __int64 v358; // r14\n  __int64 v359; // rdx\n  __int64 v360; // r15\n  __int64 v361; // rax\n  __int64 v362; // r11\n  __int64 v363; // r13\n  __int64 v364; // r10\n  __int64 v365; // r8\n  __int64 v366; // r14\n  __int64 v367; // rsi\n  __int64 v368; // r15\n  __int64 v369; // rax\n  __int64 v370; // r13\n  __int64 v371; // rbp\n  __int64 v372; // rbx\n  __int64 v373; // r9\n  __int64 v374; // r8\n  __int64 v375; // r11\n  __int64 v376; // r14\n  __int64 v377; // r15\n  __int64 v378; // r13\n  __int64 v379; // rcx\n  __int64 v380; // rbp\n  __int64 v381; // rbx\n  __int64 v382; // r9\n  __int64 v383; // r8\n  __int64 v384; // r14\n  __int64 v385; // rcx\n  __int64 v386; // rsi\n  __int64 v387; // r12\n  __int64 v388; // r10\n  __int64 v389; // rdx\n  __int64 v390; // rbp\n  __int64 v391; // r13\n  __int64 v392; // r11\n  __int64 v393; // r15\n  __int64 v394; // rsi\n  __int64 v395; // rax\n  __int64 v396; // r12\n  __int64 v397; // r10\n  __int64 v398; // rdx\n  __int64 v399; // r13\n  __int64 v400; // r15\n  __int64 v401; // r13\n  __int64 v402; // r12\n  __int64 v403; // rax\n  __int64 v404; // rcx\n  __int64 v405; // rbx\n  __int64 v406; // rbp\n  __int64 v407; // r11\n  __int64 v408; // r9\n  __int64 v409; // r13\n  __int64 v410; // r15\n  __int64 v411; // r8\n  __int64 v412; // r12\n  __int64 v413; // r14\n  __int64 v414; // rdx\n  __int64 v415; // rcx\n  __int64 v416; // rbx\n  __int64 v417; // rax\n  __int64 v418; // r11\n  __int64 v419; // r9\n  __int64 v420; // r8\n  __int64 v421; // rdx\n  __int64 v422; // r14\n  __int64 v423; // r10\n  __int64 v424; // rax\n  __int64 v425; // rsi\n  __int64 v426; // r15\n  __int64 v427; // r13\n  __int64 v428; // r10\n  __int64 v429; // rsi\n  __int64 v430; // r15\n  __int64 v431; // r13\n  __int64 v432; // rbp\n  __int64 v433; // r9\n  __int64 v434; // r14\n  __int64 v435; // r13\n  __int64 v436; // rbp\n  __int64 v437; // r9\n  __int64 v438; // r14\n  __int64 v439; // rbx\n  __int64 v440; // r11\n  __int64 v441; // r8\n  __int64 v442; // r10\n  __int64 v443; // r15\n  __int64 v444; // rsi\n  __int64 v445; // r12\n  __int64 v446; // rcx\n  __int64 v447; // rdx\n  __int64 v448; // rbx\n  __int64 v449; // r13\n  __int64 v450; // r11\n  __int64 v451; // r8\n  __int64 v452; // rsi\n  __int64 v453; // r12\n  __int64 v454; // rcx\n  __int64 v455; // r15\n  __int64 v456; // rdx\n  __int64 v457; // rax\n  __int64 v458; // rbp\n  __int64 v459; // r10\n  __int64 v460; // r13\n  __int64 v461; // r15\n  __int64 v462; // r13\n  __int64 v463; // r12\n  __int64 v464; // rax\n  __int64 v465; // rcx\n  __int64 v466; // rbp\n  __int64 v467; // r12\n  __int64 v468; // rbx\n  __int64 v469; // rcx\n  __int64 v470; // r9\n  __int64 v471; // r15\n  __int64 v472; // rdx\n  __int64 v473; // rbx\n  __int64 v474; // r9\n  __int64 v475; // r11\n  __int64 v476; // r10\n  __int64 v477; // r8\n  __int64 v478; // rsi\n  __int64 v479; // r14\n  __int64 v480; // rdx\n  __int64 v481; // r15\n  __int64 v482; // rax\n  __int64 v483; // r11\n  __int64 v484; // r13\n  __int64 v485; // r10\n  __int64 v486; // r8\n  __int64 v487; // r14\n  __int64 v488; // rsi\n  __int64 v489; // r15\n  __int64 v490; // rax\n  __int64 v491; // r13\n  __int64 v492; // rbp\n  __int64 v493; // rbx\n  __int64 v494; // r9\n  __int64 v495; // r8\n  __int64 v496; // r11\n  __int64 v497; // r14\n  __int64 v498; // r15\n  __int64 v499; // r13\n  __int64 v500; // rcx\n  __int64 v501; // rbp\n  __int64 v502; // rbx\n  __int64 v503; // r9\n  __int64 v504; // r8\n  __int64 v505; // r14\n  __int64 v506; // rcx\n  __int64 v507; // rsi\n  __int64 v508; // r12\n  __int64 v509; // r10\n  __int64 v510; // rdx\n  __int64 v511; // rbp\n  __int64 v512; // r13\n  __int64 v513; // r11\n  __int64 v514; // r15\n  __int64 v515; // rsi\n  __int64 v516; // rax\n  __int64 v517; // r12\n  __int64 v518; // r10\n  __int64 v519; // rdx\n  __int64 v520; // r13\n  __int64 v521; // r15\n  __int64 v522; // r13\n  __int64 v523; // r12\n  __int64 v524; // rax\n  __int64 v525; // rcx\n  __int64 v526; // rbx\n  __int64 v527; // rbp\n  __int64 v528; // r11\n  __int64 v529; // r9\n  __int64 v530; // r13\n  __int64 v531; // r15\n  __int64 v532; // r8\n  __int64 v533; // r12\n  __int64 v534; // r14\n  __int64 v535; // rdx\n  __int64 v536; // rcx\n  __int64 v537; // rbx\n  __int64 v538; // rax\n  __int64 v539; // r11\n  __int64 v540; // r9\n  __int64 v541; // r8\n  __int64 v542; // rdx\n  __int64 v543; // r14\n  __int64 v544; // r10\n  __int64 v545; // rax\n  __int64 v546; // rsi\n  __int64 v547; // r15\n  __int64 v548; // r13\n  __int64 v549; // r10\n  __int64 v550; // rsi\n  __int64 v551; // r15\n  __int64 v552; // r13\n  __int64 v553; // rbp\n  __int64 v554; // r9\n  __int64 v555; // r14\n  __int64 v556; // r13\n  __int64 v557; // rbp\n  __int64 v558; // r9\n  __int64 v559; // r14\n  __int64 v560; // rbx\n  __int64 v561; // r11\n  __int64 v562; // r8\n  __int64 v563; // r10\n  __int64 v564; // r15\n  __int64 v565; // rsi\n  __int64 v566; // r12\n  __int64 v567; // rcx\n  __int64 v568; // rdx\n  __int64 v569; // rbx\n  __int64 v570; // r13\n  __int64 v571; // r11\n  __int64 v572; // r8\n  __int64 v573; // rsi\n  __int64 v574; // r12\n  __int64 v575; // rcx\n  __int64 v576; // r15\n  __int64 v577; // rdx\n  __int64 v578; // rax\n  __int64 v579; // rbp\n  __int64 v580; // r10\n  __int64 v581; // rbx\n  __int64 v582; // r13\n  __int64 v583; // r9\n  __int64 v584; // r15\n  __int64 v585; // r13\n  __int64 v586; // rax\n  __int64 v587; // r15\n  __int64 v588; // r12\n  __int64 v589; // rax\n  __int64 v590; // rdx\n  __int64 v591; // rcx\n  __int64 v592; // rbx\n  __int64 v593; // rbp\n  __int64 v594; // r13\n  __int64 v595; // r12\n  __int64 v596; // rcx\n  __int64 v597; // r9\n  __int64 v598; // r11\n  __int64 v599; // r10\n  __int64 v600; // r8\n  __int64 v601; // rsi\n  __int64 v602; // r14\n  __int64 v603; // rdx\n  __int64 v604; // r15\n  __int64 v605; // rax\n  __int64 v606; // r11\n  __int64 v607; // r13\n  __int64 v608; // r10\n  __int64 v609; // r8\n  __int64 v610; // r14\n  __int64 v611; // rsi\n  __int64 v612; // r15\n  __int64 v613; // rax\n  __int64 v614; // r13\n  __int64 v615; // rbp\n  __int64 v616; // rbx\n  __int64 v617; // r9\n  __int64 v618; // r8\n  __int64 v619; // r11\n  __int64 v620; // r14\n  __int64 v621; // r15\n  __int64 v622; // r13\n  __int64 v623; // rcx\n  __int64 v624; // rbp\n  __int64 v625; // rbx\n  __int64 v626; // r9\n  __int64 v627; // r8\n  __int64 v628; // r14\n  __int64 v629; // rcx\n  __int64 v630; // rsi\n  __int64 v631; // r12\n  __int64 v632; // r10\n  __int64 v633; // rdx\n  __int64 v634; // rbp\n  __int64 v635; // r13\n  __int64 v636; // r11\n  __int64 v637; // r15\n  __int64 v638; // rsi\n  __int64 v639; // rax\n  __int64 v640; // r12\n  __int64 v641; // r10\n  __int64 v642; // rdx\n  __int64 v643; // r13\n  __int64 v644; // r15\n  __int64 v645; // r13\n  __int64 v646; // r12\n  __int64 v647; // rax\n  __int64 v648; // rcx\n  __int64 v649; // rbx\n  __int64 v650; // rbp\n  __int64 v651; // r11\n  __int64 v652; // r9\n  __int64 v653; // r13\n  __int64 v654; // r15\n  __int64 v655; // r8\n  __int64 v656; // r12\n  __int64 v657; // r14\n  __int64 v658; // rdx\n  __int64 v659; // rcx\n  __int64 v660; // rbx\n  __int64 v661; // rax\n  __int64 v662; // r11\n  __int64 v663; // r9\n  __int64 v664; // r8\n  __int64 v665; // rdx\n  __int64 v666; // r14\n  __int64 v667; // r10\n  __int64 v668; // rax\n  __int64 v669; // rsi\n  __int64 v670; // r15\n  __int64 v671; // r13\n  __int64 v672; // r10\n  __int64 v673; // rsi\n  __int64 v674; // r15\n  __int64 v675; // r13\n  __int64 v676; // rbp\n  __int64 v677; // r9\n  __int64 v678; // r14\n  __int64 v679; // r13\n  __int64 v680; // rbp\n  __int64 v681; // r9\n  __int64 v682; // rbx\n  __int64 v683; // r11\n  __int64 v684; // r10\n  __int64 v685; // r8\n  __int64 v686; // rsi\n  __int64 v687; // r15\n  __int64 v688; // r13\n  __int64 v689; // r12\n  __int64 v690; // rcx\n  __int64 v691; // rdx\n  __int64 v692; // rbx\n  __int64 v693; // r14\n  __int64 v694; // r11\n  __int64 v695; // r8\n  __int64 v696; // rsi\n  __int64 v697; // r15\n  __int64 v698; // r12\n  __int64 v699; // rcx\n  __int64 v700; // rdx\n  __int64 v701; // rax\n  __int64 v702; // rbp\n  __int64 v703; // r10\n  __int64 v704; // r13\n  __int64 v705; // r14\n  __int64 v706; // r13\n  __int64 v707; // r12\n  __int64 v708; // rax\n  __int64 v709; // rcx\n  __int64 v710; // rbp\n  __int64 v711; // rbx\n  __int64 v712; // r9\n  __int64 v713; // r14\n  __int64 v714; // rdx\n  __int64 v715; // r11\n  __int64 v716; // r8\n  __int64 v717; // rax\n  __int64 v718; // r14\n  __int64 v719; // rdx\n  __int64 v720; // rsi\n  __int64 v721; // r15\n  __int64 v722; // r13\n  __int64 result; // rax\n  __int64 v724; // [rsp+0h] [rbp-158h]\n  __int64 v725; // [rsp+0h] [rbp-158h]\n  __int64 v726; // [rsp+0h] [rbp-158h]\n  __int64 v727; // [rsp+0h] [rbp-158h]\n  __int64 v728; // [rsp+0h] [rbp-158h]\n  __int64 v729; // [rsp+0h] [rbp-158h]\n  __int64 v730; // [rsp+0h] [rbp-158h]\n  __int64 v731; // [rsp+0h] [rbp-158h]\n  __int64 v732; // [rsp+0h] [rbp-158h]\n  __int64 v733; // [rsp+0h] [rbp-158h]\n  __int64 v734; // [rsp+0h] [rbp-158h]\n  __int64 v735; // [rsp+0h] [rbp-158h]\n  __int64 v736; // [rsp+8h] [rbp-150h]\n  __int64 v737; // [rsp+8h] [rbp-150h]\n  __int64 v738; // [rsp+8h] [rbp-150h]\n  __int64 v739; // [rsp+8h] [rbp-150h]\n  __int64 v740; // [rsp+8h] [rbp-150h]\n  __int64 v741; // [rsp+8h] [rbp-150h]\n  __int64 v742; // [rsp+8h] [rbp-150h]\n  __int64 v743; // [rsp+8h] [rbp-150h]\n  __int64 v744; // [rsp+8h] [rbp-150h]\n  __int64 v745; // [rsp+8h] [rbp-150h]\n  __int64 v746; // [rsp+8h] [rbp-150h]\n  __int64 v747; // [rsp+10h] [rbp-148h]\n  __int64 v748; // [rsp+10h] [rbp-148h]\n  __int64 v749; // [rsp+10h] [rbp-148h]\n  __int64 v750; // [rsp+10h] [rbp-148h]\n  __int64 v751; // [rsp+10h] [rbp-148h]\n  __int64 v752; // [rsp+10h] [rbp-148h]\n  __int64 v753; // [rsp+10h] [rbp-148h]\n  __int64 v754; // [rsp+10h] [rbp-148h]\n  __int64 v755; // [rsp+10h] [rbp-148h]\n  __int64 v756; // [rsp+10h] [rbp-148h]\n  __int64 v757; // [rsp+10h] [rbp-148h]\n  __int64 v758; // [rsp+10h] [rbp-148h]\n  __int64 v759; // [rsp+18h] [rbp-140h]\n  __int64 v760; // [rsp+18h] [rbp-140h]\n  __int64 v761; // [rsp+18h] [rbp-140h]\n  __int64 v762; // [rsp+18h] [rbp-140h]\n  __int64 v763; // [rsp+18h] [rbp-140h]\n  __int64 v764; // [rsp+18h] [rbp-140h]\n  __int64 v765; // [rsp+18h] [rbp-140h]\n  __int64 v766; // [rsp+18h] [rbp-140h]\n  __int64 v767; // [rsp+18h] [rbp-140h]\n  __int64 v768; // [rsp+18h] [rbp-140h]\n  __int64 v769; // [rsp+18h] [rbp-140h]\n  __int64 v770; // [rsp+20h] [rbp-138h]\n  __int64 v771; // [rsp+28h] [rbp-130h]\n  __int64 v772; // [rsp+30h] [rbp-128h]\n  __int64 v773; // [rsp+38h] [rbp-120h]\n  __int64 v774; // [rsp+40h] [rbp-118h]\n  __int64 v775; // [rsp+48h] [rbp-110h]\n  __int64 v776; // [rsp+50h] [rbp-108h]\n  __int64 v777; // [rsp+58h] [rbp-100h]\n  __int64 v778; // [rsp+60h] [rbp-F8h]\n  __int64 v779; // [rsp+68h] [rbp-F0h]\n  __int64 v780; // [rsp+70h] [rbp-E8h]\n  __int64 v781; // [rsp+78h] [rbp-E0h]\n  __int64 v782; // [rsp+80h] [rbp-D8h]\n  __int64 v783; // [rsp+88h] [rbp-D0h]\n  __int64 v784; // [rsp+90h] [rbp-C8h]\n  __int64 v785; // [rsp+98h] [rbp-C0h]\n  __int64 v786; // [rsp+A0h] [rbp-B8h]\n  __int64 v787; // [rsp+A8h] [rbp-B0h]\n  __int64 v788; // [rsp+B0h] [rbp-A8h]\n  __int64 v789; // [rsp+B8h] [rbp-A0h]\n  __int64 v790; // [rsp+C0h] [rbp-98h]\n  __int64 v791; // [rsp+C8h] [rbp-90h]\n  __int64 v792; // [rsp+D0h] [rbp-88h]\n  __int64 v793; // [rsp+D8h] [rbp-80h]\n  __int64 v794[4]; // [rsp+E0h] [rbp-78h]\n  __int64 v795; // [rsp+100h] [rbp-58h]\n  __int64 v796; // [rsp+108h] [rbp-50h]\n  __int64 v797; // [rsp+110h] [rbp-48h]\n  __int64 v798; // [rsp+118h] [rbp-40h]\n\n  for ( i = 0LL; i != 16; ++i )\n    *(&v770 + i) = *(_QWORD *)(a2 + 8 * i);\n  for ( j = 0LL; j != 8; ++j )\n    *(&v786 + j) = a1[j];\n  v4 = v770 + v790 + v786;\n  v5 = v772 + v791 + v787;\n  v6 = __ROL8__(v4 ^ a1[8] ^ 0x510E527FADE682D1LL, 32);\n  v7 = v6 + 0x6A09E667F3BCC908LL;\n  v8 = v774 + v792 + v788;\n  v9 = __ROL8__(v5 ^ a1[9] ^ 0x9B05688C2B3E6C1FLL, 32);\n  v10 = v9 - 0x4498517A7B3558C5LL;\n  v11 = __ROR8__((v6 + 0x6A09E667F3BCC908LL) ^ v790, 24);\n  v12 = v11 + v771 + v4;\n  v13 = __ROR8__((v9 - 0x4498517A7B3558C5LL) ^ v791, 24);\n  v14 = v13 + v773 + v5;\n  v15 = __ROR8__(v12 ^ v6, 16);\n  v16 = v15 + v7;\n  v17 = __ROR8__(v14 ^ v9, 16);\n  v724 = v10 + v17;\n  v18 = __ROL8__((v10 + v17) ^ v13, 1);\n  v747 = __ROL8__(v16 ^ v11, 1);\n  v19 = __ROL8__(v8 ^ a1[10] ^ 0x1F83D9ABFB41BD6BLL, 32);\n  v20 = v776 + v793 + v789;\n  v21 = v19 + 0x3C6EF372FE94F82BLL;\n  v22 = v18 + v778 + v12;\n  v23 = __ROR8__((v19 + 0x3C6EF372FE94F82BLL) ^ v792, 24);\n  v24 = v23 + v775 + v8;\n  v25 = __ROL8__(v20 ^ a1[11] ^ 0x5BE0CD19137E2179LL, 32);\n  v26 = v25 - 0x5AB00AC5A0E2C90FLL;\n  v27 = __ROR8__(v24 ^ v19, 16);\n  v28 = v27 + v21;\n  v29 = __ROR8__((v25 - 0x5AB00AC5A0E2C90FLL) ^ v793, 24);\n  v30 = v29 + v777 + v20;\n  v31 = __ROL8__(v28 ^ v23, 1);\n  v32 = __ROR8__(v30 ^ v25, 16);\n  v33 = v32 + v26;\n  v34 = __ROL8__(v22 ^ v32, 32);\n  v35 = v34 + v28;\n  v36 = __ROL8__(v33 ^ v29, 1);\n  v37 = __ROR8__(v35 ^ v18, 24);\n  v38 = v31 + v780 + v14;\n  v39 = v37 + v779 + v22;\n  v40 = v36 + v782 + v24;\n  v41 = __ROL8__(v38 ^ v15, 32);\n  v42 = __ROR8__(v39 ^ v34, 16);\n  v43 = __ROL8__(v40 ^ v17, 32);\n  v44 = v42 + v35;\n  v759 = v42;\n  v45 = v33 + v41;\n  v46 = v43 + v16;\n  v47 = __ROR8__((v33 + v41) ^ v31, 24);\n  v48 = __ROR8__(v46 ^ v36, 24);\n  v49 = v47 + v781 + v38;\n  v50 = v48 + v783 + v40;\n  v51 = __ROL8__(v44 ^ v37, 1);\n  v52 = __ROR8__(v49 ^ v41, 16);\n  v53 = __ROR8__(v50 ^ v43, 16);\n  v736 = v45 + v52;\n  v54 = __ROL8__((v45 + v52) ^ v47, 1);\n  v55 = v53 + v46;\n  v56 = v747 + v784 + v30;\n  v57 = __ROL8__(v55 ^ v48, 1);\n  v58 = __ROL8__(v56 ^ v27, 32);\n  v59 = v58 + v724;\n  v60 = __ROR8__((v58 + v724) ^ v747, 24);\n  v61 = v60 + v785 + v56;\n  v62 = __ROR8__(v61 ^ v58, 16);\n  v63 = v62 + v59;\n  v64 = __ROL8__(v63 ^ v60, 1);\n  v65 = v64 + v784 + v39;\n  v66 = __ROL8__(v65 ^ v52, 32);\n  v67 = v66 + v55;\n  v68 = __ROR8__(v67 ^ v64, 24);\n  v69 = v68 + v780 + v65;\n  v70 = __ROR8__(v69 ^ v66, 16);\n  v71 = v70 + v67;\n  v72 = v51 + v774 + v49;\n  v73 = v54 + v779 + v50;\n  v748 = __ROL8__(v71 ^ v68, 1);\n  v74 = __ROL8__(v72 ^ v53, 32);\n  v75 = v57 + v783 + v61;\n  v76 = v74 + v63;\n  v77 = __ROL8__(v73 ^ v62, 32);\n  v78 = v77 + v44;\n  v79 = __ROR8__(v76 ^ v51, 24);\n  v80 = __ROR8__(v78 ^ v54, 24);\n  v81 = v79 + v778 + v72;\n  v82 = __ROL8__(v75 ^ v759, 32);\n  v83 = v80 + v785 + v73;\n  v84 = __ROR8__(v81 ^ v74, 16);\n  v85 = __ROR8__(v83 ^ v77, 16);\n  v725 = v84 + v76;\n  v86 = v85 + v78;\n  v87 = __ROL8__((v84 + v76) ^ v79, 1);\n  v88 = v82 + v736;\n  v89 = __ROL8__(v86 ^ v80, 1);\n  v90 = __ROR8__((v82 + v736) ^ v57, 24);\n  v91 = v87 + v771 + v69;\n  v92 = v90 + v776 + v75;\n  v93 = v89 + v770 + v81;\n  v94 = __ROR8__(v92 ^ v82, 16);\n  v95 = __ROL8__(v93 ^ v70, 32);\n  v96 = v94 + v88;\n  v97 = __ROL8__(v91 ^ v94, 32);\n  v98 = v96 ^ v90;\n  v99 = v95 + v96;\n  v100 = v97 + v86;\n  v101 = __ROL8__(v98, 1);\n  v102 = __ROR8__(v99 ^ v89, 24);\n  v103 = __ROR8__(v100 ^ v87, 24);\n  v104 = v102 + v772 + v93;\n  v105 = v103 + v782 + v91;\n  v106 = __ROR8__(v105 ^ v97, 16);\n  v107 = v106 + v100;\n  v760 = v106;\n  v108 = __ROL8__(v107 ^ v103, 1);\n  v109 = __ROR8__(v104 ^ v95, 16);\n  v110 = v101 + v781 + v83;\n  v111 = v748 + v775 + v92;\n  v737 = v109 + v99;\n  v112 = __ROL8__(v110 ^ v84, 32);\n  v113 = __ROL8__(v111 ^ v85, 32);\n  v114 = v112 + v71;\n  v115 = __ROL8__((v109 + v99) ^ v102, 1);\n  v116 = v113 + v725;\n  v117 = __ROR8__(v114 ^ v101, 24);\n  v118 = v117 + v777 + v110;\n  v119 = __ROR8__((v113 + v725) ^ v748, 24);\n  v120 = v119 + v773 + v111;\n  v121 = __ROR8__(v118 ^ v112, 16);\n  v122 = v121 + v114;\n  v123 = __ROR8__(v120 ^ v113, 16);\n  v124 = v123 + v116;\n  v125 = __ROL8__(v122 ^ v117, 1);\n  v126 = __ROL8__(v124 ^ v119, 1);\n  v127 = v126 + v781 + v105;\n  v128 = v108 + v782 + v104;\n  v129 = __ROL8__(v127 ^ v109, 32);\n  v130 = __ROL8__(v128 ^ v121, 32);\n  v131 = v129 + v122;\n  v132 = v130 + v124;\n  v133 = __ROR8__(v131 ^ v126, 24);\n  v134 = __ROR8__(v132 ^ v108, 24);\n  v135 = v133 + v778 + v127;\n  v136 = v134 + v770 + v128;\n  v137 = __ROR8__(v135 ^ v129, 16);\n  v138 = __ROR8__(v136 ^ v130, 16);\n  v139 = v137 + v131;\n  v726 = v138 + v132;\n  v140 = __ROL8__((v138 + v132) ^ v134, 1);\n  v749 = __ROL8__(v139 ^ v133, 1);\n  v141 = v115 + v775 + v118;\n  v142 = __ROL8__(v141 ^ v123, 32);\n  v143 = v125 + v785 + v120;\n  v144 = v142 + v107;\n  v145 = v140 + v780 + v135;\n  v146 = __ROL8__(v143 ^ v760, 32);\n  v147 = __ROR8__(v144 ^ v115, 24);\n  v148 = v146 + v737;\n  v149 = v147 + v772 + v141;\n  v150 = __ROR8__((v146 + v737) ^ v125, 24);\n  v151 = __ROR8__(v149 ^ v142, 16);\n  v152 = v150 + v783 + v143;\n  v153 = v151 + v144;\n  v154 = __ROR8__(v152 ^ v146, 16);\n  v155 = __ROL8__(v153 ^ v147, 1);\n  v156 = v154 + v148;\n  v157 = __ROL8__(v145 ^ v154, 32);\n  v158 = v157 + v153;\n  v159 = __ROL8__(v156 ^ v150, 1);\n  v160 = __ROR8__(v158 ^ v140, 24);\n  v161 = v155 + v773 + v136;\n  v162 = v160 + v784 + v145;\n  v163 = v159 + v777 + v149;\n  v164 = __ROL8__(v161 ^ v137, 32);\n  v165 = __ROR8__(v162 ^ v157, 16);\n  v166 = v164 + v156;\n  v167 = __ROL8__(v163 ^ v138, 32);\n  v168 = v165 + v158;\n  v761 = v165;\n  v169 = v167 + v139;\n  v170 = __ROR8__(v166 ^ v155, 24);\n  v171 = __ROL8__(v168 ^ v160, 1);\n  v172 = v170 + v776 + v161;\n  v173 = __ROR8__(v169 ^ v159, 24);\n  v174 = v173 + v771 + v163;\n  v175 = __ROR8__(v172 ^ v164, 16);\n  v176 = __ROR8__(v174 ^ v167, 16);\n  v738 = v175 + v166;\n  v177 = __ROL8__((v175 + v166) ^ v170, 1);\n  v178 = v176 + v169;\n  v179 = v749 + v779 + v152;\n  v180 = __ROL8__(v178 ^ v173, 1);\n  v181 = __ROL8__(v179 ^ v151, 32);\n  v182 = v181 + v726;\n  v183 = __ROR8__((v181 + v726) ^ v749, 24);\n  v184 = v183 + v774 + v179;\n  v185 = __ROR8__(v184 ^ v181, 16);\n  v186 = v185 + v182;\n  v187 = __ROL8__(v186 ^ v183, 1);\n  v188 = v187 + v777 + v162;\n  v189 = __ROL8__(v188 ^ v175, 32);\n  v190 = v189 + v178;\n  v191 = __ROR8__(v190 ^ v187, 24);\n  v192 = v191 + v779 + v188;\n  v193 = __ROR8__(v192 ^ v189, 16);\n  v194 = v193 + v190;\n  v195 = v171 + v773 + v172;\n  v196 = v177 + v783 + v174;\n  v750 = __ROL8__(v194 ^ v191, 1);\n  v197 = __ROL8__(v195 ^ v176, 32);\n  v198 = v180 + v781 + v184;\n  v199 = v197 + v186;\n  v200 = __ROL8__(v196 ^ v185, 32);\n  v201 = v200 + v168;\n  v202 = __ROR8__(v199 ^ v171, 24);\n  v203 = __ROR8__(v201 ^ v177, 24);\n  v204 = v202 + v771 + v195;\n  v205 = __ROL8__(v198 ^ v761, 32);\n  v206 = v203 + v782 + v196;\n  v207 = __ROR8__(v204 ^ v197, 16);\n  v208 = __ROR8__(v206 ^ v200, 16);\n  v727 = v207 + v199;\n  v209 = v208 + v201;\n  v210 = __ROL8__((v207 + v199) ^ v202, 1);\n  v211 = v205 + v738;\n  v212 = __ROL8__(v209 ^ v203, 1);\n  v213 = __ROR8__((v205 + v738) ^ v180, 24);\n  v214 = v210 + v772 + v192;\n  v215 = v213 + v784 + v198;\n  v216 = __ROR8__(v215 ^ v205, 16);\n  v217 = v216 + v211;\n  v218 = __ROL8__(v214 ^ v216, 32);\n  v219 = v218 + v209;\n  v220 = __ROL8__(v217 ^ v213, 1);\n  v221 = __ROR8__(v219 ^ v210, 24);\n  v222 = v221 + v776 + v214;\n  v762 = __ROR8__(v222 ^ v218, 16);\n  v223 = v762 + v219;\n  v224 = v212 + v775 + v204;\n  v225 = __ROL8__(v223 ^ v221, 1);\n  v226 = __ROL8__(v224 ^ v193, 32);\n  v227 = v226 + v217;\n  v228 = __ROR8__(v227 ^ v212, 24);\n  v229 = v228 + v780 + v224;\n  v230 = __ROR8__(v229 ^ v226, 16);\n  v231 = v220 + v774 + v206;\n  v232 = v750 + v785 + v215;\n  v739 = v230 + v227;\n  v233 = __ROL8__(v231 ^ v207, 32);\n  v234 = __ROL8__(v232 ^ v208, 32);\n  v235 = v233 + v194;\n  v236 = __ROL8__((v230 + v227) ^ v228, 1);\n  v237 = v234 + v727;\n  v238 = __ROR8__(v235 ^ v220, 24);\n  v239 = v238 + v770 + v231;\n  v240 = __ROR8__((v234 + v727) ^ v750, 24);\n  v241 = v240 + v778 + v232;\n  v242 = __ROR8__(v239 ^ v233, 16);\n  v243 = v242 + v235;\n  v244 = __ROR8__(v241 ^ v234, 16);\n  v245 = v244 + v237;\n  v246 = __ROL8__(v243 ^ v238, 1);\n  v247 = __ROL8__(v245 ^ v240, 1);\n  v248 = v247 + v779 + v222;\n  v249 = v225 + v775 + v229;\n  v250 = __ROL8__(v248 ^ v230, 32);\n  v251 = __ROL8__(v249 ^ v242, 32);\n  v252 = v236 + v772 + v239;\n  v253 = v250 + v243;\n  v254 = v251 + v245;\n  v255 = __ROR8__(v253 ^ v247, 24);\n  v256 = __ROR8__(v254 ^ v225, 24);\n  v257 = v255 + v770 + v248;\n  v258 = v256 + v777 + v249;\n  v259 = __ROR8__(v257 ^ v250, 16);\n  v260 = __ROR8__(v258 ^ v251, 16);\n  v261 = v259 + v253;\n  v728 = v260 + v254;\n  v262 = __ROL8__((v260 + v254) ^ v256, 1);\n  v751 = __ROL8__(v261 ^ v255, 1);\n  v263 = __ROL8__(v252 ^ v244, 32);\n  v264 = v263 + v223;\n  v265 = v246 + v780 + v241;\n  v266 = __ROR8__(v264 ^ v236, 24);\n  v267 = v262 + v784 + v257;\n  v268 = __ROL8__(v265 ^ v762, 32);\n  v269 = v266 + v774 + v252;\n  v270 = v268 + v739;\n  v271 = __ROR8__(v269 ^ v263, 16);\n  v272 = __ROR8__((v268 + v739) ^ v246, 24);\n  v273 = v271 + v264;\n  v274 = v272 + v785 + v265;\n  v275 = __ROL8__(v273 ^ v266, 1);\n  v276 = __ROR8__(v274 ^ v268, 16);\n  v277 = v276 + v270;\n  v278 = __ROL8__(v267 ^ v276, 32);\n  v279 = v278 + v273;\n  v280 = __ROL8__(v277 ^ v272, 1);\n  v281 = __ROR8__(v279 ^ v262, 24);\n  v282 = v275 + v781 + v258;\n  v283 = v281 + v771 + v267;\n  v284 = v280 + v776 + v269;\n  v285 = __ROL8__(v282 ^ v259, 32);\n  v286 = __ROR8__(v283 ^ v278, 16);\n  v287 = v285 + v277;\n  v288 = __ROL8__(v284 ^ v260, 32);\n  v289 = v286 + v279;\n  v763 = v286;\n  v290 = v288 + v261;\n  v291 = __ROR8__(v287 ^ v275, 24);\n  v292 = __ROL8__(v289 ^ v281, 1);\n  v293 = v291 + v782 + v282;\n  v294 = __ROR8__(v290 ^ v280, 24);\n  v295 = v294 + v778 + v284;\n  v296 = __ROR8__(v293 ^ v285, 16);\n  v297 = __ROR8__(v295 ^ v288, 16);\n  v740 = v296 + v287;\n  v298 = __ROL8__((v296 + v287) ^ v291, 1);\n  v299 = v297 + v290;\n  v300 = v751 + v773 + v274;\n  v301 = __ROL8__(v299 ^ v294, 1);\n  v302 = __ROL8__(v300 ^ v271, 32);\n  v303 = v302 + v728;\n  v304 = __ROR8__((v302 + v728) ^ v751, 24);\n  v305 = v304 + v783 + v300;\n  v306 = __ROR8__(v305 ^ v302, 16);\n  v307 = v306 + v303;\n  v308 = __ROL8__(v307 ^ v304, 1);\n  v309 = v308 + v772 + v283;\n  v310 = __ROL8__(v309 ^ v296, 32);\n  v311 = v310 + v299;\n  v312 = __ROR8__(v311 ^ v308, 24);\n  v313 = v312 + v782 + v309;\n  v314 = __ROR8__(v313 ^ v310, 16);\n  v315 = v314 + v311;\n  v316 = v292 + v776 + v293;\n  v317 = v298 + v770 + v295;\n  v752 = __ROL8__(v315 ^ v312, 1);\n  v318 = __ROL8__(v316 ^ v297, 32);\n  v319 = v318 + v307;\n  v320 = __ROL8__(v317 ^ v306, 32);\n  v321 = v301 + v778 + v305;\n  v322 = v320 + v289;\n  v323 = __ROR8__(v319 ^ v292, 24);\n  v324 = __ROL8__(v321 ^ v763, 32);\n  v325 = v323 + v780 + v316;\n  v326 = __ROR8__(v322 ^ v298, 24);\n  v327 = v326 + v781 + v317;\n  v328 = __ROR8__(v325 ^ v318, 16);\n  v329 = __ROR8__(v327 ^ v320, 16);\n  v729 = v328 + v319;\n  v330 = v329 + v322;\n  v331 = __ROL8__((v328 + v319) ^ v323, 1);\n  v332 = v324 + v740;\n  v333 = __ROL8__(v330 ^ v326, 1);\n  v334 = __ROR8__((v324 + v740) ^ v301, 24);\n  v335 = v331 + v774 + v313;\n  v336 = v334 + v773 + v321;\n  v337 = v333 + v777 + v325;\n  v338 = __ROR8__(v336 ^ v324, 16);\n  v339 = __ROL8__(v337 ^ v314, 32);\n  v340 = v338 + v332;\n  v341 = __ROL8__(v335 ^ v338, 32);\n  v342 = v340 ^ v334;\n  v343 = v339 + v340;\n  v344 = v341 + v330;\n  v345 = __ROL8__(v342, 1);\n  v346 = __ROR8__(v343 ^ v333, 24);\n  v347 = __ROR8__(v344 ^ v331, 24);\n  v348 = v346 + v775 + v337;\n  v349 = v347 + v783 + v335;\n  v350 = __ROR8__(v349 ^ v341, 16);\n  v351 = v350 + v344;\n  v764 = v350;\n  v352 = __ROL8__(v351 ^ v347, 1);\n  v353 = __ROR8__(v348 ^ v339, 16);\n  v354 = v345 + v785 + v327;\n  v355 = v752 + v771 + v336;\n  v741 = v353 + v343;\n  v356 = __ROL8__(v354 ^ v328, 32);\n  v357 = __ROL8__(v355 ^ v329, 32);\n  v358 = v356 + v315;\n  v359 = __ROL8__((v353 + v343) ^ v346, 1);\n  v360 = v357 + v729;\n  v361 = __ROR8__(v358 ^ v345, 24);\n  v362 = v361 + v784 + v354;\n  v363 = __ROR8__((v357 + v729) ^ v752, 24);\n  v364 = v363 + v779 + v355;\n  v365 = __ROR8__(v362 ^ v356, 16);\n  v366 = v365 + v358;\n  v367 = __ROR8__(v364 ^ v357, 16);\n  v368 = v367 + v360;\n  v369 = __ROL8__(v366 ^ v361, 1);\n  v370 = __ROL8__(v368 ^ v363, 1);\n  v371 = v370 + v782 + v349;\n  v372 = v352 + v771 + v348;\n  v373 = __ROL8__(v371 ^ v353, 32);\n  v374 = __ROL8__(v372 ^ v365, 32);\n  v375 = v359 + v784 + v362;\n  v376 = v373 + v366;\n  v377 = v374 + v368;\n  v378 = __ROR8__(v376 ^ v370, 24);\n  v379 = __ROR8__(v377 ^ v352, 24);\n  v380 = v378 + v775 + v371;\n  v381 = v379 + v785 + v372;\n  v382 = __ROR8__(v380 ^ v373, 16);\n  v383 = __ROR8__(v381 ^ v374, 16);\n  v384 = v382 + v376;\n  v730 = v383 + v377;\n  v385 = __ROL8__((v383 + v377) ^ v379, 1);\n  v753 = __ROL8__(v384 ^ v378, 1);\n  v386 = __ROL8__(v375 ^ v367, 32);\n  v387 = v386 + v351;\n  v388 = v369 + v774 + v364;\n  v389 = __ROR8__(v387 ^ v359, 24);\n  v390 = v385 + v770 + v380;\n  v391 = __ROL8__(v388 ^ v764, 32);\n  v392 = v389 + v783 + v375;\n  v393 = v391 + v741;\n  v394 = __ROR8__(v392 ^ v386, 16);\n  v395 = __ROR8__((v391 + v741) ^ v369, 24);\n  v396 = v394 + v387;\n  v397 = v395 + v780 + v388;\n  v398 = __ROL8__(v396 ^ v389, 1);\n  v399 = __ROR8__(v397 ^ v391, 16);\n  v400 = v399 + v393;\n  v401 = __ROL8__(v390 ^ v399, 32);\n  v402 = v401 + v396;\n  v403 = __ROL8__(v400 ^ v395, 1);\n  v404 = __ROR8__(v402 ^ v385, 24);\n  v405 = v398 + v776 + v381;\n  v406 = v404 + v777 + v390;\n  v407 = v403 + v779 + v392;\n  v408 = __ROL8__(v405 ^ v382, 32);\n  v409 = __ROR8__(v406 ^ v401, 16);\n  v410 = v408 + v400;\n  v411 = __ROL8__(v407 ^ v383, 32);\n  v412 = v409 + v402;\n  v765 = v409;\n  v413 = v411 + v384;\n  v414 = __ROR8__(v410 ^ v398, 24);\n  v415 = __ROL8__(v412 ^ v404, 1);\n  v416 = v414 + v773 + v405;\n  v417 = __ROR8__(v413 ^ v403, 24);\n  v418 = v417 + v772 + v407;\n  v419 = __ROR8__(v416 ^ v408, 16);\n  v420 = __ROR8__(v418 ^ v411, 16);\n  v742 = v419 + v410;\n  v421 = __ROL8__((v419 + v410) ^ v414, 1);\n  v422 = v420 + v413;\n  v423 = v753 + v778 + v397;\n  v424 = __ROL8__(v422 ^ v417, 1);\n  v425 = __ROL8__(v423 ^ v394, 32);\n  v426 = v425 + v730;\n  v427 = __ROR8__((v425 + v730) ^ v753, 24);\n  v428 = v427 + v781 + v423;\n  v429 = __ROR8__(v428 ^ v425, 16);\n  v430 = v429 + v426;\n  v431 = __ROL8__(v430 ^ v427, 1);\n  v432 = v431 + v783 + v406;\n  v433 = __ROL8__(v432 ^ v419, 32);\n  v434 = v433 + v422;\n  v435 = __ROR8__(v434 ^ v431, 24);\n  v436 = v435 + v781 + v432;\n  v437 = __ROR8__(v436 ^ v433, 16);\n  v438 = v437 + v434;\n  v439 = v415 + v777 + v416;\n  v440 = v421 + v782 + v418;\n  v754 = __ROL8__(v438 ^ v435, 1);\n  v441 = __ROL8__(v439 ^ v420, 32);\n  v442 = v424 + v773 + v428;\n  v443 = v441 + v430;\n  v444 = __ROL8__(v440 ^ v429, 32);\n  v445 = v444 + v412;\n  v446 = __ROR8__(v443 ^ v415, 24);\n  v447 = __ROR8__(v445 ^ v421, 24);\n  v448 = v446 + v784 + v439;\n  v449 = __ROL8__(v442 ^ v765, 32);\n  v450 = v447 + v771 + v440;\n  v451 = __ROR8__(v448 ^ v441, 16);\n  v452 = __ROR8__(v450 ^ v444, 16);\n  v731 = v451 + v443;\n  v453 = v452 + v445;\n  v454 = __ROL8__((v451 + v443) ^ v446, 1);\n  v455 = v449 + v742;\n  v456 = __ROL8__(v453 ^ v447, 1);\n  v457 = __ROR8__((v449 + v742) ^ v424, 24);\n  v458 = v454 + v775 + v436;\n  v459 = v457 + v779 + v442;\n  v460 = __ROR8__(v459 ^ v449, 16);\n  v461 = v460 + v455;\n  v462 = __ROL8__(v458 ^ v460, 32);\n  v463 = v462 + v453;\n  v464 = __ROL8__(v461 ^ v457, 1);\n  v465 = __ROR8__(v463 ^ v454, 24);\n  v466 = v465 + v770 + v458;\n  v766 = __ROR8__(v466 ^ v462, 16);\n  v467 = v766 + v463;\n  v468 = v456 + v785 + v448;\n  v469 = __ROL8__(v467 ^ v465, 1);\n  v470 = __ROL8__(v468 ^ v437, 32);\n  v471 = v470 + v461;\n  v472 = __ROR8__(v471 ^ v456, 24);\n  v473 = v472 + v774 + v468;\n  v474 = __ROR8__(v473 ^ v470, 16);\n  v475 = v464 + v778 + v450;\n  v476 = v754 + v772 + v459;\n  v743 = v474 + v471;\n  v477 = __ROL8__(v475 ^ v451, 32);\n  v478 = __ROL8__(v476 ^ v452, 32);\n  v479 = v477 + v438;\n  v480 = __ROL8__((v474 + v471) ^ v472, 1);\n  v481 = v478 + v731;\n  v482 = __ROR8__(v479 ^ v464, 24);\n  v483 = v482 + v776 + v475;\n  v484 = __ROR8__((v478 + v731) ^ v754, 24);\n  v485 = v484 + v780 + v476;\n  v486 = __ROR8__(v483 ^ v477, 16);\n  v487 = v486 + v479;\n  v488 = __ROR8__(v485 ^ v478, 16);\n  v489 = v488 + v481;\n  v490 = __ROL8__(v487 ^ v482, 1);\n  v491 = __ROL8__(v489 ^ v484, 1);\n  v492 = v491 + v776 + v466;\n  v493 = v469 + v784 + v473;\n  v494 = __ROL8__(v492 ^ v474, 32);\n  v495 = __ROL8__(v493 ^ v486, 32);\n  v496 = v480 + v781 + v483;\n  v497 = v494 + v487;\n  v498 = v495 + v489;\n  v499 = __ROR8__(v497 ^ v491, 24);\n  v500 = __ROR8__(v498 ^ v469, 24);\n  v501 = v499 + v785 + v492;\n  v502 = v500 + v779 + v493;\n  v503 = __ROR8__(v501 ^ v494, 16);\n  v504 = __ROR8__(v502 ^ v495, 16);\n  v505 = v503 + v497;\n  v732 = v504 + v498;\n  v506 = __ROL8__((v504 + v498) ^ v500, 1);\n  v755 = __ROL8__(v505 ^ v499, 1);\n  v507 = __ROL8__(v496 ^ v488, 32);\n  v508 = v507 + v467;\n  v509 = v490 + v770 + v485;\n  v510 = __ROR8__(v508 ^ v480, 24);\n  v511 = v506 + v782 + v501;\n  v512 = __ROL8__(v509 ^ v766, 32);\n  v513 = v510 + v773 + v496;\n  v514 = v512 + v743;\n  v515 = __ROR8__(v513 ^ v507, 16);\n  v516 = __ROR8__((v512 + v743) ^ v490, 24);\n  v517 = v515 + v508;\n  v518 = v516 + v778 + v509;\n  v519 = __ROL8__(v517 ^ v510, 1);\n  v520 = __ROR8__(v518 ^ v512, 16);\n  v521 = v520 + v514;\n  v522 = __ROL8__(v511 ^ v520, 32);\n  v523 = v522 + v517;\n  v524 = __ROL8__(v521 ^ v516, 1);\n  v525 = __ROR8__(v523 ^ v506, 24);\n  v526 = v519 + v783 + v502;\n  v527 = v525 + v772 + v511;\n  v528 = v524 + v771 + v513;\n  v529 = __ROL8__(v526 ^ v503, 32);\n  v530 = __ROR8__(v527 ^ v522, 16);\n  v531 = v529 + v521;\n  v532 = __ROL8__(v528 ^ v504, 32);\n  v533 = v530 + v523;\n  v767 = v530;\n  v534 = v532 + v505;\n  v535 = __ROR8__(v531 ^ v519, 24);\n  v536 = __ROL8__(v533 ^ v525, 1);\n  v537 = v535 + v777 + v526;\n  v538 = __ROR8__(v534 ^ v524, 24);\n  v539 = v538 + v774 + v528;\n  v540 = __ROR8__(v537 ^ v529, 16);\n  v541 = __ROR8__(v539 ^ v532, 16);\n  v744 = v540 + v531;\n  v542 = __ROL8__((v540 + v531) ^ v535, 1);\n  v543 = v541 + v534;\n  v544 = v755 + v780 + v518;\n  v545 = __ROL8__(v543 ^ v538, 1);\n  v546 = __ROL8__(v544 ^ v515, 32);\n  v547 = v546 + v732;\n  v548 = __ROR8__((v546 + v732) ^ v755, 24);\n  v549 = v548 + v775 + v544;\n  v550 = __ROR8__(v549 ^ v546, 16);\n  v551 = v550 + v547;\n  v552 = __ROL8__(v551 ^ v548, 1);\n  v553 = v552 + v780 + v527;\n  v554 = __ROL8__(v553 ^ v540, 32);\n  v555 = v554 + v543;\n  v556 = __ROR8__(v555 ^ v552, 24);\n  v557 = v556 + v772 + v553;\n  v558 = __ROR8__(v557 ^ v554, 16);\n  v559 = v558 + v555;\n  v560 = v536 + v778 + v537;\n  v561 = v542 + v777 + v539;\n  v756 = __ROL8__(v559 ^ v556, 1);\n  v562 = __ROL8__(v560 ^ v541, 32);\n  v563 = v545 + v771 + v549;\n  v564 = v562 + v551;\n  v565 = __ROL8__(v561 ^ v550, 32);\n  v566 = v565 + v533;\n  v567 = __ROR8__(v564 ^ v536, 24);\n  v568 = __ROR8__(v566 ^ v542, 24);\n  v569 = v567 + v774 + v560;\n  v570 = __ROL8__(v563 ^ v767, 32);\n  v571 = v568 + v776 + v561;\n  v572 = __ROR8__(v569 ^ v562, 16);\n  v573 = __ROR8__(v571 ^ v565, 16);\n  v733 = v572 + v564;\n  v574 = v573 + v566;\n  v575 = __ROL8__((v572 + v564) ^ v567, 1);\n  v576 = v570 + v744;\n  v577 = __ROL8__(v574 ^ v568, 1);\n  v578 = __ROR8__((v570 + v744) ^ v545, 24);\n  v579 = v575 + v785 + v557;\n  v580 = v578 + v775 + v563;\n  v581 = v577 + v779 + v569;\n  v582 = __ROR8__(v580 ^ v570, 16);\n  v583 = __ROL8__(v581 ^ v558, 32);\n  v584 = v582 + v576;\n  v585 = __ROL8__(v579 ^ v582, 32);\n  v586 = v584 ^ v578;\n  v587 = v583 + v584;\n  v588 = v585 + v574;\n  v589 = __ROL8__(v586, 1);\n  v590 = __ROR8__(v587 ^ v577, 24);\n  v591 = __ROR8__(v588 ^ v575, 24);\n  v592 = v590 + v784 + v581;\n  v593 = v591 + v781 + v579;\n  v594 = __ROR8__(v593 ^ v585, 16);\n  v595 = v594 + v588;\n  v768 = v594;\n  v596 = __ROL8__(v595 ^ v591, 1);\n  v597 = __ROR8__(v592 ^ v583, 16);\n  v598 = v589 + v773 + v571;\n  v599 = v756 + v783 + v580;\n  v745 = v597 + v587;\n  v600 = __ROL8__(v598 ^ v572, 32);\n  v601 = __ROL8__(v599 ^ v573, 32);\n  v602 = v600 + v559;\n  v603 = __ROL8__((v597 + v587) ^ v590, 1);\n  v604 = v601 + v733;\n  v605 = __ROR8__(v602 ^ v589, 24);\n  v606 = v605 + v782 + v598;\n  v607 = __ROR8__((v601 + v733) ^ v756, 24);\n  v608 = v607 + v770 + v599;\n  v609 = __ROR8__(v606 ^ v600, 16);\n  v610 = v609 + v602;\n  v611 = __ROR8__(v608 ^ v601, 16);\n  v612 = v611 + v604;\n  v613 = __ROL8__(v610 ^ v605, 1);\n  v614 = __ROL8__(v612 ^ v607, 1);\n  v615 = v614 + v770 + v593;\n  v616 = v596 + v772 + v592;\n  v617 = __ROL8__(v615 ^ v597, 32);\n  v618 = __ROL8__(v616 ^ v609, 32);\n  v619 = v603 + v774 + v606;\n  v620 = v617 + v610;\n  v621 = v618 + v612;\n  v622 = __ROR8__(v620 ^ v614, 24);\n  v623 = __ROR8__(v621 ^ v596, 24);\n  v624 = v622 + v771 + v615;\n  v625 = v623 + v773 + v616;\n  v626 = __ROR8__(v624 ^ v617, 16);\n  v627 = __ROR8__(v625 ^ v618, 16);\n  v628 = v626 + v620;\n  v734 = v627 + v621;\n  v629 = __ROL8__((v627 + v621) ^ v623, 1);\n  v757 = __ROL8__(v628 ^ v622, 1);\n  v630 = __ROL8__(v619 ^ v611, 32);\n  v631 = v630 + v595;\n  v632 = v613 + v776 + v608;\n  v633 = __ROR8__(v631 ^ v603, 24);\n  v634 = v629 + v778 + v624;\n  v635 = __ROL8__(v632 ^ v768, 32);\n  v636 = v633 + v775 + v619;\n  v637 = v635 + v745;\n  v638 = __ROR8__(v636 ^ v630, 16);\n  v639 = __ROR8__((v635 + v745) ^ v613, 24);\n  v640 = v638 + v631;\n  v641 = v639 + v777 + v632;\n  v642 = __ROL8__(v640 ^ v633, 1);\n  v643 = __ROR8__(v641 ^ v635, 16);\n  v644 = v643 + v637;\n  v645 = __ROL8__(v634 ^ v643, 32);\n  v646 = v645 + v640;\n  v647 = __ROL8__(v644 ^ v639, 1);\n  v648 = __ROR8__(v646 ^ v629, 24);\n  v649 = v642 + v780 + v625;\n  v650 = v648 + v779 + v634;\n  v651 = v647 + v782 + v636;\n  v652 = __ROL8__(v649 ^ v626, 32);\n  v653 = __ROR8__(v650 ^ v645, 16);\n  v654 = v652 + v644;\n  v655 = __ROL8__(v651 ^ v627, 32);\n  v656 = v653 + v646;\n  v769 = v653;\n  v657 = v655 + v628;\n  v658 = __ROR8__(v654 ^ v642, 24);\n  v659 = __ROL8__(v656 ^ v648, 1);\n  v660 = v658 + v781 + v649;\n  v661 = __ROR8__(v657 ^ v647, 24);\n  v662 = v661 + v783 + v651;\n  v663 = __ROR8__(v660 ^ v652, 16);\n  v664 = __ROR8__(v662 ^ v655, 16);\n  v746 = v663 + v654;\n  v665 = __ROL8__((v663 + v654) ^ v658, 1);\n  v666 = v664 + v657;\n  v667 = v757 + v784 + v641;\n  v668 = __ROL8__(v666 ^ v661, 1);\n  v669 = __ROL8__(v667 ^ v638, 32);\n  v670 = v669 + v734;\n  v671 = __ROR8__((v669 + v734) ^ v757, 24);\n  v672 = v671 + v785 + v667;\n  v673 = __ROR8__(v672 ^ v669, 16);\n  v674 = v673 + v670;\n  v675 = __ROL8__(v674 ^ v671, 1);\n  v676 = v675 + v784 + v650;\n  v677 = __ROL8__(v676 ^ v663, 32);\n  v678 = v677 + v666;\n  v679 = __ROR8__(v678 ^ v675, 24);\n  v680 = v679 + v780 + v676;\n  v681 = __ROR8__(v680 ^ v677, 16);\n  v735 = v681 + v678;\n  v682 = v659 + v774 + v660;\n  v683 = v665 + v779 + v662;\n  v684 = v668 + v783 + v672;\n  v685 = __ROL8__(v682 ^ v664, 32);\n  v686 = __ROL8__(v683 ^ v673, 32);\n  v687 = v685 + v674;\n  v758 = __ROL8__((v681 + v678) ^ v679, 1);\n  v688 = __ROL8__(v684 ^ v769, 32);\n  v689 = v686 + v656;\n  v690 = __ROR8__(v687 ^ v659, 24);\n  v691 = __ROR8__(v689 ^ v665, 24);\n  v692 = v690 + v778 + v682;\n  v693 = v688 + v746;\n  v694 = v691 + v785 + v683;\n  v695 = __ROR8__(v692 ^ v685, 16);\n  v696 = __ROR8__(v694 ^ v686, 16);\n  v697 = v695 + v687;\n  v698 = v696 + v689;\n  v699 = __ROL8__(v697 ^ v690, 1);\n  v700 = __ROL8__(v698 ^ v691, 1);\n  v701 = __ROR8__((v688 + v746) ^ v668, 24);\n  v702 = v699 + v771 + v680;\n  v703 = v701 + v776 + v684;\n  v704 = __ROR8__(v703 ^ v688, 16);\n  v705 = v704 + v693;\n  v706 = __ROL8__(v702 ^ v704, 32);\n  v707 = v706 + v698;\n  v708 = __ROL8__(v705 ^ v701, 1);\n  v709 = __ROR8__(v707 ^ v699, 24);\n  v710 = v709 + v782 + v702;\n  v786 = v710;\n  v798 = __ROR8__(v710 ^ v706, 16);\n  v711 = v700 + v770 + v692;\n  v794[2] = v798 + v707;\n  v712 = __ROL8__(v711 ^ v681, 32);\n  v791 = __ROL8__(v709 ^ (v798 + v707), 1);\n  v713 = v712 + v705;\n  v714 = __ROR8__(v713 ^ v700, 24);\n  v787 = v714 + v772 + v711;\n  v715 = v708 + v781 + v694;\n  v795 = __ROR8__(v712 ^ v787, 16);\n  v716 = __ROL8__(v715 ^ v695, 32);\n  v794[3] = v795 + v713;\n  v792 = __ROL8__(v714 ^ (v795 + v713), 1);\n  v717 = __ROR8__((v735 + v716) ^ v708, 24);\n  v788 = v777 + v715 + v717;\n  v796 = __ROR8__(v716 ^ v788, 16);\n  v718 = v735 + v716 + v796;\n  v794[0] = v718;\n  v793 = __ROL8__(v718 ^ v717, 1);\n  v719 = v758 + v703 + v775;\n  v720 = __ROL8__(v719 ^ v696, 32);\n  v721 = v720 + v697;\n  v722 = __ROR8__(v721 ^ v758, 24);\n  v789 = v773 + v719 + v722;\n  result = 0LL;\n  v797 = __ROR8__(v789 ^ v720, 16);\n  v794[1] = v721 + v797;\n  v790 = __ROL8__(v722 ^ (v721 + v797), 1);\n  while ( 1 )\n  {\n    a1[result++] ^= v718 ^ v710;\n    if ( result == 8 )\n      break;\n    v710 = *(&v786 + result);\n    v718 = v794[result];\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404C20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404d42",
            "decompiledFuncCode": "void *__fastcall sub_404C20(_QWORD *a1, char *a2, unsigned __int64 a3)\n{\n  __int64 v3; // r14\n  size_t v4; // r13\n  char *v5; // r12\n  __int64 v7; // r15\n  char *v8; // rdi\n  void *result; // rax\n  unsigned __int64 v10; // rax\n  char *v11; // rbp\n  unsigned __int64 v12; // r15\n  __int64 v13; // rsi\n  unsigned __int64 v14; // rax\n\n  v3 = (__int64)(a1 + 12);\n  v4 = a3;\n  v5 = a2;\n  v7 = a1[28];\n  v8 = (char *)a1 + v7 + 96;\n  if ( 128 - v7 < a3 )\n  {\n    a1[28] = 0LL;\n    v4 = v7 + a3 - 128;\n    memcpy(v8, a2, 128 - v7);\n    v10 = a1[8] + 128LL;\n    a1[8] = v10;\n    v11 = &a2[128 - v7];\n    a1[9] += v10 <= 0x7F;\n    sub_403680(a1, v3);\n    if ( v4 <= 0x80 )\n    {\n      v5 = &a2[128 - v7];\n      v8 = (char *)(v3 + a1[28]);\n    }\n    else\n    {\n      v12 = (v4 - 129) >> 7;\n      v5 = &v11[128 * v12 + 128];\n      do\n      {\n        v13 = (__int64)v11;\n        v14 = a1[8] + 128LL;\n        a1[8] = v14;\n        v11 += 128;\n        a1[9] += v14 <= 0x7F;\n        sub_403680(a1, v13);\n      }\n      while ( v5 != v11 );\n      v4 = v4 - (v12 << 7) - 128;\n      v8 = (char *)(v3 + a1[28]);\n    }\n  }\n  result = memcpy(v8, v5, v4);\n  a1[28] += v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404D50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404e1b",
            "decompiledFuncCode": "__int64 __fastcall sub_404D50(_QWORD *a1, unsigned __int8 *a2)\n{\n  unsigned __int64 v3; // rdi\n  __int64 v4; // rdx\n  __int64 i; // rax\n\n  a1[8] = 0LL;\n  v3 = (unsigned __int64)(a1 + 9);\n  v4 = 0x6A09E667F3BCC908LL;\n  *(_QWORD *)(v3 + 168) = 0LL;\n  memset((void *)(v3 & 0xFFFFFFFFFFFFFFF8LL), 0, 8 * (((unsigned int)a1 - (v3 & 0xFFFFFFF8) + 248) >> 3));\n  *a1 = 0x6A09E667F3BCC908LL;\n  a1[1] = 0xBB67AE8584CAA73BLL;\n  a1[2] = 0x3C6EF372FE94F82BLL;\n  a1[3] = 0xA54FF53A5F1D36F1LL;\n  a1[4] = 0x510E527FADE682D1LL;\n  a1[5] = 0x9B05688C2B3E6C1FLL;\n  a1[6] = 0x1F83D9ABFB41BD6BLL;\n  a1[7] = 0x5BE0CD19137E2179LL;\n  for ( i = 0LL; ; v4 = a1[i] )\n  {\n    a1[i] = *(_QWORD *)&a2[8 * i] ^ v4;\n    if ( ++i == 8 )\n      break;\n  }\n  a1[29] = *a2;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404E20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404e86",
            "decompiledFuncCode": "__int64 __fastcall sub_404E20(_QWORD *a1, __int64 a2)\n{\n  unsigned __int8 v3; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v4; // [rsp+1h] [rbp-47h]\n  __int64 v5; // [rsp+9h] [rbp-3Fh]\n  char v6; // [rsp+11h] [rbp-37h]\n  __int64 v7; // [rsp+12h] [rbp-36h]\n  int v8; // [rsp+1Ah] [rbp-2Eh]\n  __int16 v9; // [rsp+1Eh] [rbp-2Ah]\n  __int128 v10; // [rsp+20h] [rbp-28h]\n  __int128 v11; // [rsp+30h] [rbp-18h]\n\n  if ( (unsigned __int64)(a2 - 1) > 0x3F )\n    return 0xFFFFFFFFLL;\n  v3 = a2;\n  v4 = 65792LL;\n  v5 = 0LL;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0;\n  v9 = 0;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404D50(a1, &v3);\n}\n"
        },
        {
            "funcName": "sub_404E90",
            "funcStartAddr": "0x404e90",
            "funcEndAddr": "0x404f7b",
            "decompiledFuncCode": "__int64 __fastcall sub_404E90(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // r9\n  __int64 v5; // r10\n  unsigned __int8 v7[2]; // [rsp+0h] [rbp-D8h] BYREF\n  __int64 v8; // [rsp+2h] [rbp-D6h]\n  __int64 v9; // [rsp+Ah] [rbp-CEh]\n  __int64 v10; // [rsp+12h] [rbp-C6h]\n  int v11; // [rsp+1Ah] [rbp-BEh]\n  __int16 v12; // [rsp+1Eh] [rbp-BAh]\n  __int128 v13; // [rsp+20h] [rbp-B8h]\n  __int128 v14; // [rsp+30h] [rbp-A8h]\n  char s[152]; // [rsp+40h] [rbp-98h] BYREF\n\n  if ( (unsigned __int64)(a2 - 1) > 0x3F || (unsigned __int64)(a4 - 1) > 0x3F || !a3 )\n    return 0xFFFFFFFFLL;\n  v7[0] = a2;\n  v7[1] = a4;\n  v8 = 257LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0;\n  v12 = 0;\n  v13 = 0LL;\n  v14 = 0LL;\n  if ( (int)sub_404D50(a1, v7) < 0 )\n    return 0xFFFFFFFFLL;\n  memset(s, 0, 0x80uLL);\n  __memcpy_chk(s, v5, v4, 128LL);\n  sub_404C20(a1, s, 0x80uLL);\n  off_60E238(s, 0LL, 128LL);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404F80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404f9b",
            "decompiledFuncCode": "__int64 __fastcall sub_404F80(_QWORD *a1, char *a2, unsigned __int64 a3)\n{\n  if ( a3 )\n    sub_404C20(a1, a2, a3);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404FA0",
            "funcStartAddr": "0x404fa0",
            "funcEndAddr": "0x4050e4",
            "decompiledFuncCode": "__int64 __fastcall sub_404FA0(__int64 a1, void *a2, unsigned __int64 a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // rdx\n  bool v5; // zf\n  __int64 *v6; // rcx\n  char *v7; // rax\n  __int64 v8; // rdx\n  __int128 v10[4]; // [rsp+0h] [rbp-58h] BYREF\n  char v11; // [rsp+40h] [rbp-18h] BYREF\n\n  memset(v10, 0, sizeof(v10));\n  if ( !a2 || *(_QWORD *)(a1 + 232) > a3 || *(_QWORD *)(a1 + 80) )\n    return 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(a1 + 224);\n  v4 = *(_QWORD *)(a1 + 64) + v3;\n  *(_QWORD *)(a1 + 72) += __CFADD__(*(_QWORD *)(a1 + 64), v3);\n  v5 = *(_BYTE *)(a1 + 240) == 0;\n  *(_QWORD *)(a1 + 64) = v4;\n  if ( !v5 )\n    *(_QWORD *)(a1 + 88) = -1LL;\n  *(_QWORD *)(a1 + 80) = -1LL;\n  memset((void *)(a1 + 96 + v3), 0, 128 - v3);\n  sub_403680((_QWORD *)a1, a1 + 96);\n  v6 = (__int64 *)a1;\n  v7 = (char *)v10;\n  do\n  {\n    v8 = *v6;\n    v7 += 8;\n    ++v6;\n    *((_QWORD *)v7 - 1) = v8;\n  }\n  while ( v7 != &v11 );\n  memcpy(a2, v10, *(_QWORD *)(a1 + 232));\n  off_60E238(v10, 0LL, 64LL);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4051D0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x4052b7",
            "decompiledFuncCode": "__int64 __fastcall sub_4051D0(FILE *stream, void *a2, unsigned __int64 a3)\n{\n  char *v5; // rax\n  char *v6; // r12\n  unsigned __int64 v7; // rbx\n  FILE *v8; // rdi\n  size_t v9; // rax\n  unsigned int v10; // ebp\n  _QWORD v12[39]; // [rsp+0h] [rbp-138h] BYREF\n\n  v5 = (char *)malloc(0x8000uLL);\n  if ( v5 )\n  {\n    v6 = v5;\n    sub_404E20(v12, a3);\nLABEL_3:\n    v7 = 0LL;\n    while ( 1 )\n    {\n      v9 = fread(&v6[v7], 1uLL, 0x8000 - v7, stream);\n      v7 += v9;\n      if ( v7 == 0x8000 )\n      {\n        sub_404F80(v12, v6, 0x8000uLL);\n        goto LABEL_3;\n      }\n      v8 = stream;\n      if ( !v9 )\n        break;\n      if ( feof(stream) )\n        goto LABEL_9;\n    }\n    v10 = -1;\n    if ( ferror(v8) )\n      goto LABEL_12;\nLABEL_9:\n    if ( v7 )\n      sub_404F80(v12, v6, v7);\n    v10 = 0;\n    sub_404FA0((__int64)v12, a2, a3);\nLABEL_12:\n    free(v6);\n  }\n  else\n  {\n    return (unsigned int)-1;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4052C0",
            "funcStartAddr": "0x4052c0",
            "funcEndAddr": "0x4052ca",
            "decompiledFuncCode": "void __noreturn sub_4052C0()\n{\n  sub_403280(1);\n}\n"
        },
        {
            "funcName": "sub_4052D0",
            "funcStartAddr": "0x4052d0",
            "funcEndAddr": "0x4053e6",
            "decompiledFuncCode": "__int64 __fastcall sub_4052D0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_4053F0",
            "funcStartAddr": "0x4053f0",
            "funcEndAddr": "0x405461",
            "decompiledFuncCode": "void __fastcall sub_4053F0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_4073F0(1LL, a1);\n  v5 = sub_4070E0(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_405470",
            "funcStartAddr": "0x405470",
            "funcEndAddr": "0x405588",
            "decompiledFuncCode": "int __fastcall sub_405470(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = (const char *)sub_407410(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = (const char *)sub_407410(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x405600",
            "decompiledFuncCode": "__int64 __fastcall sub_405590(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_4052D0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_4053F0(a1, (__int64)a2, result);\n    sub_405470((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x40564d",
            "decompiledFuncCode": "__int64 __fastcall sub_405600(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_405670",
            "funcStartAddr": "0x405670",
            "funcEndAddr": "0x40570e",
            "decompiledFuncCode": "__int64 sub_405670()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_409690(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60E328 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60E330 )\n      {\n        v5 = (const char *)sub_407260();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_409690(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405741",
            "decompiledFuncCode": "void __fastcall sub_405720(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n"
        },
        {
            "funcName": "sub_405750",
            "funcStartAddr": "0x405750",
            "funcEndAddr": "0x4057e3",
            "decompiledFuncCode": "FILE *__fastcall sub_405750(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // r12d\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // r12d\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_407430(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_4085E0(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_4085E0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_4057F0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x405889",
            "decompiledFuncCode": "char *__fastcall sub_4057F0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60E338 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405890",
            "funcStartAddr": "0x405890",
            "funcEndAddr": "0x405982",
            "decompiledFuncCode": "char *__fastcall sub_405890(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_409750();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40AC89;\n      if ( !v5 )\n        return (char *)&unk_40AC7E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40AC85;\n    if ( !v5 )\n      return (char *)&unk_40AC82;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x401b00",
            "funcEndAddr": "0x401b05",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405990(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405990((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409610((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405890(\"`\", a5);\n        v51 = sub_405890(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405990(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405990((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409610((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405890(\"`\", a5);\n        v51 = sub_405890(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x401b00",
            "funcEndAddr": "0x401b05",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405990(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405990((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409610((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405890(\"`\", a5);\n        v51 = sub_405890(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405990(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405990((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_409610((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405990((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405890(\"`\", a5);\n        v51 = sub_405890(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406BC0",
            "funcStartAddr": "0x401b05",
            "funcEndAddr": "0x401b0a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406BC0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407C30();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60E2A0 )\n    {\n      v7 = (__m128i *)sub_407A40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60E2A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407A40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60E2B0], 0, 16LL * (a1 + 1 - dword_60E2B0));\n    dword_60E2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_405990(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4079E0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_405990(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_406BC0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407C30();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60E2A0 )\n    {\n      v7 = (__m128i *)sub_407A40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60E2A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407A40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60E2B0], 0, 16LL * (a1 + 1 - dword_60E2B0));\n    dword_60E2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_405990(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4079E0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_405990(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_406BC0",
            "funcStartAddr": "0x401b05",
            "funcEndAddr": "0x401b0a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406BC0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407C30();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60E2A0 )\n    {\n      v7 = (__m128i *)sub_407A40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60E2A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407A40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60E2B0], 0, 16LL * (a1 + 1 - dword_60E2B0));\n    dword_60E2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_405990(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4079E0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_405990(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_406BC0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407C30();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_60E2A0 )\n    {\n      v7 = (__m128i *)sub_407A40(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60E2A0);\n    }\n    else\n    {\n      ptr = (void *)sub_407A40(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_60E2B0], 0, 16LL * (a1 + 1 - dword_60E2B0));\n    dword_60E2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_405990(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E340 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4079E0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_405990(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_406D60",
            "funcStartAddr": "0x406d60",
            "funcEndAddr": "0x406d94",
            "decompiledFuncCode": "__int64 __fastcall sub_406D60(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60E440;\n  result = sub_407BE0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406E50",
            "funcStartAddr": "0x406e50",
            "funcEndAddr": "0x406ec2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406E50(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60E440;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_405990(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406ED0",
            "funcStartAddr": "0x406ed0",
            "funcEndAddr": "0x406fb1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406ED0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60E440;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_405990(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_4079E0(v11 + 1);\n  sub_405990(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406FD0",
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x407065",
            "decompiledFuncCode": "void sub_406FD0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_60E2B0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_60E2B0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60E340 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60E2A0 = 256LL;\n    *((_QWORD *)&xmmword_60E2A0 + 1) = &unk_60E340;\n  }\n  if ( v0 != &xmmword_60E2A0 )\n  {\n    free(v0);\n    ptr = &xmmword_60E2A0;\n  }\n  dword_60E2B0 = 1;\n}\n"
        },
        {
            "funcName": "sub_4070E0",
            "funcStartAddr": "0x401b0a",
            "funcEndAddr": "0x401b0f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4070E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4070E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4070E0",
            "funcStartAddr": "0x401b0a",
            "funcEndAddr": "0x401b0f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4070E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4070E0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407150",
            "funcStartAddr": "0x401b0f",
            "funcEndAddr": "0x401b14",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407150(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406BC0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_407150(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406BC0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407150",
            "funcStartAddr": "0x401b0f",
            "funcEndAddr": "0x401b14",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407150(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406BC0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_407150(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406BC0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4071E0",
            "funcStartAddr": "0x4071e0",
            "funcEndAddr": "0x407250",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4071E0(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60E470;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E440);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E450);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E460);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_406BC0(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_407260",
            "funcStartAddr": "0x407260",
            "funcEndAddr": "0x407271",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407260(__int64 a1)\n{\n  return sub_4071E0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_407290",
            "funcStartAddr": "0x401b14",
            "funcEndAddr": "0x401b19",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407290(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407290(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407290",
            "funcStartAddr": "0x401b14",
            "funcEndAddr": "0x401b19",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407290(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_407290(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406BC0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_407300",
            "funcStartAddr": "0x407300",
            "funcEndAddr": "0x40736c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407300(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E440);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E450);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60E460);\n  v8 = qword_60E470;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_406BC0(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_4073F0",
            "funcStartAddr": "0x4073f0",
            "funcEndAddr": "0x407401",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4073F0(int a1, __int64 a2)\n{\n  return sub_406BC0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60E260);\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x407426",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407410(__int64 a1)\n{\n  return sub_406BC0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60E260);\n}\n"
        },
        {
            "funcName": "sub_407430",
            "funcStartAddr": "0x407430",
            "funcEndAddr": "0x40743e",
            "decompiledFuncCode": "__int64 __fastcall sub_407430(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, char a7)\n{\n  return sub_408660(a1, 0, 3, a4, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_407440",
            "funcStartAddr": "0x401b19",
            "funcEndAddr": "0x401b1e",
            "decompiledFuncCode": "__int64 __fastcall sub_407440(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_407440(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_407440",
            "funcStartAddr": "0x401b19",
            "funcEndAddr": "0x401b1e",
            "decompiledFuncCode": "__int64 __fastcall sub_407440(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_407440(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_407840",
            "funcStartAddr": "0x407840",
            "funcEndAddr": "0x4078a0",
            "decompiledFuncCode": "__int64 __fastcall sub_407840(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_407440(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_407440(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_4078A0",
            "funcStartAddr": "0x4078a0",
            "funcEndAddr": "0x40795c",
            "decompiledFuncCode": "__int64 __fastcall sub_4078A0(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_407440(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_407440(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_407960",
            "funcStartAddr": "0x407960",
            "funcEndAddr": "0x4079d4",
            "decompiledFuncCode": "int sub_407960()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_409E16, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_4079E0",
            "funcStartAddr": "0x4079e0",
            "funcEndAddr": "0x4079fa",
            "decompiledFuncCode": "void *__fastcall sub_4079E0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_407C30();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407A30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407a32",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_407A30(size_t a1)\n{\n  return sub_4079E0(a1);\n}\n"
        },
        {
            "funcName": "sub_407A40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407a76",
            "decompiledFuncCode": "void *__fastcall sub_407A40(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_407C30();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407B90",
            "funcStartAddr": "0x407b90",
            "funcEndAddr": "0x407ba7",
            "decompiledFuncCode": "void *__fastcall sub_407B90(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_4079E0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_407BB0",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407bde",
            "decompiledFuncCode": "__int64 __fastcall sub_407BB0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_407C30(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407BE0",
            "funcStartAddr": "0x407be0",
            "funcEndAddr": "0x407c08",
            "decompiledFuncCode": "void *__fastcall sub_407BE0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4079E0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_407C10",
            "funcStartAddr": "0x407c10",
            "funcEndAddr": "0x407c23",
            "decompiledFuncCode": "void *__fastcall sub_407C10(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_407BE0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_407C30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c61",
            "decompiledFuncCode": "void __noreturn sub_407C30()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_407C70",
            "funcStartAddr": "0x407c70",
            "funcEndAddr": "0x407d40",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407C70(\n        char *a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        int a7)\n{\n  int v10; // ebx\n  int v11; // eax\n  unsigned __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v10 = a7;\n  v11 = sub_4081A0(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 == 1 )\n    {\n      *v18 = 75;\n    }\n    else if ( v17 == 3 )\n    {\n      *v18 = 0;\n    }\n  }\n  else\n  {\n    v12 = v19;\n    if ( v19 >= a3 && v19 <= a4 )\n      return v12;\n    v13 = __errno_location();\n    *v13 = v19 < 0x40000000 ? 34 : 75;\n  }\n  v14 = sub_407410((__int64)a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", a6, v14);\n  return v19;\n}\n"
        },
        {
            "funcName": "sub_407D40",
            "funcStartAddr": "0x407d40",
            "funcEndAddr": "0x407d61",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407D40(\n        char *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        int a6)\n{\n  return sub_407C70(a1, 10LL, a2, a3, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_407D70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x408194",
            "decompiledFuncCode": "__int64 __fastcall sub_407D70(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoul\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, p_endptr, a3);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_4081A0",
            "funcStartAddr": "0x4081a0",
            "funcEndAddr": "0x4085d4",
            "decompiledFuncCode": "__int64 __fastcall sub_4081A0(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_4085E0",
            "funcStartAddr": "0x4085e0",
            "funcEndAddr": "0x40865b",
            "decompiledFuncCode": "int __fastcall sub_4085E0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4087A0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408660",
            "funcStartAddr": "0x408660",
            "funcEndAddr": "0x408795",
            "decompiledFuncCode": "__int64 __fastcall sub_408660(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_60E478 < 0 )\n    {\n      v6 = sub_408660(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_60E478 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_408660(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_60E478 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_60E478 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_4087A0",
            "funcStartAddr": "0x4087a0",
            "funcEndAddr": "0x4087e0",
            "decompiledFuncCode": "int __fastcall sub_4087A0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_4087E0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_4087E0",
            "funcStartAddr": "0x4087e0",
            "funcEndAddr": "0x408837",
            "decompiledFuncCode": "int __fastcall sub_4087E0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_408840",
            "funcStartAddr": "0x408840",
            "funcEndAddr": "0x40891f",
            "decompiledFuncCode": "__int64 __fastcall sub_408840(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408920",
            "funcStartAddr": "0x408920",
            "funcEndAddr": "0x408f3c",
            "decompiledFuncCode": "__int64 __fastcall sub_408920(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408F40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x409506",
            "decompiledFuncCode": "__int64 __fastcall sub_408F40(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_408840((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408840((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408920(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408920(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408920(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_409510",
            "funcStartAddr": "0x409510",
            "funcEndAddr": "0x409566",
            "decompiledFuncCode": "__int64 __fastcall sub_409510(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60E480 = dword_60E2BC;\n  dword_60E484 = dword_60E2B8;\n  result = sub_408F40(a1, a2, a3, a4, a5, a6, &dword_60E480, a7);\n  dword_60E2BC = dword_60E480;\n  qword_60E4C0 = qword_60E490;\n  dword_60E2B4 = dword_60E488;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409570",
            "funcStartAddr": "0x409570",
            "funcEndAddr": "0x409588",
            "decompiledFuncCode": "__int64 __fastcall sub_409570(int a1, __int64 *a2, const char *a3)\n{\n  return sub_409510(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x409590",
            "funcEndAddr": "0x4095a3",
            "decompiledFuncCode": "__int64 __fastcall sub_409590(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409510(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_4095B0",
            "funcStartAddr": "0x4095b0",
            "funcEndAddr": "0x4095c5",
            "decompiledFuncCode": "__int64 __fastcall sub_4095B0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408F40(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_4095D0",
            "funcStartAddr": "0x4095d0",
            "funcEndAddr": "0x4095e6",
            "decompiledFuncCode": "__int64 __fastcall sub_4095D0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409510(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_4095F0",
            "funcStartAddr": "0x4095f0",
            "funcEndAddr": "0x409608",
            "decompiledFuncCode": "__int64 __fastcall sub_4095F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408F40(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_409610",
            "funcStartAddr": "0x409610",
            "funcEndAddr": "0x40968a",
            "decompiledFuncCode": "size_t __fastcall sub_409610(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_4096F0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_409690",
            "funcStartAddr": "0x409690",
            "funcEndAddr": "0x4096ed",
            "decompiledFuncCode": "int __fastcall sub_409690(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4085E0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_4096F0",
            "funcStartAddr": "0x4096f0",
            "funcEndAddr": "0x40974e",
            "decompiledFuncCode": "bool __fastcall sub_4096F0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x409750",
            "funcEndAddr": "0x409cb2",
            "decompiledFuncCode": "const char *sub_409750()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60E4B8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60E4B8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_60E4B8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_4085E0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4085E0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409D30",
            "funcStartAddr": "0x409d30",
            "funcEndAddr": "0x409d48",
            "decompiledFuncCode": "int __fastcall sub_409D30(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60E228 )\n    v1 = (void *)qword_60E228;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_409D48",
            "funcStartAddr": "0x409d48",
            "funcEndAddr": "0x409d68",
            "decompiledFuncCode": "__int64 __fastcall sub_409D48(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60DE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 88
}