{
    "funcInfo": [
        {
            "funcName": "sub_406fc0",
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x406fca",
            "decompiledFuncCode": "int sub_406fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_4070c0",
            "funcStartAddr": "0x4070c0",
            "funcEndAddr": "0x4070d2",
            "decompiledFuncCode": "int sub_4070c0()\n{\n}\n"
        },
        {
            "funcName": "sub_402ed1",
            "funcStartAddr": "0x402ed1",
            "funcEndAddr": "0x402f28",
            "decompiledFuncCode": "extern char g_60e2e8;\nextern unsigned long long g_60e2f0;\n\nint sub_402ed1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60e2e8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60e2f0 >= 0)\n            {\n                break;\n            }\n            g_60e2f0 = g_60e2f0 + 1;\n            *((long long *)(6348352 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60e2e8 = 1;\n        return sub_402e7b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4096f0",
            "funcStartAddr": "0x4096f0",
            "funcEndAddr": "0x409746",
            "decompiledFuncCode": "int sub_4096f0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402f90",
            "funcStartAddr": "0x402f90",
            "funcEndAddr": "0x402ffb",
            "decompiledFuncCode": "int sub_402f90()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rdx\n    char *v7;  // r9\n\n    v2 = v1 + 1;\n    v6 = 0;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = (char)*((char *)(v1 + v6));\n            if (*((char *)(v1 + v6)) != 0)\n            {\n                if (v4 != 92)\n                {\n                    *((unsigned long long *)(v2 - 1)) = v4;\n                    v7 = v2;\n                }\n                else if (v3 - 1 != v6)\n                {\n                    v6 += 1;\n                    v5 = (char)*((char *)(v1 + v6));\n                    if (*((char *)(v1 + v6)) == 92)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 92;\n                    }\n                    else if (v5 == 110)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 10;\n                    }\n                }\n                if ((v4 != 92 || v3 - 1 != v6) && (v5 == 110 || *((char *)(v1 + v6)) == 92 || v4 != 92))\n                {\n                    v6 += 1;\n                    v2 += 1;\n                    if (v7 >= v3 + v1)\n                    {\n                        break;\n                    }\n                    *(v7) = 0;\n                }\n            }\n            if (*((char *)(v1 + v6)) == 0 || v4 == 92 && v3 - 1 == v6 || v4 == 92 && v5 != 110 && *((char *)(v1 + v6)) != 92)\n            {\n                return 0;\n            }\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409570",
            "funcStartAddr": "0x409570",
            "funcEndAddr": "0x409588",
            "decompiledFuncCode": "int sub_409570()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_409510();\n}\n"
        },
        {
            "funcName": "sub_405470",
            "funcStartAddr": "0x405470",
            "funcEndAddr": "0x40557f",
            "decompiledFuncCode": "extern unsigned int g_40abfd;\nextern unsigned long long stderr[7];\n\nint sub_405470()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40abfd, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_407410();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_407410();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x405658",
            "decompiledFuncCode": "extern unsigned long long g_60e330;\n\nint sub_405650()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60e330 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406fd0",
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x407065",
            "decompiledFuncCode": "extern struct_0 *g_60e298;\nextern unsigned long long g_60e2a0;\nextern unsigned long long g_60e2a8;\nextern unsigned int g_60e2b0;\nextern unsigned long long g_60e340;\n\nint sub_406fd0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60e2b0;\n    if (g_60e2b0 > 1)\n    {\n        v2 = &g_60e298[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60e298[(unsigned long long)(g_60e2b0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60e298->field_8 != 6349632)\n    {\n        v1 = free(g_60e298->field_8);\n        g_60e2a0 = 0x100;\n        g_60e2a8 = &g_60e340;\n    }\n    if (g_60e298 != 6349472)\n    {\n        v1 = free(g_60e298);\n        g_60e298 = &g_60e2a0;\n    }\n    g_60e2b0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406db0",
            "funcStartAddr": "0x406db0",
            "funcEndAddr": "0x406dbf",
            "decompiledFuncCode": "extern int512_t g_60e440;\n\nint sub_406db0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60e440 : v1)) = v2;\n    return &g_60e440;\n}\n"
        },
        {
            "funcName": "sub_404e90",
            "funcStartAddr": "0x404e90",
            "funcEndAddr": "0x404eca",
            "decompiledFuncCode": "int sub_404e90()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rcx\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rbx\n\n    if (v3 - 1 <= 63 && v4 - 1 <= 63 && v5 != 0)\n    {\n        v1 = stack_base + 0;\n        v0 = v6;\n    }\n    if (v5 == 0 || v4 - 1 > 63 || v3 - 1 > 63)\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_4095f0",
            "funcStartAddr": "0x4095f0",
            "funcEndAddr": "0x409608",
            "decompiledFuncCode": "int sub_4095f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408f40();\n}\n"
        },
        {
            "funcName": "sub_407260",
            "funcStartAddr": "0x407260",
            "funcEndAddr": "0x407271",
            "decompiledFuncCode": "int sub_407260()\n{\n}\n"
        },
        {
            "funcName": "sub_409d48",
            "funcStartAddr": "0x409d48",
            "funcEndAddr": "0x409d68",
            "decompiledFuncCode": "extern unsigned long long g_60de30;\n\nint sub_409d48()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60de30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407430",
            "funcStartAddr": "0x407430",
            "funcEndAddr": "0x40743e",
            "decompiledFuncCode": "int sub_407430()\n{\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x409590",
            "funcEndAddr": "0x4095a3",
            "decompiledFuncCode": "int sub_409590()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409510();\n}\n"
        },
        {
            "funcName": "sub_407090",
            "funcStartAddr": "0x407090",
            "funcEndAddr": "0x40709a",
            "decompiledFuncCode": "int sub_407090()\n{\n}\n"
        },
        {
            "funcName": "sub_4057f0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x405889",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60e338;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4057f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60e338 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4050e4",
            "funcStartAddr": "0x4050e4",
            "funcEndAddr": "0x40514d",
            "decompiledFuncCode": "int sub_4050e4()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // rcx\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rdi\n    unsigned long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long v11;  // rsi\n    unsigned long v12;  // r14\n    unsigned long v13;  // r13\n    unsigned long v14;  // r12\n    unsigned long v15;  // rbx\n\n    if ((v6 != 0 & v7 == 0) == 0 && v8 != 0 && (v10 == 0 || v9 != 0) && v11 - 1 <= 63 && v10 <= 64)\n    {\n        v4 = v12;\n        v3 = v13;\n        v2 = v14;\n        v1 = stack_base + 0;\n        v0 = v15;\n    }\n    if (v8 == 0 || (v6 != 0 & v7 == 0) != 0 || v11 - 1 > 63 || v10 > 64 || v9 == 0 && v10 != 0)\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_4079e0",
            "funcStartAddr": "0x4079e0",
            "funcEndAddr": "0x4079fa",
            "decompiledFuncCode": "int sub_4079e0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_407c30(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_407a40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407a70",
            "decompiledFuncCode": "int sub_407a40()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_407c30(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405149",
            "funcStartAddr": "0x405149",
            "funcEndAddr": "0x4051b0",
            "decompiledFuncCode": "int sub_405149()\n{\n    unsigned long long v0;  // [bp+0x0]\n    unsigned long long v2;  // [bp+0x10]\n    unsigned long long v3;  // [bp+0x18]\n    unsigned long long v4;  // [bp+0x20]\n    unsigned long v5;  // r9\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned long v8;  // r14\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // r12\n    unsigned long long v14;  // r13\n    unsigned long long v15;  // r14\n\n    if (v5 == 0)\n    {\n        v6 = sub_404e20();\n    }\n    else\n    {\n        v7 = sub_404e90();\n    }\n    if (v6 < 0 && v5 == 0 || v7 < 0 && v5 != 0)\n    {\n        v11 = -18446744069414584321;\n    }\n    if (v5 == 0 && v6 >= 0 || v7 >= 0 && v5 != 0)\n    {\n        if (v8 != 0)\n        {\n            sub_404c20();\n        }\n        sub_404fa0();\n        v11 = 0;\n    }\n    v12 = v0;\n    v13 = v2;\n    v14 = v3;\n    v15 = v4;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_406ec2",
            "funcStartAddr": "0x406ec2",
            "funcEndAddr": "0x406eeb",
            "decompiledFuncCode": "int sub_406ec2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_405710",
            "funcStartAddr": "0x405710",
            "funcEndAddr": "0x405715",
            "decompiledFuncCode": "int sub_405710()\n{\n}\n"
        },
        {
            "funcName": "sub_406da0",
            "funcStartAddr": "0x406da0",
            "funcEndAddr": "0x406daf",
            "decompiledFuncCode": "extern int512_t g_60e440;\n\nint sub_406da0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60e440 : v1));\n}\n"
        },
        {
            "funcName": "sub_407c10",
            "funcStartAddr": "0x407c10",
            "funcEndAddr": "0x407c23",
            "decompiledFuncCode": "int sub_407c10()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_403680",
            "funcStartAddr": "0x403680",
            "funcEndAddr": "0x404c1a",
            "decompiledFuncCode": "int sub_403680() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_407150",
            "funcStartAddr": "0x407150",
            "funcEndAddr": "0x4071b9",
            "decompiledFuncCode": "int sub_407150()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406bc0();\n}\n"
        },
        {
            "funcName": "sub_406eeb",
            "funcStartAddr": "0x406eeb",
            "funcEndAddr": "0x406fb1",
            "decompiledFuncCode": "int sub_406eeb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_405990();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4079e0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_405990();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409d30",
            "funcStartAddr": "0x409d30",
            "funcEndAddr": "0x409d48",
            "decompiledFuncCode": "extern int512_t g_60e228;\n\nint sub_409d30()\n{\n}\n"
        },
        {
            "funcName": "sub_409510",
            "funcStartAddr": "0x409510",
            "funcEndAddr": "0x409566",
            "decompiledFuncCode": "extern unsigned int g_60e2b4;\nextern unsigned int g_60e2b8;\nextern unsigned int g_60e2bc;\nextern unsigned int g_60e480;\nextern unsigned int g_60e484;\nextern unsigned int g_60e488;\nextern unsigned long long g_60e490;\nextern unsigned long long g_60e4c0;\n\nint sub_409510()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60e480 = g_60e2bc;\n    g_60e484 = g_60e2b8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60e480;\n    g_60e2bc = g_60e480;\n    g_60e4c0 = g_60e490;\n    g_60e2b4 = g_60e488;\n    return sub_408f40();\n}\n"
        },
        {
            "funcName": "sub_408f40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x4094a7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_40c4e0;\nextern unsigned int g_40c524;\n\nint sub_408f40()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9d\n    char *[3]|unsigned long long * v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_408840();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_408840();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_408920();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40c4e0, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40c524, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40c4e0, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_408920();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_404c20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404d37",
            "decompiledFuncCode": "int sub_404c20()\n{\n    void tmp_1;  // tmp #1\n    char v0;  // [bp-0x20]\n    char v1;  // [bp-0x18]\n    unsigned long long v3[29];  // rdi\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rdx\n    unsigned long long v6[29];  // rbx\n    unsigned long long v7;  // r15\n    unsigned long v8;  // rbp\n    void *v9;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long v13;  // r15\n    unsigned long long v14;  // r12\n    void *v15;  // rdi\n    unsigned long long v18;  // r13\n\n    v4 = &v3[12];\n    v18 = v5;\n    v6 = v3;\n    v7 = v3[28];\n    v8 = 128 - v3[28];\n    v15 = (char *)&v3[12] + v3[28];\n    if (v8 < v5)\n    {\n        v6[28] = 0;\n        v18 = v7 + v5 - 128;\n        memcpy(v15, v9, v8);\n        tmp_1 = v6[8] - -128;\n        v6[8] = v6[8] - -128;\n        v11 = v8 + v9;\n        v6[9] = v6[9] + (unsigned long long)(char)(tmp_1 <= 127);\n        sub_403680();\n        if (v18 > 128)\n        {\n            v13 = v18 - 129 >> 7;\n            v14 = ((v18 - 129 >> 7) + 1) * 128 + v11;\n            while (true)\n            {\n                tmp_1 = v6[8] - -128;\n                v6[8] = v6[8] - -128;\n                v11 -= -128;\n                v6[9] = v6[9] + (unsigned long long)(char)(tmp_1 <= 127);\n                sub_403680();\n                if (v14 == v11)\n                {\n                    break;\n                }\n            }\n            v18 = v18 + (0 - v13) * 128 - 128;\n            v15 = v6[28] + v4;\n        }\n        else\n        {\n            v15 = v6[28] + v4;\n        }\n    }\n    v6[28] = v6[28] + v18;\n    return memcpy(v15, *((long long *)&v0), *((long long *)&v1));\n}\n"
        },
        {
            "funcName": "sub_4051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x4051c5",
            "decompiledFuncCode": "int sub_4051c0()\n{\n}\n"
        },
        {
            "funcName": "sub_407300",
            "funcStartAddr": "0x407300",
            "funcEndAddr": "0x40736c",
            "decompiledFuncCode": "extern uint128_t g_60e440;\nextern uint128_t g_60e450;\nextern uint128_t g_60e460;\nextern unsigned long long g_60e470;\n\nint sub_407300()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60e440;\n    *((uint128_t *)&v1) = g_60e450;\n    *((uint128_t *)&v2) = g_60e460;\n    v4 = g_60e470;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_406bc0();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4081a0",
            "funcStartAddr": "0x4081a0",
            "funcEndAddr": "0x4085ad",
            "decompiledFuncCode": "int sub_4081a0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned int|unsigned long long v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned int|unsigned long long v39;  // rdi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep1\n    unsigned long long v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned int v48;  // cc_dep1\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4243672)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v38 = v30;\n                v39 = 6;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v39;\n                    v39 -= 1;\n                }\n                while (v46 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v49 = tmp_11 * v28 * v28;\n                    v33 = v49;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v34 = v30;\n                v35 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v35;\n                    v35 -= 1;\n                }\n                while (v44 != 1);\n            case 18: case 50:\n                v40 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n                break;\n            case 23:\n                v36 = v30;\n                v37 = 8;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v37;\n                    v37 -= 1;\n                }\n                while (v45 != 1);\n            case 24:\n                v41 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v41;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v48 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v48 != 1);\n            case 32:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v50 = &v32[v31];\n                *(v12) = v50;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4073a0",
            "funcStartAddr": "0x4073a0",
            "funcEndAddr": "0x4073b3",
            "decompiledFuncCode": "int sub_4073a0()\n{\n}\n"
        },
        {
            "funcName": "sub_406e50",
            "funcStartAddr": "0x406e50",
            "funcEndAddr": "0x406ec2",
            "decompiledFuncCode": "extern int512_t g_60e440;\n\nint sub_406e50()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60e440 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_405990();\n}\n"
        },
        {
            "funcName": "sub_407a00",
            "funcStartAddr": "0x407a00",
            "funcEndAddr": "0x407a21",
            "decompiledFuncCode": "int sub_407a00()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407c30(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4087e0",
            "funcStartAddr": "0x4087e0",
            "funcEndAddr": "0x408836",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4087e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4070e0",
            "funcStartAddr": "0x4070e0",
            "funcEndAddr": "0x40714d",
            "decompiledFuncCode": "int sub_4070e0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406bc0();\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x407426",
            "decompiledFuncCode": "int sub_407410()\n{\n}\n"
        },
        {
            "funcName": "sub_406dc0",
            "funcStartAddr": "0x406dc0",
            "funcEndAddr": "0x406df3",
            "decompiledFuncCode": "extern int512_t g_60e440;\n\nint sub_406dc0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60e440 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60e440 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x4055fd",
            "decompiledFuncCode": "int sub_405590()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_4052d0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_4053f0();\n        sub_405470();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406e20",
            "funcStartAddr": "0x406e20",
            "funcEndAddr": "0x406e4b",
            "decompiledFuncCode": "extern char g_60e440;\n\nint sub_406e20()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60e440 : v2);\n    *((int *)(tmp_11? &g_60e440 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60e440;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60e440;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4071c0",
            "funcStartAddr": "0x4071c0",
            "funcEndAddr": "0x4071cc",
            "decompiledFuncCode": "int sub_4071c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4078a0",
            "funcStartAddr": "0x4078a0",
            "funcEndAddr": "0x407958",
            "decompiledFuncCode": "int sub_4078a0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_407440();\n    }\n}\n"
        },
        {
            "funcName": "sub_4071df",
            "funcStartAddr": "0x4071df",
            "funcEndAddr": "0x407250",
            "decompiledFuncCode": "extern uint128_t g_60e440;\nextern uint128_t g_60e450;\nextern uint128_t g_60e460;\nextern unsigned long long g_60e470;\n\nint sub_4071df()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60e470;\n    *((uint128_t *)&v0) = g_60e440;\n    *((uint128_t *)&v1) = g_60e450;\n    *((uint128_t *)&v2) = g_60e460;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_406bc0();\n}\n"
        },
        {
            "funcName": "sub_407290",
            "funcStartAddr": "0x407290",
            "funcEndAddr": "0x407303",
            "decompiledFuncCode": "int sub_407290()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406bc0();\n}\n"
        },
        {
            "funcName": "sub_407b40",
            "funcStartAddr": "0x407b40",
            "funcEndAddr": "0x407b8a",
            "decompiledFuncCode": "int sub_407b40() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407be0",
            "funcStartAddr": "0x407be0",
            "funcEndAddr": "0x407c08",
            "decompiledFuncCode": "int sub_407be0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4079e0();\n}\n"
        },
        {
            "funcName": "sub_402e7b",
            "funcStartAddr": "0x402e7b",
            "funcEndAddr": "0x402e9a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_402e7b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x406ac8",
            "decompiledFuncCode": "int sub_405990()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|unsigned long long v77;  // rsi\n    unsigned int|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    char|unsigned long long v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_405890();\n            v27 = (unsigned int)sub_405890();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                    if (v4 == 0)\n                                    {\n                                        v55 = 0;\n                                        v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                                        v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                                        v78 = 0;\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v89 = (unsigned int)v39 == 2;\n                                        v89 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v40 = v45;\n                                        v78 = 0;\n                                        v87 = v89;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                        if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v48 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_405990();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_409610();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v89 == 0 || v80 < v64) && (v89 == 0 || v63 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_405990();\n            }\n            if (v17 == 0 && v4 != 0 || v17 == 0 && v5 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v4 == 0 || (v15 != 1 || v89 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_4095b0",
            "funcStartAddr": "0x4095b0",
            "funcEndAddr": "0x4095c5",
            "decompiledFuncCode": "int sub_4095b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408f40();\n}\n"
        },
        {
            "funcName": "sub_407070",
            "funcStartAddr": "0x407070",
            "funcEndAddr": "0x407081",
            "decompiledFuncCode": "int sub_407070()\n{\n}\n"
        },
        {
            "funcName": "sub_4071d0",
            "funcStartAddr": "0x4071d0",
            "funcEndAddr": "0x4071df",
            "decompiledFuncCode": "int sub_4071d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4085e0",
            "funcStartAddr": "0x4085e0",
            "funcEndAddr": "0x408658",
            "decompiledFuncCode": "int sub_4085e0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4087a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4070a0",
            "funcStartAddr": "0x4070a0",
            "funcEndAddr": "0x4070b6",
            "decompiledFuncCode": "int sub_4070a0()\n{\n}\n"
        },
        {
            "funcName": "sub_402f28",
            "funcStartAddr": "0x402f28",
            "funcEndAddr": "0x402f64",
            "decompiledFuncCode": "int sub_402f28() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407250",
            "funcStartAddr": "0x407250",
            "funcEndAddr": "0x40725d",
            "decompiledFuncCode": "int sub_407250()\n{\n}\n"
        },
        {
            "funcName": "sub_4095d0",
            "funcStartAddr": "0x4095d0",
            "funcEndAddr": "0x4095e6",
            "decompiledFuncCode": "int sub_4095d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409510();\n}\n"
        },
        {
            "funcName": "sub_406bc0",
            "funcStartAddr": "0x406bc0",
            "funcEndAddr": "0x406d60",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60e298;\nextern uint128_t g_60e2a0;\nextern unsigned int g_60e2b0;\nextern int512_t g_60e340;\n\nint sub_406bc0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60e298;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60e2b0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60e298 != 6349472)\n            {\n                v16 = sub_407a40();\n                g_60e298 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_407a40();\n                v17 = v15;\n                g_60e298 = v15;\n                *(v15) = g_60e2a0;\n            }\n            memset(&v17[(long long)(int)g_60e2b0], 0x0, (int)((unsigned int)v13 + 1 - g_60e2b0) * 16);\n            g_60e2b0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_407c30(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_60e2b0 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_405990();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6349632)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4079e0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_405990();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_407960",
            "funcStartAddr": "0x407960",
            "funcEndAddr": "0x4079d4",
            "decompiledFuncCode": "extern unsigned int g_40ba12;\nextern unsigned int g_40ba3d;\nextern unsigned int g_40bc70;\n\nint sub_407960()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ba12, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ba3d, 0x5));\n    dcgettext(0x0, 0x40bc70, 0x5);\n}\n"
        },
        {
            "funcName": "sub_407bb0",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407bde",
            "decompiledFuncCode": "int sub_407bb0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_407c30(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409690",
            "funcStartAddr": "0x409690",
            "funcEndAddr": "0x4096ec",
            "decompiledFuncCode": "int sub_409690()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4085e0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408920",
            "funcStartAddr": "0x408920",
            "funcEndAddr": "0x408f1e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40c418;\nextern unsigned int g_40c438;\nextern unsigned int g_40c468;\nextern unsigned int g_40c488;\nextern unsigned int g_40c4b8;\nextern unsigned long long stderr;\n\nint sub_408920()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long *|unsigned long long v18;  // rbx\n    unsigned int|unsigned long|unsigned long long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40c418, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40c438, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v21 == 0) && (*(v18) == 0 || v22 == v16) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (v4 == 0 || v22 == v16) && (v1 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40c4b8, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40c488, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40c468, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_405660",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x405668",
            "decompiledFuncCode": "extern char g_60e328;\n\nint sub_405660()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60e328 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405670",
            "funcStartAddr": "0x405670",
            "funcEndAddr": "0x40570e",
            "decompiledFuncCode": "extern unsigned int g_40ac1f;\nextern unsigned int g_60e250;\nextern char g_60e328;\nextern unsigned long long g_60e330;\n\nint sub_405670()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_409690();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60e328 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40ac1f, 0x5);\n            if (g_60e330 != 0)\n            {\n                sub_407260();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60e328 != 0)\n    {\n        v3 = sub_409690();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_60e328 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60e250);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_404ec6",
            "funcStartAddr": "0x404ec6",
            "funcEndAddr": "0x404f6e",
            "decompiledFuncCode": "int sub_404ec6()\n{\n    char v0;  // [bp-0xc8]\n    char v1;  // [bp-0xc7]\n    unsigned long long v2;  // [bp-0xc6]\n    unsigned long long v3;  // [bp-0xbe]\n    unsigned long long v4;  // [bp-0xb6]\n    unsigned int v5;  // [bp-0xae]\n    unsigned short v6;  // [bp-0xaa]\n    void v7;  // [bp-0xa8]\n    void v8;  // [bp-0x98]\n    char|unsigned long long v9;  // [bp-0x88]\n    unsigned long long v10;  // [bp+0x0]\n    char v12;  // sil\n    char v13;  // cl\n    unsigned short v14;  // ax\n    void v15;  // xmm0\n    unsigned long v17;  // d\n    unsigned long long *v18;  // rdi\n    unsigned long long v19;  // rcx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbx\n\n    v0 = v12;\n    v1 = v13;\n    v2 = 257;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = v14;\n    v7 = v15;\n    v8 = v15;\n    if (sub_404d50() >= 0)\n    {\n        v19 = 16;\n        for (v18 = &v9; v19 != 0; v18 = &v18[v17])\n        {\n            v19 -= 1;\n            v9 = 0;\n        }\n        __memcpy_chk((unsigned int)&v9);\n        sub_404c20();\n        memset(&v9, 0x0, 0x80);\n        v22 = 0;\n    }\n    else\n    {\n        v22 = -18446744069414584321;\n    }\n    v23 = v10;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_407c30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c61",
            "decompiledFuncCode": "extern unsigned int g_40bd4f;\nextern unsigned int g_60e250;\n\nint sub_407c30()\n{\n    dcgettext(0x0, 0x40bd4f, 0x5);\n    error(g_60e250, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407c70",
            "funcStartAddr": "0x407c70",
            "funcEndAddr": "0x407d33",
            "decompiledFuncCode": "int sub_407c70()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    v2 = sub_4081a0();\n    if ((unsigned int)v2 == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            *(v6) = (0 - (unsigned int)(char)(v0 < 0x40000000) & -41) + 75;\n        }\n    }\n    else\n    {\n        v4 = v2;\n        v6 = __errno_location();\n        if (!(v4 != 1))\n        {\n            *(v6) = 75;\n        }\n        else if (v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || (unsigned int)v2 != 0 || v0 > v5)\n    {\n        sub_407410();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: %s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_407cfd",
            "funcStartAddr": "0x407cfd",
            "funcEndAddr": "0x407d02",
            "decompiledFuncCode": "int sub_407cfd()\n{\n}\n"
        },
        {
            "funcName": "sub_4052d0",
            "funcStartAddr": "0x4052d0",
            "funcEndAddr": "0x4053d3",
            "decompiledFuncCode": "int sub_4052d0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407280",
            "funcStartAddr": "0x407280",
            "funcEndAddr": "0x40728a",
            "decompiledFuncCode": "int sub_407280()\n{\n}\n"
        },
        {
            "funcName": "sub_4073d0",
            "funcStartAddr": "0x4073d0",
            "funcEndAddr": "0x4073e2",
            "decompiledFuncCode": "int sub_4073d0()\n{\n}\n"
        },
        {
            "funcName": "sub_404fa0",
            "funcStartAddr": "0x404fa0",
            "funcEndAddr": "0x4050e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[56];\n    unsigned long long field_40;\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    char padding_60[128];\n    unsigned long long field_e0;\n    unsigned long long field_e8;\n    char field_f0;\n} struct_0;\n\nint sub_404fa0()\n{\n    char|uint128_t v0;  // [bp-0x58]\n    char v1;  // [bp-0x57]\n    char v2;  // [bp-0x56]\n    char v3;  // [bp-0x55]\n    char v4;  // [bp-0x54]\n    char v5;  // [bp-0x53]\n    char v6;  // [bp-0x52]\n    char v7;  // [bp-0x51]\n    uint128_t v8;  // [bp-0x48]\n    uint128_t v9;  // [bp-0x38]\n    uint128_t v10;  // [bp-0x28]\n    void *v12;  // rsi\n    struct_0 *v13;  // rdi\n    unsigned long v14;  // rdx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rdx\n    char v17;  // cc_dep1\n    struct_0 *v22;  // rcx\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rdx\n    unsigned long long v27;  // rax\n\n    v0 = 0;\n    v8 = 0;\n    v9 = 0;\n    v10 = 0;\n    if (v12 != 0 && v13->field_e8 <= v14 && v13->field_50 == 0)\n    {\n        v15 = v13->field_e0;\n        v16 = v13->field_e0 + v13->field_40;\n        v13->field_48 = v13->field_48 + ((v13->field_e0 + v13->field_40 <= v13->field_e0? 1 : 0) & 1);\n        v17 = v13->field_f0;\n        v13->field_40 = v16;\n        if (v17 != 0)\n        {\n            v13->field_58 = -1;\n        }\n        v13->field_50 = -1;\n        memset((char *)&v13->padding_60 + v15, 0x0, 128 - v15);\n        sub_403680();\n        v22 = v13;\n        v23 = &v0;\n        do\n        {\n            v24 = v22->field_0;\n            v23 = &v0;\n            v22 = &v22->padding_8;\n            *((unsigned long long *)&v0) = v24;\n            v1 = (char)v24 % 0x100;\n            v2 = (char)v24 % 0x10000;\n            v3 = (char)v24 % 0x1000000;\n            v4 = (char)v24 % 0x100000000;\n            v5 = (char)v24 % 0x10000000000;\n            v7 = (char)v24 % 0x100000000000000;\n            v6 = (char)v24 % 0x1000000000000;\n        }\n        while (v23 != stack_base + -24);\n        memcpy(v12, &v0, v22->field_e8);\n        memset(&v0, 0x0, 0x40);\n        v27 = 0;\n    }\n    if (v12 == 0 || v13->field_e8 > v14 || v13->field_50 != 0)\n    {\n        v27 = -18446744069414584321;\n    }\n    return v27;\n}\n"
        },
        {
            "funcName": "sub_407840",
            "funcStartAddr": "0x407840",
            "funcEndAddr": "0x407899",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_407840()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_407440();\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x403675",
            "decompiledFuncCode": "extern unsigned int g_409dff;\nextern unsigned int g_409f68;\nextern unsigned int g_409f90;\nextern unsigned int g_409fd8;\nextern unsigned int g_40a010;\nextern unsigned int g_40a040;\nextern unsigned int g_40a088;\nextern unsigned int g_40a120;\nextern unsigned int g_40a158;\nextern unsigned int g_40a190;\nextern unsigned int g_40a348;\nextern unsigned int g_40a378;\nextern unsigned int g_40a3b0;\nextern unsigned int g_40a508;\nextern unsigned int g_40a550;\nextern unsigned int g_40a570;\nextern unsigned long long stdout;\n\nint sub_403280()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v32[2];  // rax\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long v38;  // d\n    char *v42;  // rax\n    char *v43;  // rax\n    unsigned long long v44;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x409f68, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409f90, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409fd8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a010, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a040, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a088, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a120, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a158, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a190, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a348, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a378, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3b0, 0x5));\n        v0 = \"[\";\n        v32 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v32 = &v2;\n            v33 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v34 = \"b2sum\";\n            v35 = 6;\n            if ((v36 > v37) - 0 - (v36 < v37) == 0)\n            {\n                break;\n            }\n            while (v35 != 0)\n            {\n                v35 -= 1;\n                v36 = *(v34);\n                v37 = *(v33);\n                v33 = &v33[v38];\n                v34 = &v34[v38];\n                break;\n            }\n        }\n        if (v32[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409dff, 0x5));\n            v43 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409dff, 0x5));\n            v42 = setlocale(0x5, 0x0);\n            if (v42 != 0)\n            {\n                v44 = strncmp(v42, \"en_\", 0x3);\n            }\n            if (v44 == 0 || v42 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a550, 0x5));\n            }\n        }\n        if ((v32[1] == 0 || v43 != 0) && (v32[1] == 0 || strncmp(v43, \"en_\", 0x3) != 0) && (v44 != 0 || v32[1] != 0) && (v32[1] != 0 || v42 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a508, 0x5));\n        }\n        if (v32[1] != 0 || v44 != 0 && v42 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a550, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a570, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406d60",
            "funcStartAddr": "0x406d60",
            "funcEndAddr": "0x406d94",
            "decompiledFuncCode": "int sub_406d60()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_407be0();\n}\n"
        },
        {
            "funcName": "sub_4073f0",
            "funcStartAddr": "0x4073f0",
            "funcEndAddr": "0x407401",
            "decompiledFuncCode": "int sub_4073f0()\n{\n}\n"
        },
        {
            "funcName": "sub_4030d0",
            "funcStartAddr": "0x4030d0",
            "funcEndAddr": "0x40325e",
            "decompiledFuncCode": "extern char g_60e306;\nextern char g_60e320;\nextern unsigned long long stdin;\n\nint sub_4030d0()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rdi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rsi\n    char *v8;  // rdi\n    char *v9;  // rdx\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r12\n    unsigned int *v17;  // rbx\n    unsigned long long v18;  // rax\n    unsigned long long v20;  // rbp\n    unsigned long long v21;  // rbx\n    unsigned long long v23;  // rax\n\n    v1 = 2;\n    v8 = \"-\";\n    v7 = v2;\n    while (v1 != 0)\n    {\n        v1 -= 1;\n        v4 = *(v7);\n        v5 = *(v8);\n        v8 = &v8[v6];\n        v7 = &v7[v6];\n        break;\n    }\n    *(v9) = 0;\n    v10 = (v4 > v5) - 0 - (v4 < v5);\n    if ((char)v10 == 0)\n    {\n        v11 = stdin;\n        g_60e320 = 1;\n        sub_405720();\n        v13 = sub_4051d0();\n    }\n    else\n    {\n        v11 = (unsigned int)sub_405750();\n        if (v11 != 0)\n        {\n            sub_405720();\n            v15 = sub_4051d0();\n            if (v15 == 0)\n            {\n                v18 = sub_4085e0();\n                if (v18 != 0)\n                {\n                    v16 = 0;\n                    v21 = (unsigned int)sub_407290();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n        }\n        else\n        {\n            v16 = g_60e306;\n            v17 = __errno_location();\n            if (g_60e306 != 0 && *(v17) == 2)\n            {\n                *(v9) = 1;\n            }\n            if (g_60e306 == 0 || *(v17) != 2)\n            {\n                v16 = 0;\n                sub_407290();\n                error(0x0, *(v17), \"%s\");\n            }\n        }\n    }\n    if ((char)v10 == 0 || v11 != 0)\n    {\n        if (((char)v10 == 0 || v15 != 0) && (v13 != 0 || (char)v10 != 0))\n        {\n            v16 = 0;\n            v20 = (unsigned int)sub_407290();\n            error(0x0, *(__errno_location()), \"%s\");\n            if (stdin != v11)\n            {\n                sub_4085e0();\n            }\n        }\n        if ((v15 == 0 || (char)v10 == 0) && (v18 == 0 || (char)v10 == 0) && (v13 == 0 || (char)v10 != 0))\n        {\n            v16 = 1;\n        }\n    }\n    v23 = v16;\n    return v23;\n}\n"
        },
        {
            "funcName": "sub_407d40",
            "funcStartAddr": "0x407d40",
            "funcEndAddr": "0x407d61",
            "decompiledFuncCode": "int sub_407d40()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_407c70();\n}\n"
        },
        {
            "funcName": "sub_404d50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404e17",
            "decompiledFuncCode": "int sub_404d50()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r8\n    unsigned long long v3[22];  // rdi\n    unsigned long long v4;  // rcx\n    unsigned long v5;  // d\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rdx\n\n    *((long long *)(v1 + 64)) = 0;\n    v2 = v1;\n    v9 = 7640891576956012808;\n    *((long long *)(v1 + 72 + 168)) = 0;\n    v3 = v1 + 72 & -8;\n    for (v4 = &((unsigned long long [22])(v2 + -0x1 * v3))[31] >> 3; v4 != 0; v3 = &v3[v5])\n    {\n        v4 -= 1;\n        v3[0] = 0;\n    }\n    *((long long *)v2) = 7640891576956012808;\n    *((long long *)(v2 + 8)) = 13503953896175478587;\n    *((long long *)(v2 + 16)) = 4354685564936845355;\n    *((long long *)(v2 + 24)) = 11912009170470909681;\n    *((long long *)(v2 + 32)) = 5840696475078001361;\n    *((long long *)(v2 + 40)) = 11170449401992604703;\n    *((long long *)(v2 + 48)) = 2270897969802886507;\n    *((long long *)(v2 + 56)) = 6620516959819538809;\n    v6 = 0;\n    while (true)\n    {\n        v8 = v9 ^ *((long long *)(v7 + v6 * 8));\n        *((unsigned long long *)(v2 + v6 * 8)) = v8;\n        v6 += 1;\n        if (v6 == 8)\n        {\n            break;\n        }\n        v9 = *((long long *)(v2 + v6 * 8));\n    }\n    *((unsigned long long *)(v2 + 232)) = (char)*((char *)v7);\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407440",
            "funcStartAddr": "0x407440",
            "funcEndAddr": "0x4077e9",
            "decompiledFuncCode": "extern unsigned int g_40b9cb;\nextern unsigned int g_40b9cf;\nextern unsigned int g_40b9df;\nextern unsigned int g_40b9f6;\nextern unsigned int g_40ba58;\nextern unsigned int g_40bb28;\nextern unsigned int g_40bb48;\nextern unsigned int g_40bb70;\nextern unsigned int g_40bb98;\nextern unsigned int g_40bbc8;\n\nint sub_407440()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40b9cb, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ba58, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40b9cf, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40b9df, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40b9f6, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40bb28, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40bb48, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40bb70, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40bb98, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40bbc8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_407a80",
            "funcStartAddr": "0x407a80",
            "funcEndAddr": "0x407aa1",
            "decompiledFuncCode": "int sub_407a80()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407c30(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406e00",
            "funcStartAddr": "0x406e00",
            "funcEndAddr": "0x406e13",
            "decompiledFuncCode": "extern int512_t g_60e440;\n\nint sub_406e00()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60e440 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60e440 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x40573c",
            "decompiledFuncCode": "int sub_405720()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407a32",
            "decompiledFuncCode": "int sub_407a30()\n{\n}\n"
        },
        {
            "funcName": "sub_407b90",
            "funcStartAddr": "0x407b90",
            "funcEndAddr": "0x407ba7",
            "decompiledFuncCode": "int sub_407b90()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4079e0();\n}\n"
        },
        {
            "funcName": "sub_407370",
            "funcStartAddr": "0x407370",
            "funcEndAddr": "0x407379",
            "decompiledFuncCode": "int sub_407370()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401b20",
            "funcEndAddr": "0x402e05",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[4237792];\n    char field_40a9e0;\n} struct_1;\n\nextern unsigned int g_409e1a;\nextern unsigned int g_409e28;\nextern unsigned int g_409e37;\nextern unsigned int g_409e4a;\nextern unsigned int g_409e8a;\nextern unsigned int g_409e99;\nextern unsigned int g_409ed3;\nextern unsigned int g_409ee2;\nextern unsigned int g_40a5a8;\nextern unsigned int g_40a618;\nextern unsigned int g_40a848;\nextern unsigned int g_40a878;\nextern unsigned int g_40a8b0;\nextern unsigned int g_40a8e0;\nextern unsigned int g_40a910;\nextern unsigned int g_40a940;\nextern unsigned int g_40a970;\nextern unsigned int g_40a9a0;\nextern int512_t g_40aba0;\nextern unsigned int g_40c53f;\nextern unsigned int g_60e230;\nextern unsigned int g_60e2bc;\nextern unsigned long long g_60e2f8;\nextern unsigned int g_60e300;\nextern char g_60e304;\nextern char g_60e305;\nextern char g_60e306;\nextern char g_60e307;\nextern char g_60e308;\nextern unsigned long long g_60e310;\nextern unsigned long long g_60e318;\nextern char g_60e320;\nextern unsigned long long stdin;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x168]\n    void tmp_11;  // tmp #11\n    char|char *|unsigned long long v1;  // [bp-0x150]\n    unsigned long long *v2;  // [bp-0x148]\n    char *|unsigned long v3;  // [bp-0x140]\n    char *|char|unsigned long|unsigned long long v4;  // [bp-0x138]\n    char *|unsigned long long v5;  // [bp-0x130]\n    unsigned long|unsigned long long v6;  // [bp-0x128]\n    char v7;  // [bp-0x11d]\n    unsigned int v8;  // [bp-0x11c]\n    unsigned long|unsigned long long v9;  // [bp-0x118]\n    unsigned long long *v10;  // [bp-0x110]\n    unsigned long|unsigned long long v11;  // [bp-0x108]\n    char v12;  // [bp-0x100]\n    char v13;  // [bp-0xff]\n    char v14;  // [bp-0xfe]\n    char v15;  // [bp-0xfd]\n    unsigned int v16;  // [bp-0xfc]\n    unsigned long long v17;  // [bp-0xf0]\n    unsigned long long v18;  // [bp-0xe8]\n    unsigned long long v19;  // [bp-0xe0]\n    char v20;  // [bp-0xd8]\n    char v21;  // [bp-0x88]\n    unsigned long long v23;  // r14\n    unsigned long long v24;  // rdi\n    unsigned long long v25;  // r12\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // rbp\n    unsigned long long v31;  // rax\n    unsigned int|unsigned long v32;  // rbx\n    char v33;  // dl\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // rbx\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rbx\n    char *v41;  // rdi\n    unsigned long long v43;  // rax\n    void *v44;  // r13\n    unsigned long long v45;  // rax\n    char *v46;  // rax\n    unsigned long long v47;  // rdx\n    char *v48;  // r10\n    unsigned long long v49;  // rbx\n    unsigned long long v50;  // r8\n    char *v51;  // rdi\n    unsigned long long v52;  // rcx\n    unsigned long long v53;  // cc_dep1\n    unsigned long long v54;  // cc_dep2\n    unsigned long v55;  // d\n    unsigned long long v56;  // cc_dep1\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rcx\n    unsigned long long v60;  // rsi\n    char *v61;  // rbx\n    unsigned long long v62;  // rbp\n    char *v63;  // r11\n    char *v67;  // r10\n    char *|unsigned long long v68;  // r11\n    char *v69;  // rbx\n    unsigned long long v71;  // rdx\n    unsigned long long v72;  // rax\n    unsigned long long v73;  // rax\n    unsigned long long v74;  // rax\n    unsigned long long v75;  // rax\n    char *|unsigned long long v76;  // r8\n    unsigned long long v77;  // rdx\n    unsigned long long v78;  // rax\n    char *|unsigned long long v79;  // rbx\n    unsigned long long v80;  // al\n    unsigned long long v81;  // rbx\n    unsigned long long v82;  // r10\n    unsigned long long v83;  // r11\n    unsigned long long v84;  // r10\n    unsigned long long v85;  // rax\n    unsigned long long v86;  // rdx\n    unsigned long long v87;  // rax\n    char *v88;  // rdx\n    unsigned long long v89;  // rax\n    char *v90;  // r8\n    char *v91;  // rdi\n    unsigned long long v92;  // rcx\n    char *v93;  // rsi\n    unsigned long long v94;  // cc_dep1\n    unsigned long long v95;  // cc_dep2\n    unsigned long long v96;  // cc_dep1\n    unsigned int|unsigned long long v97;  // ebp\n    unsigned long long v98;  // rbx\n    char *v100;  // rax\n    unsigned long long v101;  // rdx\n    unsigned long|unsigned long long v102;  // r15\n    unsigned int *v103;  // rdi\n    struct_1 *v105;  // rsi\n    char v106;  // sil\n    unsigned long v107;  // rsi\n    char *v109;  // rax\n    unsigned long long v112;  // r12\n    unsigned long long v113;  // rbp\n    char *v114;  // rax\n    unsigned int|unsigned long v115;  // rbx\n    unsigned long long v116;  // rax\n    unsigned long long v117;  // rbx\n    unsigned long long v119;  // rax\n    unsigned long long v124;  // rbx\n    unsigned long long v125;  // rbp\n    char *v129;  // rax\n    unsigned long long v130;  // rbp\n    char *v132;  // rax\n    unsigned long long v133;  // rbp\n    char *v134;  // rax\n    char *v136;  // rax\n    unsigned long long v137;  // rbx\n\n    v23 = 0;\n    v25 = v24;\n    v27 = v26;\n    v32 = -18446744069414584321;\n    sub_4057f0();\n    setlocale(0x6, 0x40c53f);\n    bindtextdomain(0x409e1a, 0x40a5a8);\n    textdomain(0x409e1a);\n    sub_409d30();\n    setvbuf(stdout, NULL, 0x1, 0x0);\n    v7 = 0;\n    while (true)\n    {\n        v31 = sub_409590();\n        if ((unsigned int)v31 == -1)\n        {\n            g_60e318 = 3;\n            if (g_60e2f8 <= 0x200)\n            {\n                v33 = (unsigned int)v32 == 0 & v7;\n                if (g_60e2f8 == 0 && v23 == 0)\n                {\n                    g_60e2f8 = 0x200;\n                    g_60e310 = 128;\n                }\n                if (g_60e2f8 != 0 || v23 != 0)\n                {\n                    g_60e310 = g_60e2f8 >> 2;\n                    if (v33 == 0 && (unsigned int)v32 >= 0 && (v7 == 0 || v23 == 0))\n                    {\n                        v38 = \"the --binary and --text options are meaningless when verifying checksums\";\n                    }\n                }\n                if (v33 == 0)\n                {\n                    if (v23 != 0)\n                    {\n                        v38 = \"the --tag option is meaningless when verifying checksums\";\n                    }\n                    if (v23 == 0 && g_60e306 != 0)\n                    {\n                        v38 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n                    }\n                }\n                else\n                {\n                    v38 = \"--tag does not support --text mode\";\n                }\n            }\n            else\n            {\n                v36 = (unsigned int)sub_407410();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409e37, 0x5));\n                v39 = (unsigned int)sub_407410();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a618, 0x5));\n            }\n        }\n        else if ((unsigned int)v31 != 116)\n        {\n            if (v31 > 116)\n            {\n                if ((unsigned int)v31 == 129)\n                {\n                    g_60e308 = 1;\n                    g_60e307 = 0;\n                    g_60e305 = 0;\n                }\n                else if (v31 <= 129)\n                {\n                    if ((unsigned int)v31 == 119)\n                    {\n                        g_60e308 = 0;\n                        g_60e307 = 1;\n                        g_60e305 = 0;\n                    }\n                    if ((unsigned int)v31 == 128)\n                    {\n                        g_60e306 = 1;\n                    }\n                }\n                else if ((unsigned int)v31 == 131)\n                {\n                    g_60e304 = 1;\n                }\n                else if (v31 < 131)\n                {\n                    g_60e308 = 0;\n                    g_60e307 = 0;\n                    g_60e305 = 1;\n                }\n                else if ((unsigned int)v31 == 132)\n                {\n                    v7 = 1;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v31 != 98)\n                {\n                    if (v31 > 98)\n                    {\n                        if ((unsigned int)v31 == 99)\n                        {\n                            v23 = 1;\n                        }\n                        if ((unsigned int)v31 == 108)\n                        {\n                            dcgettext(0x0, 0x409e28, 0x5);\n                            g_60e2f8 = (unsigned int)sub_407d40();\n                            v35 = (unsigned int)sub_407410();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409e37, 0x5));\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x409e4a, 0x5));\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v31 == -131)\n                        {\n                            v0 = 0;\n                            sub_4078a0();\n                            exit(0x0); /* do not return */\n                        }\n                        if ((unsigned int)v31 == -130)\n                        {\n                            sub_403280(); /* do not return */\n                        }\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v31 == 116)\n        {\n            v32 = 0;\n        }\n        if ((unsigned int)v31 == 98 && v31 <= 116 && (unsigned int)v31 != 116 && (unsigned int)v31 != -1 || (unsigned int)v31 == 132 && v31 > 129 && (unsigned int)v31 != 129 && (unsigned int)v31 != 116 && v31 >= 131 && v31 > 116 && (unsigned int)v31 != -1 && (unsigned int)v31 != 131)\n        {\n            v32 = 1;\n        }\n        if (g_60e2f8 == 0 && g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && v23 == 0 && (unsigned int)v31 == -1 || g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && (unsigned int)v31 == -1 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0))\n        {\n            if (g_60e307 != 0)\n            {\n                v38 = \"the --warn option is meaningful only when verifying checksums\";\n            }\n            else if (g_60e305 == 1)\n            {\n                v38 = \"the --quiet option is meaningful only when verifying checksums\";\n            }\n        }\n        if (g_60e2f8 == 0 && g_60e306 == 0 && g_60e2f8 <= 0x200 && v33 == 0 && v23 == 0 && (unsigned int)v31 == -1 && g_60e308 != 0 || g_60e306 == 0 && g_60e2f8 <= 0x200 && v33 == 0 && v23 == 0 && (unsigned int)v31 == -1 && g_60e308 != 0 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0))\n        {\n            v38 = \"the --status option is meaningful only when verifying checksums\";\n        }\n        if (((g_60e2f8 == 0 && g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && v23 == 0 && (unsigned int)v31 == -1 || g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && (unsigned int)v31 == -1 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0)) && g_60e307 == 0 && g_60e305 == 1 && v23 != 0 || (g_60e2f8 == 0 && g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && v23 == 0 && (unsigned int)v31 == -1 || g_60e306 == 0 && g_60e2f8 <= 0x200 && g_60e308 == 0 && v33 == 0 && (unsigned int)v31 == -1 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0)) && g_60e307 == 0 && g_60e305 != 1 || (g_60e2f8 <= 0x200 && v33 == 0 && (unsigned int)v31 == -1 && g_60e306 != 0 && v23 != 0 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0) || g_60e306 == 0 && g_60e2f8 <= 0x200 && v33 == 0 && (unsigned int)v31 == -1 && g_60e308 != 0 && v23 != 0 && (v7 == 0 || v23 == 0) && (v23 == 0 || (unsigned int)v32 < 0) && (g_60e2f8 != 0 || v23 != 0)) && g_60e307 == 0) && g_60e304 != 0)\n        {\n            v38 = \"the --strict option is meaningful only when verifying checksums\";\n        }\n        if (...)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v38, 0x5));\n        }\n        if (...)\n        {\n            if ((unsigned int)v32 == -1)\n            {\n                v32 = 0;\n            }\n            v10 = v27 + v25 * 8;\n            if (g_60e2bc == (unsigned int)v25)\n            {\n                *(v10) = \"-\";\n                v10 = &v10[1];\n            }\n            v2 = v27 + (int)g_60e2bc * 8;\n            if (v10 > v2)\n            {\n                v13 = 1;\n                v16 = (0 - (unsigned int)(char)(v32 < 1) & -10) + 42;\n                v15 = (0 - (unsigned int)(char)(v32 < 1) & -10) + 42;\n                do\n                {\n                    v41 = *(v2);\n                    v3 = *(v2);\n                    if (v23 != 0)\n                    {\n                        v8 = strcmp(v41, \"-\");\n                        if (v8 == 0)\n                        {\n                            g_60e320 = 1;\n                            v44 = stdin;\n                            v3 = dcgettext(0x0, 0x409e8a, 0x5);\n                        }\n                        else\n                        {\n                            v44 = (unsigned long long)(unsigned int)sub_405750();\n                        }\n                        if (v8 == 0 || v44 != 0)\n                        {\n                            v17 = 0;\n                            v112 = 1;\n                            v18 = 0;\n                            v14 = 0;\n                            v12 = 0;\n                            v11 = 0;\n                            v9 = 0;\n                            v6 = 0;\n                            while (true)\n                            {\n                                v46 = __getdelim(&v17, &v18, 0xa, v44);\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    v47 = (char)*((char *)v17);\n                                    if (*((char *)v17) != 35)\n                                    {\n                                        v48 = v46;\n                                        if (v46[-1] == 10)\n                                        {\n                                            v48 = &v48[-1];\n                                            *(v48) = 0;\n                                            v47 = (char)*((char *)v17);\n                                        }\n                                        v49 = 0;\n                                        if (v47 == 32 || v47 == 9)\n                                        {\n                                            do\n                                            {\n                                                v49 += 1;\n                                                v47 = (char)*((char *)(0 + v49));\n                                            }\n                                            while (v47 == 9);\n                                        }\n                                        v1 = 0;\n                                        if (v47 == 92)\n                                        {\n                                            *((unsigned long long *)&v1) = v23;\n                                            v49 += 1;\n                                        }\n                                        v50 = 0 + v49;\n                                        v51 = \"BLAKE2\";\n                                        v52 = 6;\n                                        v60 = 0 + v49;\n                                        while (v52 != 0)\n                                        {\n                                            v52 -= 1;\n                                            v53 = (char)*((char *)v60);\n                                            v54 = *(v51);\n                                            v51 = &v51[v55];\n                                            v60 += v55;\n                                            break;\n                                        }\n                                        v56 = (v53 > v54) - 0 - (v53 < v54);\n                                        if ((char)v56 == 0)\n                                        {\n                                            v61 = v49 + 6;\n                                            v63 = v61;\n                                            if ((char)v62 != 0)\n                                            {\n                                                if (v62 != 9 && v62 != 32)\n                                                {\n                                                    for (v62 = *(v61); v62 != 45; g_60e300 = sub_4052d0())\n                                                    {\n                                                        if (v62 != 40)\n                                                        {\n                                                            v61 = &v61[1];\n                                                            v62 = *(v61);\n                                                            v63 = v61;\n                                                            if (v62 == 9 || (char)v62 == 0 || v62 == 32)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v63) = 0;\n                                                            v5 = v48;\n                                                            v4 = v63;\n                                                            v68 = v4;\n                                                            v67 = v5;\n                                                            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                    }\n                                                    if (v62 == 40)\n                                                    {\n                                                        v6 += 1;\n                                                    }\n                                                    else if ((char)v62 != 0 && v62 != 40)\n                                                    {\n                                                        *(v63) = 0;\n                                                        v5 = v48;\n                                                        v4 = v63;\n                                                    }\n                                                    else if (v62 == 40 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                                    {\n                                                        *(v68) = 40;\n                                                    }\n                                                    else\n                                                    {\n                                                        *(v63) = 0;\n                                                        v4 = v48;\n                                                        v67 = v4;\n                                                    }\n                                                }\n                                                if (v62 == 9 || v62 == 32 || g_60e307 != 0)\n                                                {\n                                                    *(v63) = 0;\n                                                    v5 = v48;\n                                                    v4 = v63;\n                                                    g_60e300 = sub_4052d0();\n                                                    v68 = v4;\n                                                    v67 = v5;\n                                                    if (v62 != 40)\n                                                    {\n                                                        v61 = &v61[1];\n                                                    }\n                                                    if ((v62 == 40 || v62 != 9) && (v62 == 40 || v62 != 32))\n                                                    {\n                                                        *(v68) = 40;\n                                                    }\n                                                }\n                                            }\n                                            if ((char)v62 == 0 || v62 != 9 && g_60e307 != 0 && v62 != 32)\n                                            {\n                                                *(v63) = 0;\n                                                v4 = v48;\n                                                v67 = v4;\n                                                g_60e300 = sub_4052d0();\n                                                v61 = &v61[1];\n                                            }\n                                            if ((char)v62 == 0 || v62 == 9 && v62 != 40 || v62 == 32 && v62 != 40 || v62 != 9 && g_60e307 != 0 && v62 != 32)\n                                            {\n                                                v68 = v61;\n                                                if (v62 == 45)\n                                                {\n                                                    v5 = v67;\n                                                    v4 = v68;\n                                                    v73 = sub_407d70();\n                                                    if (v73 == 0 && v19 - 1 <= 511 && ((char)v19 & 7) == 0)\n                                                    {\n                                                        g_60e2f8 = v19;\n                                                        v67 = v5;\n                                                        for (v68 = v4; (unsigned int)*(v61) - 48 <= 9; v68 = v61)\n                                                        {\n                                                            v61 = &v61[1];\n                                                        }\n                                                        v72 = v19 >> 2;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v5 = v48;\n                                            v4 = v50;\n                                            if (&v48[-1 * v49] >= (char)(*((char *)v4) == 92) + g_60e318)\n                                            {\n                                                g_60e310 = 0;\n                                                v58 = 0;\n                                                while (true)\n                                                {\n                                                    v59 = v58 + 1;\n                                                    if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)(char)*((char *)(v4 + v58)) << 1) + 1)) & 16) == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v58 = v59;\n                                                    v60 = v23;\n                                                }\n                                                if (v60 != 0)\n                                                {\n                                                    g_60e310 = v58;\n                                                    if (v58 - 2 <= 126 && (v58 & 1) == 0)\n                                                    {\n                                                        v69 = v49 + v58;\n                                                        tmp_11 = v58 * 4;\n                                                        g_60e2f8 = tmp_11;\n                                                        v71 = *(v69);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && (char)v56 != 0 && *((char *)v17) != 35 && v60 != 0 && &v48[-1 * v49] >= (char)(*((char *)v4) == 92) + g_60e318 && v58 - 2 <= 126 && (v58 & 1) == 0 && *(v69) != 32 && v71 == 9 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && (char)v56 != 0 && *((char *)v17) != 35 && v60 != 0 && &v48[-1 * v49] >= (char)(*((char *)v4) == 92) + g_60e318 && v58 - 2 <= 126 && (v58 & 1) == 0 && *(v69) == 32)\n                                {\n                                    *(v69) = 0;\n                                    v5 = v5;\n                                    v4 = v4;\n                                    v74 = sub_402f30();\n                                    if (v74 != 0)\n                                    {\n                                        v75 = &v69[1];\n                                        v76 = v4;\n                                        if (v5 - &v69[1] != 1)\n                                        {\n                                            v77 = v69[1];\n                                        }\n                                    }\n                                }\n                                if ((char)v56 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && (char)v62 != 0 && *((char *)v17) != 35 && (v62 == 40 || v62 != 9) && (v62 == 40 || v62 != 32) && (v62 == 9 || v62 == 32 || g_60e307 != 0) || (char)v56 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v62 != 45 && *((char *)v17) != 35 && ((char)v62 == 0 || v62 != 9 || v62 != 40) && ((char)v62 == 0 || v62 != 32 || v62 != 40) && (v62 == 9 || (char)v62 == 0 || v62 == 32 || g_60e307 != 0))\n                                {\n                                    g_60e2f8 = 0x200;\n                                    v72 = 128;\n                                }\n                                if (...)\n                                {\n                                    g_60e230 = 1;\n                                }\n                                if (...)\n                                {\n                                    g_60e230 = 0;\n                                    v75 = &v69[2];\n                                }\n                                if (v62 == 45 && (char)v56 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && *((char *)v17) != 35 && ((char)v62 == 0 || v62 != 9 || v62 != 40) && ((char)v62 == 0 || v62 != 32 || v62 != 40) && (v62 == 9 || (char)v62 == 0 || v62 == 32 || g_60e307 != 0) && v73 == 0 && v19 - 1 <= 511 && ((char)v19 & 7) == 0 || (char)v56 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && (char)v62 != 0 && *((char *)v17) != 35 && (v62 == 40 || v62 != 9) && (v62 == 40 || v62 != 32) && (v62 == 9 || v62 == 32 || g_60e307 != 0) || (char)v56 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v62 != 45 && *((char *)v17) != 35 && ((char)v62 == 0 || v62 != 9 || v62 != 40) && ((char)v62 == 0 || v62 != 32 || v62 != 40) && (v62 == 9 || (char)v62 == 0 || v62 == 32 || g_60e307 != 0))\n                                {\n                                    g_60e310 = v72;\n                                    v78 = *(v68);\n                                    if (*(v68) == 32)\n                                    {\n                                        v78 = v61[1];\n                                        v61 = &v61[1];\n                                    }\n                                    if (v78 == 40)\n                                    {\n                                        v81 = &v61[1];\n                                        v82 = &v67[-1 * v81];\n                                        if (v82 != v81)\n                                        {\n                                            v79 = v81 + 0;\n                                            v83 = v82 - 1;\n                                            if (*((char *)(v79 + v82 - 1)) != 41 && v82 != 1)\n                                            {\n                                                do\n                                                {\n                                                    v83 -= 1;\n                                                }\n                                                while (v83 != 1 && *((char *)(v79 + v83)) != 41);\n                                                if (v83 != 1)\n                                                {\n                                                    v84 = v79 + v83;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v79 = 0 + v75;\n                                    if (v1 != 0)\n                                    {\n                                        v1 = v4;\n                                        v80 = (char)(sub_402f90() != 0);\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v84 = v79;\n                                    v83 = 0;\n                                }\n                                if (...)\n                                {\n                                    v84 = v79 + v83;\n                                }\n                                if (...)\n                                {\n                                    v85 = sub_402f90();\n                                }\n                                if (...)\n                                {\n                                    *((char *)v84) = 0;\n                                    v86 = (char)*((char *)(v79 + v83 + 1));\n                                    v87 = v83 + 1;\n                                    if (v86 == 32 || *((char *)(v79 + v83 + 1)) == 9)\n                                    {\n                                        do\n                                        {\n                                            v87 += 1;\n                                            v86 = (char)*((char *)(v79 + v87));\n                                        }\n                                        while (v86 == 9);\n                                    }\n                                    if (v86 == 61)\n                                    {\n                                        v88 = v79 + v87 + 1;\n                                        do\n                                        {\n                                            v89 = *(v88);\n                                            v90 = v88;\n                                            v88 = &v88[1];\n                                        }\n                                        while (v89 == 9);\n                                        v1 = v90;\n                                        v80 = sub_402f30();\n                                        v76 = v1;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v91 = \"-\";\n                                    v92 = 2;\n                                    v93 = v79;\n                                    while (v92 != 0)\n                                    {\n                                        v92 -= 1;\n                                        v94 = *(v93);\n                                        v95 = *(v91);\n                                        v91 = &v91[v55];\n                                        v93 = &v93[v55];\n                                        break;\n                                    }\n                                    v96 = (v94 > v95) - 0 - (v94 < v95);\n                                }\n                                if (...)\n                                {\n                                    v97 = 0;\n                                    if (g_60e308 == 0)\n                                    {\n                                        v1 = v76;\n                                        v97 = 0;\n                                        v97 = (char)(strchr(v79, 0xa) != 0);\n                                    }\n                                    v1 = v76;\n                                    if ((char)v4 == 0)\n                                    {\n                                        v9 += 1;\n                                        if (g_60e308 == 0)\n                                        {\n                                            if (v97 != 0)\n                                            {\n                                                v100 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v100) = 92;\n                                                }\n                                                else\n                                                {\n                                                    __overflow();\n                                                }\n                                            }\n                                            sub_403020();\n                                            v107 = \"FAILED open or read\";\n                                        }\n                                    }\n                                    else if ((char)v19 == 0 || g_60e306 == 0)\n                                    {\n                                        v1 = v1;\n                                        v101 = g_60e310 >> 1;\n                                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                        {\n                                            v5 = g_60e310 >> 1;\n                                            v102 = 0;\n                                            *((unsigned long long *)&v4) = (unsigned int)sub_4030d0();\n                                            v103 = *((long long *)(unsigned long long)__ctype_tolower_loc());\n                                            v101 = v5;\n                                            while (true)\n                                            {\n                                                v105 = (unsigned long long)v21;\n                                                v106 = (unsigned long long)v21 >> 4;\n                                                if (v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1)))] == (char)*((char *)(4237792 + (unsigned long long)((unsigned int)rsi<8> & 15))) && v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] == (char)*((char *)(4237792 + (unsigned long long)(v21 & 15))))\n                                                {\n                                                    v102 += 1;\n                                                    v102 = v5;\n                                                }\n                                                if (v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1)))] != (char)*((char *)(4237792 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] != (char)*((char *)(4237792 + (unsigned long long)(v21 & 15))))\n                                                {\n                                                    v11 += 1;\n                                                    break;\n                                                    if (g_60e308 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            if (v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1)))] != (char)*((char *)(4237792 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] != (char)*((char *)(4237792 + (unsigned long long)(v21 & 15))))\n                                            {\n                                                *((unsigned long long *)&v12) = v23;\n                                            }\n                                            else if (g_60e308 == 0 && (v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1)))] != (char)*((char *)(4237792 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] != (char)*((char *)(4237792 + (unsigned long long)(v21 & 15)))))\n                                            {\n                                                v109 = stdout[5];\n                                            }\n                                            else if (v5 == v102 && v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] == (char)*((char *)(4237792 + (unsigned long long)(v21 & 15))))\n                                            {\n                                                v14 = g_60e308;\n                                            }\n                                            else if (g_60e308 == 0 && (v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1)))] != (char)*((char *)(4237792 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v103[(unsigned long long)(char)*((char *)(v1 + (v102 << 1) + 1))] != (char)*((char *)(4237792 + (unsigned long long)(v21 & 15)))))\n                                            {\n                                                v1 = v101;\n                                                sub_403020();\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v102 = 0;\n                                        }\n                                        if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0)\n                                        {\n                                            v14 = g_60e308;\n                                            if (g_60e308 == 0)\n                                            {\n                                                v14 = g_60e305;\n                                                if (g_60e305 == 0)\n                                                {\n                                                    if (v97 != 0)\n                                                    {\n                                                        v14 = v4;\n                                                    }\n                                                    else\n                                                    {\n                                                        v1 = v4;\n                                                        sub_403020();\n                                                        v14 = v1;\n                                                    }\n                                                }\n                                            }\n                                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || g_60e305 == 0 && g_60e308 == 0 && v97 != 0)\n                                            {\n                                                v109 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v109) = 92;\n                                                }\n                                                else\n                                                {\n                                                    v1 = v101;\n                                                    __overflow();\n                                                    v101 = v1;\n                                                }\n                                                v1 = v101;\n                                                sub_403020();\n                                                if (v1 != v102)\n                                                {\n                                                    v107 = \"FAILED\";\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if ((v97 == 0 && g_60e305 == 0 && g_60e308 == 0 && (char)v4 != 0 && ((char)v19 == 0 || g_60e306 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0) || (char)v4 != 0 && ((char)v19 == 0 || g_60e306 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0) && (g_60e305 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e308 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v97 != 0) && v1 == v102) && g_60e305 == 0)\n                                    {\n                                        v107 = \"OK\";\n                                    }\n                                    if ((char)v4 == 0 && g_60e308 == 0 || (v97 == 0 && g_60e305 == 0 && g_60e308 == 0 && (char)v4 != 0 && ((char)v19 == 0 || g_60e306 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0) || (char)v4 != 0 && ((char)v19 == 0 || g_60e306 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0) && (g_60e305 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e308 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v97 != 0) && v1 == v102) && g_60e305 == 0 || (char)v4 != 0 && ((char)v19 == 0 || g_60e306 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v44) & 48) != 0) && (g_60e305 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e308 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v97 != 0) && v1 != v102)\n                                    {\n                                        __printf_chk(0x1, \": %s\\n\", dcgettext(0x0, v107, 0x5));\n                                    }\n                                    *((unsigned long long *)&v12) = v23;\n                                }\n                                if (...)\n                                {\n                                    v6 += 1;\n                                    if (g_60e307 != 0)\n                                    {\n                                        v98 = (unsigned int)sub_407290();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a848, 0x5));\n                                    }\n                                }\n                                if (...)\n                                {\n                                    free(v17);\n                                    v115 = (unsigned int)(*((int *)v44) & 32);\n                                    if (((char)*((int *)v44) & 32) == 0)\n                                    {\n                                        if (v8 != 0)\n                                        {\n                                            v116 = sub_4085e0();\n                                        }\n                                        if (v116 == 0 || v8 == 0)\n                                        {\n                                            if (v12 != 0)\n                                            {\n                                                if (g_60e308 == 0)\n                                                {\n                                                    if (v6 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a8e0, 0x40a8b0, v6, 0x5));\n                                                    }\n                                                    if (v9 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a940, 0x40a910, v9, 0x5));\n                                                    }\n                                                    if (v11 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a9a0, 0x40a970, v11, 0x5));\n                                                    }\n                                                    if (v14 == 0 && g_60e306 != 0)\n                                                    {\n                                                        v133 = (unsigned int)sub_407290();\n                                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409ee2, 0x5));\n                                                    }\n                                                }\n                                                if (v11 == 0 && v9 == 0 && v14 != 0)\n                                                {\n                                                    v115 = (unsigned int)g_60e304 ^ 1 | (unsigned int)v115;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v125 = (unsigned int)sub_407290();\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a878, 0x5));\n                                            }\n                                            v119 = v115 & 1;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v117 = (unsigned int)sub_407290();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409ed3, 0x5));\n                                        v119 = 0;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v112 += 1;\n                                    v137 = (unsigned int)sub_407290();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x409e99, 0x5));\n                                }\n                            }\n                            if (...)\n                            {\n                                *((unsigned long long *)&v13) = v13 & v119;\n                            }\n                            else if (...)\n                            {\n                                v124 = (unsigned int)sub_407290();\n                                error(0x0, *(__errno_location()), \"%s\");\n                                v119 = 0;\n                            }\n                        }\n                        v124 = (unsigned int)sub_407290();\n                        error(0x0, *(__errno_location()), \"%s\");\n                        v119 = 0;\n                        *((unsigned long long *)&v13) = v13 & v119;\n                    }\n                    else if (sub_4030d0() == 0)\n                    {\n                        v13 = 0;\n                    }\n                    else\n                    {\n                        v43 = strchr(v3, 0x5c);\n                        if (v43 == 0)\n                        {\n                            v45 = strchr(v3, 0xa);\n                            if (v45 == 0)\n                            {\n                                v113 = 0;\n                            }\n                        }\n                        if (v43 != 0 || v45 != 0)\n                        {\n                            if (v7 == 0)\n                            {\n                                v129 = stdout[5];\n                                if (stdout[5] < stdout[6])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v129) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                            else\n                            {\n                                v114 = stdout[5];\n                                if (stdout[6] > stdout[5])\n                                {\n                                    v113 = v7;\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v114) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                    v113 = v7;\n                                }\n                            }\n                        }\n                        if (v7 == 0)\n                        {\n                            v132 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v132) = 32;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            v134 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v134) = v15;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            sub_403020();\n                        }\n                        else\n                        {\n                            fputs_unlocked((&g_40aba0)[(unsigned long long)g_60e300], stdout);\n                            if (g_60e2f8 > 511)\n                            {\n                                fwrite_unlocked(\" (\", 0x1, 0x2, stdout);\n                                sub_403020();\n                                fwrite_unlocked(\") = \", 0x1, 0x4, stdout);\n                            }\n                            else\n                            {\n                                __printf_chk(0x1, \"-%lu\", (unsigned int)g_60e2f8);\n                                fwrite_unlocked(\" (\", 0x1, 0x2, stdout);\n                                sub_403020();\n                                fwrite_unlocked(\") = \", 0x1, 0x4, stdout);\n                            }\n                        }\n                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e310<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e310<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                        {\n                            v130 = 0;\n                            while (true)\n                            {\n                                v130 += 1;\n                                __printf_chk(0x1, \"%02x\", (unsigned int)v20);\n                                if (g_60e310 >> 1 <= v130)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v136 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v136) = 10;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    v2 = &v2[1];\n                }\n                while (v10 > v2);\n            }\n            else\n            {\n                v13 = 1;\n            }\n            if (g_60e320 != 0)\n            {\n                if ((char)(sub_4085e0() + 1 == 0))\n                {\n                    break;\n                }\n            }\n            return (unsigned int)v13 ^ 1;\n        }\n        if (...)\n        {\n            sub_403280(); /* do not return */\n        }\n    }\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x409e8a, 0x5));\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x40564c",
            "decompiledFuncCode": "int sub_405600()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405890",
            "funcStartAddr": "0x405890",
            "funcEndAddr": "0x40596f",
            "decompiledFuncCode": "extern int512_t g_40ac7e;\nextern int512_t g_40ac82;\n\nint sub_405890()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_409750();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ac7e : 4238473);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ac82 : 4238469);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_409610",
            "funcStartAddr": "0x409610",
            "funcEndAddr": "0x40967f",
            "decompiledFuncCode": "extern unsigned long long g_40c53f;\n\nint sub_409610()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40c53f;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4096f0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_407380",
            "funcStartAddr": "0x407380",
            "funcEndAddr": "0x407397",
            "decompiledFuncCode": "int sub_407380()\n{\n}\n"
        },
        {
            "funcName": "sub_4053f0",
            "funcStartAddr": "0x4053f0",
            "funcEndAddr": "0x40545c",
            "decompiledFuncCode": "extern unsigned int g_40abc5;\nextern unsigned int g_40abe0;\n\nint sub_4053f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x40abc5, 0x5);\n    }\n    dcgettext(0x0, 0x40abe0, 0x5);\n    sub_4073f0();\n    sub_4070e0();\n}\n"
        },
        {
            "funcName": "sub_4087a0",
            "funcStartAddr": "0x4087a0",
            "funcEndAddr": "0x4087db",
            "decompiledFuncCode": "int sub_4087a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4087e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_402f30",
            "funcStartAddr": "0x402f30",
            "funcEndAddr": "0x402f80",
            "decompiledFuncCode": "extern unsigned long long g_60e310;\n\nint sub_402f30()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdx\n\n    v2 = v1;\n    if (g_60e310 != 0)\n    {\n        v4 = 0;\n        while (true)\n        {\n            if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)*(v2) << 1) + 1)) & 16) != 0)\n            {\n                v5 = v4 + 1;\n                v2 = &v2[1];\n                v4 += 1;\n                if (v5 >= g_60e310)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407d70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x40817b",
            "decompiledFuncCode": "int sub_407d70()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned int|unsigned long long v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4242840)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v36 = v30;\n                v37 = 5;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 18: case 50:\n                v38 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n                break;\n            case 23:\n                v34 = v30;\n                v35 = 8;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 24:\n                v40 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407ab0",
            "funcStartAddr": "0x407ab0",
            "funcEndAddr": "0x407b28",
            "decompiledFuncCode": "int sub_407ab0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408840",
            "funcStartAddr": "0x408840",
            "funcEndAddr": "0x408915",
            "decompiledFuncCode": "int sub_408840()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_405750",
            "funcStartAddr": "0x405750",
            "funcEndAddr": "0x4057d9",
            "decompiledFuncCode": "int sub_405750()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_407430();\n            if (v5 >= 0)\n            {\n                v6 = sub_4085e0();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_4085e0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x409750",
            "funcEndAddr": "0x409ca4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40c53f;\nextern char g_60e4b8[2];\n\nint sub_409750()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_60e4b8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40c53f : (unsigned long long)nl_langinfo(0xe));\n    if (g_60e4b8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40c53f;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v62 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v62;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40c53f;\n                                        v10 = (tmp_10 == 0? &g_40c53f : tmp_10);\n                                        free(NULL);\n                                        sub_4085e0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v61 = (unsigned int)*(v61);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)((unsigned int)v61 != -1);\n                                    }\n                                }\n                                while (v61 != 10 && v62 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40c53f : tmp_10);\n                            sub_4085e0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1)\n                    {\n                        v9 = &g_40c53f;\n                    }\n                    else if (((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1) && v0 != 0 || v37 == 0 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40c53f;\n            free(v17);\n        }\n        *((char *[2])&g_60e4b8[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_40c53f : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_404e20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404e82",
            "decompiledFuncCode": "int sub_404e20()\n{\n    char v0;  // [bp-0x48]\n    unsigned long long v1;  // [bp-0x47]\n    unsigned long long v2;  // [bp-0x3f]\n    char v3;  // [bp-0x37]\n    unsigned long long v4;  // [bp-0x36]\n    unsigned int v5;  // [bp-0x2e]\n    unsigned short v6;  // [bp-0x2a]\n    uint128_t v7;  // [bp-0x28]\n    uint128_t v8;  // [bp-0x18]\n    unsigned long v10;  // rsi\n\n    if (v10 - 1 <= 63)\n    {\n        *((unsigned long *)&v0) = v10;\n        v1 = 0x10100;\n        v2 = 0;\n        v3 = 0;\n        v4 = 0;\n        v5 = 0;\n        v6 = 0;\n        v7 = 0;\n        v8 = 0;\n        return sub_404d50();\n    }\n    return -18446744069414584321;\n}\n"
        },
        {
            "funcName": "sub_404f80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404f98",
            "decompiledFuncCode": "int sub_404f80()\n{\n    unsigned long v1;  // rdx\n\n    if (v1 != 0)\n    {\n        sub_404c20();\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4051d0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x4052b1",
            "decompiledFuncCode": "int sub_4051d0()\n{\n    void *v1;  // rdi\n    unsigned long v4;  // r12\n    void *v5;  // r12\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n\n    if (v4 != 0)\n    {\n        v4 = malloc(0x8000);\n        sub_404e20();\n        while (true)\n        {\n            v9 = 0;\n            while (true)\n            {\n                v7 = fread(v5 + v9, 0x1, 0x8000 - v9, v1);\n                v9 += v7;\n                if (v9 != 0x8000)\n                {\n                    v1 = v1;\n                    if (v7 != 0)\n                    {\n                        v8 = feof(v1);\n                    }\n                    if (v7 == 0 && ferror() == 0 || v8 != 0 && v7 != 0)\n                    {\n                        if (v9 != 0)\n                        {\n                            sub_404f80();\n                        }\n                        sub_404fa0();\n                    }\n                    free(v5);\n                }\n                else\n                {\n                    sub_404f80();\n                }\n            }\n            if (v9 == 0x8000)\n            {\n                v9 = 0;\n            }\n            else if (v9 != 0x8000 && (v7 == 0 || v8 != 0))\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408660",
            "funcStartAddr": "0x408660",
            "funcEndAddr": "0x40878c",
            "decompiledFuncCode": "extern unsigned int g_60e478;\n\nint sub_408660()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60e478 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_408660();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60e478 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_60e478 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_408660();\n        }\n        if (((unsigned int)v15 < 0 || g_60e478 < 0) && (*(v12) == 22 || g_60e478 < 0) && (g_60e478 == -1 || g_60e478 >= 0) && (g_60e478 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_60e478 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x407840",
            "decompiledFuncCode": "int sub_407820()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_403020",
            "funcStartAddr": "0x403020",
            "funcEndAddr": "0x4030a7",
            "decompiledFuncCode": "extern unsigned long long stdout[7];\n\nint sub_403020()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char v3;  // sil\n    unsigned long long v4;  // rsi\n    unsigned long long v5[7];  // rcx\n    char *v6;  // rax\n\n    v2 = v1;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) == 0)\n            {\n                break;\n            }\n            v5 = stdout;\n            if (v4 == 10)\n            {\n                v6 = fwrite_unlocked(\"\\\\n\", 0x1, 0x2, stdout);\n            }\n            else if (v4 != 92)\n            {\n                v6 = v5[5];\n                if (v5[5] < v5[6])\n                {\n                    v5[5] = stdout[5] + 1;\n                    *((unsigned long long *)&v6) = v4;\n                }\n                else\n                {\n                    v6 = __overflow();\n                }\n            }\n            else\n            {\n                v6 = fwrite_unlocked(\"\\\\\\\\\", 0x1, 0x2, stdout);\n            }\n            v2 = &v2[1];\n        }\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4052c0",
            "funcStartAddr": "0x4052c0",
            "funcEndAddr": "0x4052ca",
            "decompiledFuncCode": "int sub_4052c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4073c0",
            "funcStartAddr": "0x4073c0",
            "funcEndAddr": "0x4073ca",
            "decompiledFuncCode": "int sub_4073c0()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_b2sum.elf"
}