{
    "funcInfo": [
        {
            "funcName": "function_401b00",
            "funcStartAddr": "401b00",
            "funcEndAddr": "401b05",
            "decompiledFuncCode": "int64_t function_401b00(void) {\n    // 0x401b00\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b05",
            "funcStartAddr": "401b05",
            "funcEndAddr": "401b0a",
            "decompiledFuncCode": "int64_t function_401b05(void) {\n    // 0x401b05\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b0a",
            "funcStartAddr": "401b0a",
            "funcEndAddr": "401b0f",
            "decompiledFuncCode": "int64_t function_401b0a(void) {\n    // 0x401b0a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b0f",
            "funcStartAddr": "401b0f",
            "funcEndAddr": "401b14",
            "decompiledFuncCode": "int64_t function_401b0f(void) {\n    // 0x401b0f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b14",
            "funcStartAddr": "401b14",
            "funcEndAddr": "401b19",
            "decompiledFuncCode": "int64_t function_401b14(void) {\n    // 0x401b14\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b19",
            "funcStartAddr": "401b19",
            "funcEndAddr": "401b1e",
            "decompiledFuncCode": "int64_t function_401b19(void) {\n    // 0x401b19\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b20",
            "funcStartAddr": "401b20",
            "funcEndAddr": "402e50",
            "decompiledFuncCode": "int64_t function_401b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401b20\n    int64_t v1; // bp-344, 0x401b20\n    int64_t v2 = &v1; // 0x401b3e\n    function_4057f0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_409d30(0x405670, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    setvbuf(g30, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    char v3 = 0; // 0x401b99\n    int64_t v4 = 0xffffffff; // 0x401b99\n    int64_t v5 = (int64_t)&g11; // 0x401b99\n    int64_t v6 = 0; // 0x401b99\n    int64_t v7; // 0x401b20\n    int64_t v8; // 0x401b20\n    int64_t v9; // 0x401b20\n    int64_t v10; // 0x401b20\n    int64_t v11; // 0x401b20\n    int64_t v12; // 0x401b20\n    int64_t v13; // 0x401b20\n    while (true) {\n      lab_0x401ba0_2:\n        // 0x401ba0\n        v8 = v6;\n        v7 = v5;\n        v11 = v10;\n        v13 = v4;\n        int64_t v14 = function_409590(a1 & 0xffffffff, a2, \"l:bctw\", &g2, 0, v11); // 0x401bb3\n        int32_t v15 = v14; // 0x401bb8\n        v4 = 0;\n        v9 = v11;\n        v5 = v7;\n        v6 = v8;\n        switch (v15) {\n            case -1: {\n                goto lab_0x401daa;\n            }\n            case 116: {\n                goto lab_0x401ba0;\n            }\n            default: {\n                if (v15 > 116) {\n                    if (v15 == 129) {\n                        // 0x401d90\n                        g42 = 1;\n                        g41 = 0;\n                        g39 = 0;\n                        v4 = v13;\n                        v9 = v11;\n                        v5 = v7;\n                        v6 = v8;\n                    } else {\n                        if (v15 > 129) {\n                            if (v15 == 131) {\n                                // 0x401d70\n                                *(char *)&g38 = 1;\n                                v4 = v13;\n                                v9 = v11;\n                                v5 = v7;\n                                v6 = v8;\n                            } else {\n                                if (v15 < 131) {\n                                    // 0x401bea\n                                    g42 = 0;\n                                    g41 = 0;\n                                    g39 = 1;\n                                    v4 = v13;\n                                    v9 = v11;\n                                    v5 = v7;\n                                    v6 = v8;\n                                } else {\n                                    // 0x401c20\n                                    v4 = 1;\n                                    v9 = v11;\n                                    v5 = v7;\n                                    v6 = v8;\n                                    if (v15 != 132) {\n                                      lab_0x401e6f:\n                                        // 0x401e6f\n                                        function_403280(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                        } else {\n                            if (v15 != 119) {\n                                if (v15 != 128) {\n                                    // 0x401e6f\n                                    function_403280(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401d63\n                                *(char *)&g40 = 1;\n                                v4 = v13;\n                                v9 = v11;\n                                v5 = v7;\n                                v6 = v8;\n                            } else {\n                                // 0x401d25\n                                g42 = 0;\n                                g41 = 1;\n                                g39 = 0;\n                                v4 = v13;\n                                v9 = v11;\n                                v5 = v7;\n                                v6 = v8;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401c08\n                    v4 = 1;\n                    v9 = v11;\n                    v5 = v7;\n                    v6 = v8;\n                    if (v15 != 98) {\n                        // 0x401c0d\n                        v12 = v14;\n                        if (v15 <= 98) {\n                            goto lab_0x401ce0;\n                        }\n                        // 0x401c13\n                        v4 = v13;\n                        v9 = v11;\n                        v5 = v7;\n                        v6 = 1;\n                        if (v15 != 99) {\n                            if (v15 != 108) {\n                                // 0x401e6f\n                                function_403280(1);\n                                // UNREACHABLE\n                            }\n                            char * v16 = dcgettext(NULL, \"invalid length\", 5); // 0x401c55\n                            uint64_t v17 = function_407d40((int64_t)g59, (int32_t)\"invalid length\" ^ (int32_t)\"invalid length\", -1, (int64_t *)&g11, (int64_t)v16, 0); // 0x401c75\n                            int64_t v18 = g59; // 0x401c7a\n                            g36 = v17;\n                            v4 = v13;\n                            v9 = 0;\n                            v5 = v18;\n                            v6 = v8;\n                            if (v17 % 8 != 0) {\n                                // 0x401c90\n                                function_407410(v18);\n                                error(0, (int32_t)\"invalid length: %s\" ^ (int32_t)\"invalid length: %s\", dcgettext(NULL, \"invalid length: %s\", 5));\n                                error(1, (int32_t)\"length is not a multiple of 8\" ^ (int32_t)\"length is not a multiple of 8\", dcgettext(NULL, \"length is not a multiple of 8\", 5));\n                                v12 = &g65;\n                                goto lab_0x401ce0;\n                            }\n                        }\n                    }\n                }\n                goto lab_0x401ba0;\n            }\n        }\n    }\n  lab_0x401daa:;\n    int32_t v19 = g36; // 0x401daa\n    g44 = 3;\n    if (v19 >= 513) {\n        // 0x402dd6\n        function_407410(v7);\n        error(0, (int32_t)\"invalid length: %s\" ^ (int32_t)\"invalid length: %s\", dcgettext(NULL, \"invalid length: %s\", 5));\n        int64_t v20 = *(int64_t *)(8 * (int64_t)g37 + (int64_t)&g4); // 0x402e09\n        function_407410(v20);\n        error(1, (int32_t)\"maximum digest length for %s is %lu bits\" ^ (int32_t)\"maximum digest length for %s is %lu bits\", dcgettext(NULL, \"maximum digest length for %s is %lu bits\", 5));\n        return &g65;\n    }\n    char v21 = v3 & (char)(v13 == 0); // 0x401dcd\n    int64_t v22; // 0x401b20\n    int64_t v23; // 0x401b20\n    if (v8 == 0 == v19 == 0) {\n        // 0x401e79\n        g36 = 512;\n        g43 = 128;\n        if (v21 != 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--tag does not support --text mode\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n        // 0x401e97\n        if (*(char *)&g40 != 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n        // 0x401ea4\n        v23 = a2;\n        if (g42 != 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --status option is meaningful only when verifying checksums\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n        goto lab_0x401eb1;\n    } else {\n        // 0x401ddf\n        g43 = (int64_t)v19 / 4;\n        if (v21 != 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--tag does not support --text mode\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n        int64_t v24 = a2; // 0x401df5\n        if (v8 != 0) {\n            // 0x401df7\n            v24 = (int64_t)\"the --tag option is meaningless when verifying checksums\";\n            if (v3 != 0) {\n                // 0x401e5a\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --tag option is meaningless when verifying checksums\", 5));\n                // 0x401e6f\n                function_403280(1);\n                // UNREACHABLE\n            }\n        }\n        // 0x401e08\n        v22 = v24;\n        if ((int32_t)v13 >= 0) {\n            // 0x401e0c\n            v22 = (int64_t)\"the --binary and --text options are meaningless when verifying checksums\";\n            if (v8 != 0) {\n                // 0x401e5a\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --binary and --text options are meaningless when verifying checksums\", 5));\n                // 0x401e6f\n                function_403280(1);\n                // UNREACHABLE\n            }\n        }\n        // 0x401e1b\n        if (*(char *)&g40 == 0) {\n            // 0x402a8b\n            v23 = v22;\n            if (g42 == 0) {\n                goto lab_0x401eb1;\n            } else {\n                // 0x402a98\n                if (v8 == 0) {\n                    // 0x401e5a\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --status option is meaningful only when verifying checksums\", 5));\n                    // 0x401e6f\n                    function_403280(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x401e31;\n            }\n        } else {\n            // 0x401e28\n            if (v8 == 0) {\n                // 0x401e5a\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\", 5));\n                // 0x401e6f\n                function_403280(1);\n                // UNREACHABLE\n            }\n            goto lab_0x401e31;\n        }\n    }\n  lab_0x401ce0:;\n    int32_t v25 = v12; // 0x401ce0\n    if (v25 == -131) {\n        // 0x401ce7\n        function_4078a0((int64_t)g30, \"b2sum\", \"GNU coreutils\", (int64_t)g19, \"Padraig Brady\", \"Samuel Neves\");\n        exit(0);\n        // UNREACHABLE\n    }\n    if (v25 == -130) {\n        // 0x401d4a\n        function_403280(0);\n        // UNREACHABLE\n    }\n    goto lab_0x401e6f;\n  lab_0x4028ca:;\n    // 0x4028ca\n    int64_t v26; // 0x401b20\n    int64_t v27 = v26;\n    int64_t v28; // 0x401b20\n    int64_t v29 = v28;\n    char v30 = g42; // 0x4028d7\n    int32_t v31; // 0x401b20\n    int32_t v32 = v31; // 0x4028d7\n    int32_t v33; // 0x401b20\n    int32_t v34 = v33; // 0x4028d7\n    char v35; // 0x4024bb\n    char v36 = v35; // 0x4028d7\n    int64_t v37 = v29; // 0x4028d7\n    int64_t v38 = v27; // 0x4028d7\n    int64_t v39; // 0x4024c0\n    int64_t v40 = v39; // 0x4028d7\n    int64_t v41; // 0x401b20\n    int64_t v42; // 0x401b20\n    int64_t v43; // 0x401b20\n    int64_t v44; // 0x401b20\n    int64_t v45; // 0x401b20\n    int64_t str; // 0x401b20\n    int64_t v46; // 0x401b20\n    char v47; // 0x401b20\n    char v48; // 0x401b20\n    int32_t v49; // 0x401b20\n    int32_t v50; // 0x401b20\n    char v51; // 0x401b20\n    if (g42 != 0) {\n        goto lab_0x40239b;\n    } else {\n        // 0x4028dd\n        v30 = g39;\n        v32 = v31;\n        v34 = v33;\n        v36 = v35;\n        v37 = v29;\n        v38 = v27;\n        v40 = v39;\n        if (g39 != 0) {\n            goto lab_0x40239b;\n        } else {\n            char v52 = v46;\n            v48 = v52;\n            v50 = v31;\n            v43 = v27;\n            v42 = v39;\n            if (v45 == 0) {\n                // 0x402a1d\n                function_403020(str, 0);\n                v47 = v52;\n                v49 = v31;\n                v51 = v52;\n                v44 = v27;\n                v41 = v39;\n                goto lab_0x402a34;\n            } else {\n                goto lab_0x40254d;\n            }\n        }\n    }\n  lab_0x402983:;\n    // 0x402983\n    int64_t v53; // 0x401b20\n    int64_t v54 = v53;\n    int64_t v55; // 0x401b20\n    int64_t v56 = v55;\n    int64_t v57; // 0x401b20\n    int64_t v58 = v57; // 0x402988\n    int64_t v59; // 0x401b20\n    int64_t v60; // 0x401b20\n    int64_t v61; // 0x401b20\n    int64_t v62; // 0x401b20\n    int64_t v63; // 0x401b20\n    int64_t v64; // 0x401b20\n    int64_t v65; // 0x401b20\n    int64_t v66; // 0x401b20\n    int64_t v67; // 0x401b20\n    int64_t v68; // 0x401b20\n    int64_t v69; // 0x401b20\n    char v70; // 0x401b20\n    char v71; // 0x401b20\n    char v72; // 0x401b20\n    char v73; // 0x401b20\n    char v74; // 0x401b20\n    int32_t v75; // 0x401b20\n    int32_t v76; // 0x401b20\n    int32_t v77; // 0x401b20\n    int32_t v78; // 0x401b20\n    int32_t v79; // 0x401b20\n    int32_t v80; // 0x401b20\n    char v81; // 0x401b20\n    int64_t v82; // 0x40270d\n    if (v70 != 0) {\n        int64_t v83 = function_402f90(v82, v54, (char)v68); // 0x402cf2\n        v72 = v71;\n        v74 = v73;\n        v76 = v75;\n        v78 = v77;\n        v80 = v79;\n        v81 = v70;\n        v69 = v54;\n        v65 = v64;\n        v67 = v66;\n        v59 = v56;\n        v61 = v60;\n        v63 = v62;\n        v58 = v54;\n        if (v83 != 0) {\n            goto lab_0x40298e;\n        } else {\n            goto lab_0x402133;\n        }\n    } else {\n        goto lab_0x40298e;\n    }\n  lab_0x4020c6:;\n    // 0x4020c6\n    char * v84; // 0x401b20\n    *v84 = 0;\n    int64_t v85; // 0x402046\n    int64_t v86 = function_4052d0(v85, &g3, 0, 0); // 0x4020db\n    v72 = v71;\n    v74 = v73;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v81 = v70;\n    v69 = (int64_t)&g3;\n    v65 = v85;\n    v67 = v66;\n    int64_t v87; // 0x401b20\n    v59 = v87;\n    v61 = v60;\n    v63 = v62;\n    int64_t v88; // 0x401b20\n    int64_t v89; // 0x401b20\n    int64_t v90; // 0x401b20\n    int64_t v91; // 0x401b20\n    if (v86 < 0) {\n        goto lab_0x402133;\n    } else {\n        // 0x4020ea\n        g37 = v86;\n        v89 = v88;\n        v91 = v90;\n        goto lab_0x4020f4;\n    }\n  lab_0x402599:;\n    // 0x402599\n    char * v92; // 0x401b20\n    char * v93 = v92;\n    *v93 = 0;\n    int64_t v94 = function_4052d0(v85, &g3, 0, 0); // 0x4025b3\n    v72 = v71;\n    v74 = v73;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v81 = v70;\n    v69 = (int64_t)&g3;\n    v65 = v85;\n    v67 = v66;\n    v59 = v87;\n    v61 = v60;\n    v63 = v62;\n    char * v95; // 0x401b20\n    int64_t v96; // 0x401b20\n    int64_t v97; // 0x401b20\n    int64_t v98; // 0x401b20\n    int64_t v99; // 0x401b20\n    int64_t v100; // 0x401b20\n    if (v94 < 0) {\n        goto lab_0x402133;\n    } else {\n        // 0x4025c1\n        g37 = v94;\n        v89 = v98;\n        v91 = v99;\n        v95 = v93;\n        v100 = v99;\n        v97 = v96;\n        if (v98 == 40) {\n            goto lab_0x402618;\n        } else {\n            goto lab_0x4020f4;\n        }\n    }\n  lab_0x402146:;\n    // 0x402146\n    char v101; // 0x401b20\n    char v102 = v101; // 0x40214b\n    char v103; // 0x401b20\n    char v104 = v103; // 0x40214b\n    int32_t v105; // 0x401b20\n    int32_t v106 = v105; // 0x40214b\n    int32_t v107; // 0x401b20\n    int32_t v108 = v107; // 0x40214b\n    int32_t v109; // 0x401b20\n    int32_t v110 = v109; // 0x40214b\n    char v111; // 0x401b20\n    char v112 = v111; // 0x40214b\n    int64_t v113; // 0x401b20\n    int64_t v114 = v113; // 0x40214b\n    int64_t v115; // 0x401b20\n    int64_t v116 = v115; // 0x40214b\n    int64_t v117; // 0x401b20\n    int64_t v118 = v117; // 0x40214b\n    int64_t v119; // 0x401b20\n    int64_t v120 = v119; // 0x40214b\n    int64_t v121; // 0x401b20\n    int64_t v122 = v121; // 0x40214b\n    char v123 = v101; // 0x40214b\n    char v124 = v103; // 0x40214b\n    int32_t v125 = v105; // 0x40214b\n    int32_t v126 = v107; // 0x40214b\n    int32_t v127 = v109; // 0x40214b\n    char v128 = v111; // 0x40214b\n    int64_t v129; // 0x401b20\n    int64_t v130 = v129; // 0x40214b\n    int64_t v131 = v113; // 0x40214b\n    int64_t v132 = v115; // 0x40214b\n    int64_t v133 = v117; // 0x40214b\n    char * v134; // 0x401b20\n    if ((*v134 & 48) != 0) {\n        // break -> 0x4023ab\n        goto lab_0x4023ab_3;\n    }\n    goto lab_0x402151;\n  lab_0x402151:;\n    int64_t v135 = v118;\n    int64_t v136 = v116;\n    int64_t v137 = v114;\n    char v138 = v112;\n    int32_t v139 = v110;\n    int32_t v140 = v108;\n    int32_t v141 = v106;\n    char v142 = v104;\n    char v143 = v102;\n    int64_t v144 = v120 + 1; // 0x402151\n    int32_t v145; // 0x401b20\n    int64_t v146; // 0x401b20\n    int64_t v147; // 0x401b20\n    int64_t v148; // 0x401b20\n    int64_t v149; // 0x401b20\n    int64_t v150; // 0x401b20\n    int64_t v151; // 0x401b20\n    int64_t v152; // 0x401b20\n    int64_t v153; // 0x401b20\n    int64_t v154; // 0x401b20\n    int64_t v155; // 0x401b20\n    int64_t v156; // 0x401b20\n    int64_t v157; // bp-232, 0x401b20\n    int64_t v158; // bp-240, 0x401b20\n    char v159; // 0x401b20\n    char v160; // 0x401b20\n    char v161; // 0x401b20\n    char v162; // 0x401b20\n    int32_t v163; // 0x401b20\n    int32_t v164; // 0x401b20\n    int32_t v165; // 0x401b20\n    int32_t v166; // 0x401b20\n    int32_t v167; // 0x401b20\n    int32_t v168; // 0x401b20\n    char v169; // 0x401b20\n    char v170; // 0x401b20\n    int64_t v171; // 0x401fc8\n    int64_t v172; // 0x401b20\n    if (v144 != 0) {\n        // 0x401fc0\n        struct _IO_FILE * v173; // 0x401fd2\n        int32_t v174 = __getdelim((char **)&v158, (int32_t *)&v157, 10, v173); // 0x401fd2\n        v145 = v174;\n        v148 = v144;\n        v146 = v135;\n        v153 = v136;\n        v151 = v137;\n        v169 = v138;\n        v167 = v139;\n        v165 = v140;\n        v163 = v141;\n        v161 = v142;\n        v159 = v143;\n        v123 = v143;\n        v124 = v142;\n        v125 = v141;\n        v126 = v140;\n        v127 = v139;\n        v128 = v138;\n        v130 = v171;\n        v131 = v137;\n        v132 = v136;\n        v133 = v135;\n        if (v174 < 1) {\n            // break -> 0x4023ab\n            goto lab_0x4023ab_3;\n        }\n        goto lab_0x401fe0;\n    } else {\n        int64_t v175 = function_407290(0, 3, v172); // 0x402167\n        error(1, (int32_t)\"%s: too many checksum lines\" ^ (int32_t)\"%s: too many checksum lines\", dcgettext(NULL, \"%s: too many checksum lines\", 5));\n        v160 = v143;\n        v162 = v142;\n        v164 = v141;\n        v166 = v140;\n        v168 = v139;\n        v170 = v138;\n        v155 = v175;\n        v156 = (int32_t)\"%s: too many checksum lines\" ^ (int32_t)\"%s: too many checksum lines\";\n        v152 = v137;\n        v154 = v136;\n        v147 = v135;\n        v149 = v144;\n        v150 = v122;\n        goto lab_0x402198;\n    }\n  lab_0x402198:;\n    int64_t v176 = v150;\n    int64_t v177 = v149;\n    int64_t v178 = v147;\n    int64_t v179 = v154;\n    int64_t v180 = v152;\n    int64_t v181 = v155;\n    char v182 = v170;\n    int32_t v183 = v168;\n    int32_t v184 = v166;\n    int32_t v185 = v164;\n    char v186 = v162;\n    char v187 = v160;\n    char v188 = *(char *)v180; // 0x4021a3\n    v72 = v187;\n    v74 = v186;\n    v76 = v185;\n    v78 = v184;\n    v80 = v183;\n    v81 = v182;\n    v69 = v156;\n    v65 = v180;\n    v67 = v179;\n    v59 = v178;\n    v61 = v177;\n    v63 = v176;\n    char v189; // 0x401b20\n    int64_t v190; // 0x401b20\n    int64_t v191; // 0x40226d\n    int32_t v192; // 0x402271\n    int64_t v193; // 0x401b20\n    char v194; // 0x402288\n    if (v178 - v181 < g44 + (int64_t)(v188 == 92)) {\n        goto lab_0x402133;\n    } else {\n        // 0x4021c2\n        g43 = 0;\n        int16_t * v195 = *__ctype_b_loc(); // 0x4021de\n        int64_t v196 = 0; // 0x4021e3\n        int64_t v197 = 0; // 0x4021e3\n        v190 = v197;\n        int64_t v198 = v196;\n        unsigned char v199 = *(char *)(v198 + v180); // 0x4021ee\n        char v200 = *(char *)((int64_t)v195 + 1 + 2 * (int64_t)v199); // 0x4021f7\n        v196 = v198 + 1;\n        v197 = v8;\n        while ((v200 & 16) != 0) {\n            // 0x4021ee\n            v190 = v197;\n            v198 = v196;\n            v199 = *(char *)(v198 + v180);\n            v200 = *(char *)((int64_t)v195 + 1 + 2 * (int64_t)v199);\n            v196 = v198 + 1;\n            v197 = v8;\n        }\n        // 0x4021fe\n        v72 = v187;\n        v74 = v186;\n        v76 = v185;\n        v78 = v184;\n        v80 = v183;\n        v81 = v182;\n        v69 = v190;\n        v65 = v180;\n        v67 = v179;\n        v59 = v178;\n        v61 = v177;\n        v63 = v176;\n        if ((char)v190 == 0) {\n            goto lab_0x402133;\n        } else {\n            // 0x402207\n            g43 = v198;\n            v72 = v187;\n            v74 = v186;\n            v76 = v185;\n            v78 = v184;\n            v80 = v183;\n            v81 = v182;\n            v69 = v190;\n            v65 = v180;\n            v67 = v179;\n            v59 = v178;\n            v61 = v177;\n            v63 = v176;\n            if (v198 < 129) {\n                // 0x40221c\n                v72 = v187;\n                v74 = v186;\n                v76 = v185;\n                v78 = v184;\n                v80 = v183;\n                v81 = v182;\n                v69 = v190;\n                v65 = v180;\n                v67 = v179;\n                v59 = v178;\n                v61 = v177;\n                v63 = v176;\n                if (v198 % 2 != 0) {\n                    goto lab_0x402133;\n                } else {\n                    int64_t v201 = v198 + v181; // 0x402224\n                    int64_t v202 = v201 + v176;\n                    g36 = 4 * (int32_t)v198;\n                    char * v203 = (char *)v202; // 0x40223a\n                    char v204 = *v203; // 0x40223a\n                    v72 = v187;\n                    v74 = v186;\n                    v76 = v185;\n                    v78 = v184;\n                    v80 = v183;\n                    v81 = v182;\n                    v69 = v190;\n                    v65 = v180;\n                    v67 = v179;\n                    v59 = v178;\n                    v61 = v177;\n                    v63 = v176;\n                    if (v204 != 32 == (v204 != 9)) {\n                        goto lab_0x402133;\n                    } else {\n                        // 0x40224b\n                        *v203 = 0;\n                        int64_t v205 = function_402f30(v180); // 0x40225b\n                        v72 = v187;\n                        v74 = v186;\n                        v76 = v185;\n                        v78 = v184;\n                        v80 = v183;\n                        v81 = v182;\n                        v69 = v190;\n                        v65 = v180;\n                        v67 = v179;\n                        v59 = v178;\n                        v61 = v177;\n                        v63 = v176;\n                        if ((char)v205 == 0) {\n                            goto lab_0x402133;\n                        } else {\n                            // 0x402268\n                            v191 = v201 + 1;\n                            v192 = g18;\n                            v193 = v201 + 2;\n                            v189 = 0;\n                            if (v178 == v193) {\n                                goto lab_0x4022a0;\n                            } else {\n                                // 0x402288\n                                v194 = *(char *)(v202 + 1);\n                                v189 = v194;\n                                switch (v194) {\n                                    case 32: {\n                                        goto lab_0x402a01;\n                                    }\n                                    case 42: {\n                                        goto lab_0x402a01;\n                                    }\n                                    default: {\n                                        goto lab_0x4022a0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x402133;\n            }\n        }\n    }\n  lab_0x402133:;\n    int64_t v206 = v63;\n    int64_t v207 = v61;\n    int64_t v208 = v59;\n    char v209 = v81;\n    int32_t v210 = v78;\n    int32_t v211 = v76;\n    char v212 = v74;\n    char v213 = v72;\n    int32_t v214 = v80 + 1; // 0x402133\n    v101 = v213;\n    v103 = v212;\n    v105 = v211;\n    v107 = v210;\n    v109 = v214;\n    v111 = v209;\n    v129 = v69;\n    v113 = v65;\n    v115 = v67;\n    v117 = v208;\n    v119 = v207;\n    v121 = v206;\n    if (g41 != 0) {\n        // 0x402458\n        function_407290(0, 3, v172);\n        error(0, (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\", dcgettext(NULL, \"%s: %lu: improperly formatted %s checksum line\", 5));\n        v101 = v213;\n        v103 = v212;\n        v105 = v211;\n        v107 = v210;\n        v109 = v214;\n        v111 = v209;\n        v129 = (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\";\n        v113 = v207;\n        v115 = (int64_t)\"BLAKE2\";\n        v117 = v208;\n        v119 = v207;\n        v121 = v206;\n    }\n    goto lab_0x402146;\n  lab_0x4020f4:;\n    int64_t v215 = v91 + 1;\n    int64_t v216 = v215 + v62;\n    int64_t v217 = v215; // 0x4020fc\n    int64_t v218 = v216; // 0x4020fc\n    int64_t v219; // 0x401b20\n    int64_t v220; // 0x401b20\n    int64_t v221; // 0x401b20\n    int64_t v222; // 0x401b20\n    int64_t v223; // 0x401b20\n    char v224; // bp-224, 0x401b20\n    int64_t v225; // 0x401b20\n    if ((char)v89 == 45) {\n        int64_t v226 = function_407d70(v216, 0, 0, (int64_t *)&v224, 0, v66); // 0x4026a1\n        v72 = v71;\n        v74 = v73;\n        v76 = v75;\n        v78 = v77;\n        v80 = v79;\n        v81 = v70;\n        v69 = 0;\n        v65 = 0;\n        v67 = v66;\n        v59 = v87;\n        v61 = v60;\n        v63 = v62;\n        if ((int32_t)v226 != 0) {\n            goto lab_0x402133;\n        } else {\n            uint64_t v227 = (int64_t)v224; // 0x4026ae\n            v72 = v71;\n            v74 = v73;\n            v76 = v75;\n            v78 = v77;\n            v80 = v79;\n            v81 = v70;\n            v69 = 0;\n            v65 = 0;\n            v67 = v66;\n            v59 = v87;\n            v61 = v60;\n            v63 = v62;\n            if (v227 < 512) {\n                // 0x4026c4\n                v72 = v71;\n                v74 = v73;\n                v76 = v75;\n                v78 = v77;\n                v80 = v79;\n                v81 = v70;\n                v69 = 0;\n                v65 = 0;\n                v67 = v66;\n                v59 = v87;\n                v61 = v60;\n                v63 = v62;\n                if (v227 % 8 != 0) {\n                    goto lab_0x402133;\n                } else {\n                    // 0x4026cc\n                    g36 = v224;\n                    int64_t v228 = (int64_t)*(char *)v216 + 0xffffffd0; // 0x4026ec\n                    int64_t v229 = v215; // 0x4026f2\n                    int64_t v230 = v215; // 0x4026f2\n                    int64_t v231 = v216; // 0x4026f2\n                    int64_t v232 = v228; // 0x4026f2\n                    if ((int32_t)v228 < 10) {\n                        int64_t v233 = v229 + 1; // 0x4026df\n                        int64_t v234 = v233 + v62;\n                        int64_t v235 = (int64_t)*(char *)v234 + 0xffffffd0; // 0x4026ec\n                        v229 = v233;\n                        v230 = v233;\n                        v231 = v234;\n                        v232 = v235;\n                        while ((int32_t)v235 < 10) {\n                            // 0x4026df\n                            v233 = v229 + 1;\n                            v234 = v233 + v62;\n                            v235 = (int64_t)*(char *)v234 + 0xffffffd0;\n                            v229 = v233;\n                            v230 = v233;\n                            v231 = v234;\n                            v232 = v235;\n                        }\n                    }\n                    // 0x4026f4\n                    v222 = v232 & 0xffffffff;\n                    v221 = v230;\n                    v223 = 0;\n                    v220 = 0;\n                    v219 = v231;\n                    v225 = v227 / 4;\n                    goto lab_0x402112;\n                }\n            } else {\n                goto lab_0x402133;\n            }\n        }\n    } else {\n        goto lab_0x402102;\n    }\n  lab_0x402618:\n    // 0x402618\n    *v95 = 40;\n    v217 = v100;\n    v218 = v97;\n    goto lab_0x402102;\n  lab_0x402102:\n    // 0x402102\n    g36 = 512;\n    v222 = 0;\n    v221 = v217;\n    v223 = (int64_t)&g3;\n    v220 = v85;\n    v219 = v218;\n    v225 = 128;\n    goto lab_0x402112;\n  lab_0x402112:\n    // 0x402112\n    v64 = v220;\n    v57 = v223;\n    int64_t v236 = v221;\n    v68 = v222;\n    g43 = v225;\n    char v237 = *(char *)v219; // 0x402119\n    char v238 = v237; // 0x40211f\n    int64_t v239 = v236; // 0x40211f\n    if (v237 == 32) {\n        int64_t v240 = v236 + 1;\n        v238 = *(char *)(v240 + v62);\n        v239 = v240;\n    }\n    // 0x40212b\n    v72 = v71;\n    v74 = v73;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v81 = v70;\n    v69 = v57;\n    v65 = v64;\n    v67 = v66;\n    v59 = v87;\n    v61 = v60;\n    v63 = v62;\n    int64_t v241; // 0x402701\n    if (v238 == 40) {\n        int64_t v242 = v239;\n        int64_t v243 = v242 + 1; // 0x4026fd\n        v241 = v87 - v243;\n        v72 = v71;\n        v74 = v73;\n        v76 = v75;\n        v78 = v77;\n        v80 = v79;\n        v81 = v70;\n        v69 = v57;\n        v65 = v64;\n        v67 = v66;\n        v59 = 0;\n        v61 = v60;\n        v63 = v62;\n        if (v241 == 0) {\n            goto lab_0x402133;\n        } else {\n            // 0x40270a\n            v82 = v243 + v62;\n            int64_t v244 = v241 - 1; // 0x402710\n            if (v244 == 0) {\n                goto lab_0x402739;\n            } else {\n                int64_t v245 = v244; // 0x40271c\n                if (*(char *)(v242 + v62 + v241) != 41) {\n                    int64_t v246 = v245 - 1; // 0x402733\n                    while (v246 != 0) {\n                        int64_t v247 = v246 + v82;\n                        v245 = v246;\n                        v55 = v247;\n                        v53 = v246;\n                        if (*(char *)v247 == 41) {\n                            goto lab_0x402983;\n                        }\n                        v246 = v245 - 1;\n                    }\n                    goto lab_0x402739;\n                } else {\n                    // 0x402716\n                    v55 = v244 + v82;\n                    v53 = v244;\n                    goto lab_0x402983;\n                }\n            }\n        }\n    } else {\n        goto lab_0x402133;\n    }\n  lab_0x4022a0:\n    // 0x4022a0\n    v72 = v187;\n    v74 = v186;\n    v76 = v185;\n    v78 = v184;\n    v80 = v183;\n    v81 = v182;\n    v69 = v190;\n    v65 = v180;\n    v67 = v179;\n    v59 = v178;\n    v61 = v177;\n    v63 = v176;\n    int64_t v248; // 0x401b20\n    char v249; // 0x401b20\n    if (v192 == 0) {\n        goto lab_0x402133;\n    } else {\n        // 0x4022a8\n        g18 = 1;\n        v248 = v191;\n        v249 = v189;\n        goto lab_0x4022b2;\n    }\n  lab_0x402a01:\n    // 0x402a01\n    v248 = v191;\n    v249 = v194;\n    if (v192 != 1) {\n        // 0x402a0a\n        g18 = 0;\n        v248 = v193;\n        v249 = v194;\n    }\n    goto lab_0x4022b2;\n  lab_0x402739:\n    // 0x402739\n    v72 = v71;\n    v74 = v73;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v81 = v70;\n    v69 = v57;\n    v65 = v64;\n    v67 = v66;\n    v59 = v241;\n    v61 = v60;\n    v63 = v62;\n    v55 = v82;\n    v53 = 0;\n    if (*(char *)v82 != 41) {\n        goto lab_0x402133;\n    } else {\n        goto lab_0x402983;\n    }\n  lab_0x4022b2:;\n    int64_t v250 = v248;\n    int64_t v251 = v250 + v176; // 0x4022b7\n    char v252 = v187; // 0x4022bb\n    char v253 = v186; // 0x4022bb\n    int32_t v254 = v185; // 0x4022bb\n    int32_t v255 = v184; // 0x4022bb\n    int32_t v256 = v183; // 0x4022bb\n    char v257 = v182; // 0x4022bb\n    int64_t v258 = v251; // 0x4022bb\n    int64_t v259 = v180; // 0x4022bb\n    int64_t v260 = v179; // 0x4022bb\n    int64_t v261 = v178; // 0x4022bb\n    int64_t v262 = v177; // 0x4022bb\n    int64_t v263 = v176; // 0x4022bb\n    int64_t v264; // 0x401b20\n    int64_t v265; // 0x401b20\n    int64_t v266; // 0x401b20\n    int64_t v267; // 0x401b20\n    int64_t v268; // 0x401b20\n    int64_t v269; // 0x401b20\n    int64_t v270; // 0x401b20\n    char v271; // 0x401b20\n    char v272; // 0x401b20\n    int32_t v273; // 0x401b20\n    int32_t v274; // 0x401b20\n    int32_t v275; // 0x401b20\n    int64_t v276; // 0x401b20\n    if (v182 != 0) {\n        int64_t v277 = v178 - v250; // 0x402cd4\n        v271 = v187;\n        v272 = v186;\n        v273 = v185;\n        v274 = v184;\n        v275 = v183;\n        v276 = v180;\n        v268 = function_402f90(v251, v277, v249) != 0;\n        v269 = v251;\n        v270 = v277;\n        v267 = v179;\n        v264 = v178;\n        v265 = v177;\n        v266 = v176;\n        goto lab_0x4029f4;\n    } else {\n        goto lab_0x4022c1;\n    }\n  lab_0x4022c1:;\n    int64_t v278 = v263;\n    int64_t v279 = v262;\n    int64_t v280 = v261;\n    int64_t v281 = v260;\n    int64_t v282 = v259;\n    str = v258;\n    char v283 = v257;\n    int32_t v284 = v256;\n    v33 = v255;\n    v31 = v254;\n    char v285 = v253;\n    char v286 = v252;\n    int64_t v287 = (int64_t)\"-\"; // 0x4022c7\n    int64_t v288 = str; // 0x4022c7\n    int64_t v289 = 2; // 0x4022c7\n    int32_t strcmp_rc; // 0x401f4b\n    int64_t v290; // 0x401b20\n    if (strcmp_rc != 0) {\n        goto lab_0x4022e5;\n    } else {\n        int64_t v291 = v287;\n        unsigned char v292 = *(char *)v288; // 0x4022d6\n        char v293 = *(char *)v291; // 0x4022d6\n        int64_t v294 = v288 + v290; // 0x4022d6\n        char v295 = v293; // 0x4022d6\n        bool v296 = false; // 0x4022d6\n        while (v292 == v293) {\n            int64_t v297 = v289 - 1; // 0x4022d6\n            v287 = v291 + v290;\n            v288 = v294;\n            v289 = v297;\n            v295 = v292;\n            v296 = true;\n            if (v297 == 0) {\n                // break -> \n                break;\n            }\n            v291 = v287;\n            v292 = *(char *)v288;\n            v293 = *(char *)v291;\n            v294 = v288 + v290;\n            v295 = v293;\n            v296 = false;\n        }\n        unsigned char v298 = v295;\n        v72 = v286;\n        v74 = v285;\n        v76 = v31;\n        v78 = v33;\n        v80 = v284;\n        v81 = v283;\n        v69 = v294;\n        v65 = v282;\n        v67 = v281;\n        v59 = v280;\n        v61 = v279;\n        v63 = v278;\n        if ((v292 >= v298 && !v296) == v292 < v298) {\n            goto lab_0x402133;\n        } else {\n            goto lab_0x4022e5;\n        }\n    }\n  lab_0x40298e:;\n    int64_t v299 = v58;\n    *(char *)v56 = 0;\n    int64_t v300 = v82 + 1; // 0x402992\n    char v301 = *(char *)(v54 + v300); // 0x402992\n    int64_t v302 = v54 + 1; // 0x40299f\n    if (v301 != 9 != v301 != 32) {\n        while (true) {\n          lab_0x4029b0_2:;\n            // 0x4029b0\n            int64_t v303; // 0x401b20\n            int64_t v304 = v303;\n            int64_t v305 = v304 + 1; // 0x4029b0\n            char v306 = *(char *)(v305 + v82); // 0x4029b4\n            v302 = v305;\n            switch (v306) {\n                case 32: {\n                    // 0x4029b0\n                    v303 = v305;\n                    goto lab_0x4029b0_2;\n                }\n                case 9: {\n                    // 0x4029b0\n                    v303 = v305;\n                    goto lab_0x4029b0_2;\n                }\n                default: {\n                    goto lab_0x4029c2;\n                }\n            }\n        }\n    }\n  lab_0x4029c2:\n    // 0x4029c2\n    v72 = v71;\n    v74 = v73;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v81 = v70;\n    v69 = v299;\n    v65 = v64;\n    v67 = v66;\n    v59 = v56;\n    v61 = v60;\n    v63 = v62;\n    if (v301 != 61) {\n        goto lab_0x402133;\n    } else {\n        int64_t v307 = v302 + v300; // 0x4029cb\n        int64_t v308; // 0x401b20\n        while (true) {\n          lab_0x4029d0_2:\n            // 0x4029d0\n            v308 = v307;\n            switch (*(char *)v308) {\n                case 32: {\n                    // 0x4029d0\n                    v307 = v308 + 1;\n                    goto lab_0x4029d0_2;\n                }\n                case 9: {\n                    // 0x4029d0\n                    v307 = v308 + 1;\n                    goto lab_0x4029d0_2;\n                }\n                default: {\n                    goto lab_0x4029e2;\n                }\n            }\n        }\n      lab_0x4029e2:;\n        int64_t v309 = function_402f30(v308); // 0x4029ea\n        v271 = v71;\n        v272 = v73;\n        v273 = v75;\n        v274 = v77;\n        v275 = v79;\n        v276 = v308;\n        v268 = v309;\n        v269 = v82;\n        v270 = v299;\n        v267 = v66;\n        v264 = v56;\n        v265 = v60;\n        v266 = v62;\n        goto lab_0x4029f4;\n    }\n  lab_0x4029f4:;\n    int64_t v310 = 0x100000000000000 * v276 >> 56;\n    char v311 = v276;\n    v72 = v271;\n    v74 = v272;\n    v76 = v273;\n    v78 = v274;\n    v80 = v275;\n    v81 = v311;\n    v69 = v270;\n    v65 = v310;\n    v67 = v267;\n    v59 = v264;\n    v61 = v265;\n    v63 = v266;\n    v252 = v271;\n    v253 = v272;\n    v254 = v273;\n    v255 = v274;\n    v256 = v275;\n    v257 = v311;\n    v258 = v269;\n    v259 = v310;\n    v260 = v267;\n    v261 = v264;\n    v262 = v265;\n    v263 = v266;\n    if ((char)v268 != 0) {\n        goto lab_0x4022c1;\n    } else {\n        goto lab_0x402133;\n    }\n  lab_0x4022e5:;\n    int64_t v312 = 0; // 0x4022ee\n    int64_t v313 = v282; // 0x4022ee\n    if (g42 == 0) {\n        // 0x4022f0\n        v312 = strchr((char *)str, 10) != NULL;\n        v313 = 0x100000000000000 * v282 >> 56;\n    }\n    // 0x402310\n    v45 = v312;\n    char v314 = v313; // 0x402320\n    int64_t v315; // bp-136, 0x401b20\n    uint64_t v316 = function_4030d0(str, &v315, (int64_t *)&v224); // 0x402325\n    int64_t v317 = 0x100000000000000 * v313 >> 56; // 0x40232a\n    int64_t v318; // 0x401b20\n    int64_t v319; // 0x401b20\n    int64_t v320; // 0x401b20\n    char v321; // 0x401b20\n    int32_t v322; // 0x401b20\n    int32_t v323; // 0x401b20\n    char v324; // 0x401b20\n    int64_t v325; // 0x401b20\n    if ((char)v316 != 0) {\n        // 0x4024a0\n        if (*(char *)&g40 == 0) {\n            goto lab_0x4024b4;\n        } else {\n            // 0x4024a9\n            v30 = v286;\n            v32 = v31;\n            v34 = v33;\n            v36 = v314;\n            v37 = v325;\n            v38 = v281;\n            v40 = v278;\n            if (v224 != 0) {\n                goto lab_0x40239b;\n            } else {\n                goto lab_0x4024b4;\n            }\n        }\n    } else {\n        int32_t v326 = v33 + 1; // 0x402339\n        v30 = v286;\n        v32 = v31;\n        v34 = v326;\n        v36 = v314;\n        v37 = v325;\n        v38 = v281;\n        v40 = v278;\n        if (g42 != 0) {\n            goto lab_0x40239b;\n        } else {\n            if (v45 != 0) {\n                int64_t v327 = (int64_t)g30; // 0x40234c\n                int64_t * v328 = (int64_t *)(v327 + 40); // 0x402353\n                uint64_t v329 = *v328; // 0x402353\n                if (v329 >= *(int64_t *)(v327 + 48)) {\n                    // 0x402d2a\n                    __overflow(g30, 92);\n                } else {\n                    // 0x402361\n                    *v328 = v329 + 1;\n                    *(char *)v329 = 92;\n                }\n            }\n            // 0x40236c\n            function_403020(str, v45);\n            v321 = v286;\n            v322 = v31;\n            v323 = v326;\n            v324 = v314;\n            v320 = (int64_t)\"FAILED open or read\";\n            v319 = v281;\n            v318 = v278;\n            goto lab_0x402380;\n        }\n    }\n  lab_0x4024b4:\n    // 0x4024b4\n    v35 = v317;\n    v39 = g43 / 2;\n    v46 = v316 & 0xffffffff;\n    v28 = v325;\n    v26 = v281;\n    int64_t v330; // 0x401b20\n    int64_t v331; // 0x401b20\n    int64_t v332; // 0x401b20\n    char v333; // 0x401b20\n    int32_t v334; // 0x401b20\n    if (g43 < 2) {\n        goto lab_0x4028ca;\n    } else {\n        int32_t ** v335 = __ctype_tolower_loc(); // 0x4024d5\n        int64_t v336 = v316 % 256; // 0x4024df\n        int64_t v337 = (int64_t)*v335; // 0x4024e4\n        int64_t v338 = 0; // 0x4024ec\n        int64_t v339 = v338;\n        unsigned char v340 = *(char *)(v2 + 208 + v339); // 0x402512\n        int64_t v341 = 2 * v339 + v317;\n        int64_t v342 = (int64_t)*(char *)v341; // 0x40251b\n        char v343 = *(char *)((int64_t)(v340 / 16) | (int64_t)\"0123456789abcdef\"); // 0x402529\n        int64_t v344; // 0x401b20\n        while (*(int32_t *)(4 * v342 + v337) == (int32_t)v343) {\n            int64_t v345 = (int64_t)*(char *)(v341 + 1); // 0x4024f0\n            char v346 = *(char *)((int64_t)(v340 % 16) | (int64_t)\"0123456789abcdef\"); // 0x4024f9\n            v344 = v345;\n            if (*(int32_t *)(4 * v345 + v337) != (int32_t)v346) {\n                goto lab_0x402536;\n            }\n            // 0x402505\n            v338 = v339 + 1;\n            v46 = v336;\n            v28 = v345;\n            v26 = v342;\n            if (v39 == v338) {\n                goto lab_0x4028ca;\n            }\n            v339 = v338;\n            v340 = *(char *)(v2 + 208 + v339);\n            v341 = 2 * v339 + v317;\n            v342 = (int64_t)*(char *)v341;\n            v343 = *(char *)((int64_t)(v340 / 16) | (int64_t)\"0123456789abcdef\");\n        }\n        // 0x402536\n        v344 = v343;\n      lab_0x402536:;\n        int32_t v347 = v31 + 1; // 0x402536\n        v30 = v286;\n        v32 = v347;\n        v34 = v33;\n        v36 = v35;\n        v37 = v344;\n        v38 = v342;\n        v40 = v339;\n        if (g42 != 0) {\n            goto lab_0x40239b;\n        } else {\n            // 0x402549\n            v48 = v286;\n            v50 = v347;\n            v43 = v342;\n            v42 = v339;\n            v333 = v286;\n            v334 = v347;\n            v332 = v39;\n            v331 = v342;\n            v330 = v339;\n            if (v45 == 0) {\n                goto lab_0x40256d;\n            } else {\n                goto lab_0x40254d;\n            }\n        }\n    }\n  lab_0x40239b:\n    // 0x40239b\n    v102 = v30;\n    char v348; // 0x401b20\n    v104 = v348;\n    v106 = v32;\n    v108 = v34;\n    v110 = v284;\n    v112 = v36;\n    v114 = v317;\n    v116 = v38;\n    v118 = v280;\n    v120 = v279;\n    v122 = v40;\n    v123 = v30;\n    v124 = v348;\n    v125 = v32;\n    v126 = v34;\n    v127 = v284;\n    v128 = v36;\n    v130 = v37;\n    v131 = v317;\n    v132 = v38;\n    v133 = v280;\n    if ((*v134 & 48) != 0) {\n        // break -> 0x4023ab\n        goto lab_0x4023ab_3;\n    }\n    goto lab_0x402151;\n  lab_0x402380:\n    // 0x402380\n    __printf_chk(1, \": %s\\n\", dcgettext(NULL, (char *)v320, 5));\n    v30 = v321;\n    v32 = v322;\n    v34 = v323;\n    v36 = v324;\n    v37 = (int64_t)\": %s\\n\";\n    v38 = v319;\n    v40 = v318;\n    goto lab_0x40239b;\n  lab_0x40256d:;\n    char v349 = v332; // 0x402572\n    function_403020(str, v45);\n    v321 = v333;\n    v322 = v334;\n    v323 = v33;\n    v324 = v349;\n    v320 = (int64_t)\"FAILED\";\n    v319 = v331;\n    v318 = v330;\n    v47 = v333;\n    v49 = v334;\n    v51 = v349;\n    v44 = v331;\n    v41 = v330;\n    if (0x100000000000000 * v332 >> 56 == v330) {\n        goto lab_0x402a34;\n    } else {\n        goto lab_0x402380;\n    }\n  lab_0x40254d:;\n    int64_t v350 = v42;\n    int64_t v351 = v43;\n    int32_t v352 = v50;\n    char v353 = v48;\n    int64_t v354 = (int64_t)g30; // 0x40254d\n    int64_t * v355 = (int64_t *)(v354 + 40); // 0x402554\n    uint64_t v356 = *v355; // 0x402554\n    if (v356 >= *(int64_t *)(v354 + 48)) {\n        // 0x402d5a\n        __overflow(g30, 92);\n        v333 = v353;\n        v334 = v352;\n        v332 = 0x100000000000000 * v39 >> 56;\n        v331 = v351;\n        v330 = v350;\n    } else {\n        // 0x402562\n        *v355 = v356 + 1;\n        *(char *)v356 = 92;\n        v333 = v353;\n        v334 = v352;\n        v332 = v39;\n        v331 = v351;\n        v330 = v350;\n    }\n    goto lab_0x40256d;\n  lab_0x402a34:\n    // 0x402a34\n    v321 = v47;\n    v322 = v49;\n    v323 = v33;\n    v324 = v51;\n    v320 = (int64_t)\"OK\";\n    v319 = v44;\n    v318 = v41;\n    v30 = v47;\n    v32 = v49;\n    v34 = v33;\n    v36 = v51;\n    v37 = v45;\n    v38 = v44;\n    v40 = v41;\n    if (g39 != 0) {\n        goto lab_0x40239b;\n    } else {\n        goto lab_0x402380;\n    }\n  lab_0x401ba0:\n    // 0x401ba0\n    v10 = v9;\n    goto lab_0x401ba0_2;\n  lab_0x401eb1:;\n    // 0x401eb1\n    int64_t v357; // 0x401b20\n    int64_t v358; // 0x401b20\n    if (g41 == 0) {\n        // 0x402d05\n        v357 = v23;\n        if (g39 == 1) {\n            // 0x402d12\n            v357 = (int64_t)\"the --quiet option is meaningful only when verifying checksums\";\n            if (v8 == 0) {\n                // 0x401e5a\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --quiet option is meaningful only when verifying checksums\", 5));\n                // 0x401e6f\n                function_403280(1);\n                // UNREACHABLE\n            }\n        }\n        goto lab_0x401e3e;\n    } else {\n        // 0x401ebe\n        v358 = (int64_t)\"the --warn option is meaningful only when verifying checksums\";\n        if (v8 == 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --warn option is meaningful only when verifying checksums\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n        goto lab_0x401ecd;\n    }\n  lab_0x401e31:\n    // 0x401e31\n    v357 = v22;\n    v358 = v22;\n    if (g41 != 0) {\n        goto lab_0x401ecd;\n    } else {\n        goto lab_0x401e3e;\n    }\n  lab_0x401e3e:\n    // 0x401e3e\n    v358 = v357;\n    if (*(char *)&g38 != 0) {\n        // 0x401e4b\n        v358 = (int64_t)\"the --strict option is meaningful only when verifying checksums\";\n        if (v8 == 0) {\n            // 0x401e5a\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --strict option is meaningful only when verifying checksums\", 5));\n            // 0x401e6f\n            function_403280(1);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x401ecd;\n  lab_0x401ecd:;\n    int64_t v359 = (0x100000000 * a1 >> 29) + a2; // 0x401ed7\n    int32_t v360 = *(int32_t *)0x60e2bc; // 0x401ee1\n    int64_t v361 = v359; // 0x401eeb\n    if (v360 == (int32_t)a1) {\n        // 0x401eed\n        *(int64_t *)v359 = (int64_t)\"-\";\n        v361 = v359 + 8;\n    }\n    int64_t v362 = 8 * (int64_t)v360 + a2; // 0x401f02\n    int64_t v363 = v362; // 0x401f11\n    int32_t v364 = 1; // 0x401f11\n    int64_t v365 = v358; // 0x401f11\n    int64_t v366 = 0; // 0x401f11\n    int64_t v367 = v11; // 0x401f11\n    int64_t v368; // 0x401b20\n    int64_t v369; // 0x401b20\n    int32_t v370; // 0x401b20\n    char v371; // 0x401b20\n    int32_t v372; // 0x401b20\n    int64_t v373; // 0x401b20\n    if (v361 > v362) {\n        int64_t v374 = v13 == 0 | v13 == 0xffffffff ? 32 : 42; // 0x401f24\n        v373 = v362;\n        v372 = 1;\n        v370 = v374;\n        v371 = v374;\n        v368 = 0;\n        v369 = v11;\n        goto lab_0x401f30;\n    } else {\n        goto lab_0x40265e;\n    }\n  lab_0x40265e:;\n    uint32_t v375 = v364;\n    if (g45 == 0 || (int32_t)function_4085e0((int64_t)g31, v365) != -1) {\n        // 0x40266b\n        return v375 % 256 ^ 1;\n    }\n    // 0x402ac5\n    error(1, *__errno_location(), dcgettext(NULL, \"standard input\", 5));\n    int64_t v376 = v363; // 0x402aea\n    int32_t v377 = v375; // 0x402aea\n    int32_t v378; // 0x401b20\n    int32_t v379 = v378; // 0x402aea\n    char v380; // 0x401b20\n    char v381 = v380; // 0x402aea\n    char * v382; // 0x401b20\n    char * v383 = v382; // 0x402aea\n    char v384; // 0x401b20\n    char v385 = v384; // 0x402aea\n    int64_t v386 = v366; // 0x402aea\n    int64_t v387 = v367; // 0x402aea\n    int64_t v388; // 0x401b20\n    int64_t v389 = v388; // 0x402aea\n    goto lab_0x402aef;\n  lab_0x401f30:;\n    // 0x401f30\n    int64_t v459; // 0x401b20\n    int64_t v512 = v459;\n    int64_t v514 = v369;\n    int64_t v516 = v368;\n    char v455; // 0x401b20\n    char v518 = v455;\n    char v541 = v371;\n    int32_t v540 = v370;\n    int32_t v539 = v372;\n    int64_t v538 = v373;\n    int64_t v640 = *(int64_t *)v538; // 0x401f35\n    char * str3 = (char *)v640; // 0x401f38\n    int64_t v460; // 0x401b20\n    int64_t v536; // 0x401b20\n    int64_t v406; // 0x401b20\n    int64_t v464; // 0x401b20\n    int64_t v457; // 0x401b20\n    int64_t v534; // 0x401b20\n    int64_t v404; // 0x401b20\n    int64_t v458; // 0x401b20\n    int64_t v535; // 0x401b20\n    int64_t v405; // 0x401b20\n    int64_t v462; // 0x401b20\n    int32_t v453; // 0x401b20\n    int32_t v400; // 0x401b20\n    char v454; // 0x401b20\n    char v401; // 0x401b20\n    int32_t v452; // 0x401b20\n    int32_t v399; // 0x401b20\n    char * v466; // 0x401b20\n    char * v461; // 0x401b20\n    char * v532; // 0x401b20\n    char * v402; // 0x401b20\n    int64_t v451; // 0x401b20\n    int64_t v398; // 0x401b20\n    char v456; // 0x401b20\n    char v533; // 0x401b20\n    char v403; // 0x401b20\n    if (v8 == 0) {\n        // 0x402621\n        int64_t v641; // bp-216, 0x401b20\n        if ((char)function_4030d0(v640, &v641, &v315) != 0) {\n            char * found_char_pos2 = strchr(str3, 92); // 0x4027b5\n            v398 = v538;\n            v399 = v539;\n            v400 = v540;\n            v401 = v541;\n            v402 = str3;\n            v403 = v518;\n            v404 = v516;\n            v405 = v514;\n            v406 = v512;\n            v376 = v538;\n            v377 = v539;\n            v379 = v540;\n            v381 = v541;\n            v383 = str3;\n            v385 = v518;\n            v386 = v516;\n            v387 = v514;\n            v389 = v512;\n            if (found_char_pos2 == NULL) {\n                goto lab_0x402aef;\n            } else {\n                goto lab_0x4027c3;\n            }\n        } else {\n            // 0x402643\n            v451 = v538;\n            v452 = 0;\n            v453 = v540;\n            v454 = v541;\n            v461 = str3;\n            v456 = v518;\n            v462 = &v641;\n            v457 = v516;\n            v458 = v514;\n            v460 = v512;\n            goto lab_0x402648;\n        }\n    } else {\n        // 0x401f46\n        strcmp_rc = strcmp(str3, \"-\");\n        if (strcmp_rc != 0) {\n            int64_t v642 = function_405750(v640, (int64_t *)\"r\"); // 0x402757\n            v466 = str3;\n            v464 = v642;\n            v532 = str3;\n            v533 = v518;\n            v534 = v516;\n            v535 = v514;\n            v536 = v512;\n            if (v642 != 0) {\n                goto lab_0x401f80;\n            } else {\n                goto lab_0x402768;\n            }\n        } else {\n            // 0x401f5c\n            g45 = 1;\n            v466 = dcgettext(NULL, \"standard input\", 5);\n            v464 = (int64_t)g31;\n            goto lab_0x401f80;\n        }\n    }\n  lab_0x402aef:;\n    int64_t v390 = v389;\n    int64_t v391 = v387;\n    int64_t v392 = v386;\n    char v393 = v385;\n    char * str2 = v383;\n    char v394 = v381;\n    int32_t v395 = v379;\n    int32_t v396 = v377;\n    int64_t v397 = v376;\n    char * found_char_pos = strchr(str2, 10); // 0x402af9\n    v398 = v397;\n    v399 = v396;\n    v400 = v395;\n    v401 = v394;\n    v402 = str2;\n    v403 = v393;\n    v404 = v392;\n    v405 = v391;\n    v406 = v390;\n    int64_t v407; // 0x401b20\n    int64_t v408; // 0x401b20\n    int64_t v409; // 0x401b20\n    int64_t v410; // 0x401b20\n    int64_t v411; // 0x401b20\n    int64_t v412; // 0x401b20\n    char v413; // 0x401b20\n    int64_t v414; // 0x401b20\n    int64_t v415; // 0x401b20\n    int32_t v416; // 0x401b20\n    int32_t v417; // 0x401b20\n    char v418; // 0x401b20\n    char v419; // 0x401b20\n    int32_t v420; // 0x401b20\n    int32_t v421; // 0x401b20\n    char * v422; // 0x401b20\n    char * v423; // 0x401b20\n    int64_t v424; // 0x401b20\n    int64_t v425; // 0x401b20\n    char v426; // 0x401b20\n    char v427; // 0x401b20\n    if (found_char_pos != NULL) {\n        goto lab_0x4027c3;\n    } else {\n        // 0x402b07\n        v425 = v397;\n        v421 = v396;\n        v417 = v395;\n        v419 = v394;\n        v423 = str2;\n        v426 = v393;\n        v414 = 0;\n        v409 = v392;\n        v411 = v391;\n        v407 = v390;\n        v424 = v397;\n        v420 = v396;\n        v416 = v395;\n        v418 = v394;\n        v422 = str2;\n        v427 = v393;\n        v415 = 0;\n        v413 = 0;\n        v410 = v392;\n        v412 = v391;\n        v408 = v390;\n        if (v3 == 0) {\n            goto lab_0x4027f3;\n        } else {\n            goto lab_0x402b16;\n        }\n    }\n  lab_0x4027c3:;\n    int64_t v428 = v406;\n    int64_t v429 = v405;\n    int64_t v430 = v404;\n    char v431 = v403;\n    char * v432 = v402;\n    char v433 = v401;\n    int32_t v434 = v400;\n    int32_t v435 = v399;\n    int64_t v436 = v398;\n    int64_t v437 = v436; // 0x4027c8\n    int32_t v438 = v435; // 0x4027c8\n    int32_t v439 = v434; // 0x4027c8\n    char v440 = v433; // 0x4027c8\n    char * v441 = v432; // 0x4027c8\n    char v442 = v431; // 0x4027c8\n    int64_t v443 = 1; // 0x4027c8\n    int64_t v444 = v430; // 0x4027c8\n    int64_t v445 = v429; // 0x4027c8\n    int64_t v446 = v428; // 0x4027c8\n    if (v3 != 0) {\n        int64_t v447 = (int64_t)g30; // 0x402c9a\n        int64_t * v448 = (int64_t *)(v447 + 40); // 0x402ca1\n        uint64_t v449 = *v448; // 0x402ca1\n        if (*(int64_t *)(v447 + 48) > v449) {\n            // 0x402caf\n            *v448 = v449 + 1;\n            *(char *)v449 = 92;\n            v424 = v436;\n            v420 = v435;\n            v416 = v434;\n            v418 = v433;\n            v422 = v432;\n            v427 = v431;\n            v415 = 1;\n            v413 = v3;\n            v410 = v430;\n            v412 = v429;\n            v408 = v428;\n        } else {\n            // 0x402d9f\n            __overflow(g30, 92);\n            v424 = v436;\n            v420 = v435;\n            v416 = v434;\n            v418 = v433;\n            v422 = v432;\n            v427 = v431;\n            v415 = 1;\n            v413 = v3;\n            v410 = v430;\n            v412 = v429;\n            v408 = v428;\n        }\n        goto lab_0x402b16;\n    } else {\n        goto lab_0x4027d3;\n    }\n  lab_0x402648:;\n    int64_t v450 = v451 + 8; // 0x402648\n    v373 = v450;\n    v372 = v452;\n    v370 = v453;\n    v371 = v454;\n    v455 = v456;\n    v368 = v457;\n    v369 = v458;\n    v459 = v460;\n    v363 = v450;\n    v364 = v452;\n    v378 = v453;\n    v380 = v454;\n    v382 = v461;\n    v384 = v456;\n    v365 = v462;\n    v366 = v457;\n    v367 = v458;\n    v388 = v460;\n    if (v361 > v450) {\n        goto lab_0x401f30;\n    } else {\n        goto lab_0x40265e;\n    }\n  lab_0x401f80:;\n    int64_t v463 = v464;\n    char * v465 = v466;\n    v158 = 0;\n    v157 = 0;\n    int32_t v467 = __getdelim((char **)&v158, (int32_t *)&v157, 10, (struct _IO_FILE *)v463); // 0x401fd2\n    v130 = &v157;\n    if (v467 >= 1) {\n        // 0x401fe0\n        while (true) {\n          lab_0x401fe0:\n            // 0x401fe0\n            v71 = v159;\n            v73 = v161;\n            v75 = v163;\n            v77 = v165;\n            v79 = v167;\n            v66 = v153;\n            v60 = v148;\n            int64_t v468 = v158; // 0x401fe0\n            char v469 = *(char *)v468; // 0x401fe5\n            v101 = v71;\n            v103 = v73;\n            v105 = v75;\n            v107 = v77;\n            v109 = v79;\n            v111 = v169;\n            v129 = v171;\n            v113 = v151;\n            v115 = v66;\n            v117 = v146;\n            v119 = v60;\n            v121 = v468;\n            if (v469 == 35) {\n                goto lab_0x402146;\n            } else {\n                int64_t v470 = v145;\n                int64_t v471 = v470 - 1;\n                char * v472 = (char *)(v468 + v471);\n                char v473 = v469; // 0x401ffb\n                int64_t v474 = v470; // 0x401ffb\n                int64_t v475 = v468; // 0x401ffb\n                if (*v472 == 10) {\n                    // 0x401ffd\n                    *v472 = 0;\n                    v475 = v158;\n                    v473 = *(char *)v475;\n                    v474 = v471;\n                }\n                // 0x40200f\n                v62 = v475;\n                v87 = v474;\n                char v476 = v473;\n                int64_t v477 = 0; // 0x402014\n                char v478 = v476; // 0x402014\n                int64_t v479 = 0; // 0x402014\n                if (v476 != 9 != v476 != 32) {\n                    while (true) {\n                      lab_0x402020_2:;\n                        int64_t v480 = v477 + 1; // 0x402020\n                        char v481 = *(char *)(v480 + v62); // 0x402024\n                        v478 = v481;\n                        v479 = v480;\n                        switch (v481) {\n                            case 32: {\n                                // 0x402020\n                                v477 = v480;\n                                goto lab_0x402020_2;\n                            }\n                            case 9: {\n                                // 0x402020\n                                v477 = v480;\n                                goto lab_0x402020_2;\n                            }\n                            default: {\n                                goto lab_0x402033;\n                            }\n                        }\n                    }\n                }\n              lab_0x402033:\n                // 0x402033\n                v70 = v478 != 92 ? 0 : v348;\n                int64_t v482 = v479 + (int64_t)(v478 == 92);\n                v85 = v482 + v62;\n                int64_t v483 = (int64_t)\"BLAKE2\"; // 0x401b20\n                int64_t v484 = v85; // 0x401b20\n                int64_t v485 = 6; // 0x402057\n                int64_t v486 = v483;\n                unsigned char v487 = *(char *)v484; // 0x402057\n                char v488 = *(char *)v486; // 0x402057\n                int64_t v489 = v484 + v290; // 0x402057\n                char v490 = v488; // 0x402057\n                bool v491 = false; // 0x402057\n                while (v487 == v488) {\n                    v485--;\n                    v483 = v486 + v290;\n                    v484 = v489;\n                    v490 = v487;\n                    v491 = true;\n                    if (v485 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v486 = v483;\n                    v487 = *(char *)v484;\n                    v488 = *(char *)v486;\n                    v489 = v484 + v290;\n                    v490 = v488;\n                    v491 = false;\n                }\n                unsigned char v492 = v490;\n                v160 = v71;\n                v162 = v73;\n                v164 = v75;\n                v166 = v77;\n                v168 = v79;\n                v170 = v70;\n                v155 = v482;\n                v156 = v489;\n                v152 = v85;\n                v154 = v66;\n                v147 = v87;\n                v149 = v60;\n                v150 = v62;\n                if ((v487 >= v492 && !v491) != v487 < v492) {\n                    goto lab_0x402198;\n                } else {\n                    int64_t v493 = v482 + 6; // 0x402066\n                    int64_t v494 = v493 + v62; // 0x40206a\n                    char * v495 = (char *)v494;\n                    unsigned char v496 = *v495; // 0x40206e\n                    v84 = v495;\n                    v90 = v493;\n                    v88 = 0;\n                    v92 = v495;\n                    v99 = v493;\n                    v98 = 9;\n                    v96 = v494;\n                    switch (v496) {\n                        case 0: {\n                            goto lab_0x4020c6;\n                        }\n                        case 9: {\n                            goto lab_0x402599;\n                        }\n                        default: {\n                            int64_t v497 = v496; // 0x40206e\n                            int64_t v498 = v493; // 0x402085\n                            int64_t v499 = v497; // 0x402085\n                            int64_t v500 = v494; // 0x402085\n                            v92 = v495;\n                            v99 = v493;\n                            v98 = v497;\n                            v96 = v494;\n                            if (v496 != 32) {\n                                int64_t v501; // 0x401b20\n                                int64_t v502; // 0x401b20\n                                int64_t v503; // 0x401b20\n                                while (true) {\n                                  lab_0x4020c0:\n                                    // 0x4020c0\n                                    v501 = v500;\n                                    v502 = v499;\n                                    v503 = v498;\n                                    if (v502 == 45) {\n                                        // break -> 0x4020c0\n                                        break;\n                                    }\n                                    if (v502 == 40) {\n                                        char * v504 = (char *)v501;\n                                        *v504 = 0;\n                                        int64_t v505 = function_4052d0(v85, &g3, 0, 0); // 0x4025fa\n                                        v72 = v71;\n                                        v74 = v73;\n                                        v76 = v75;\n                                        v78 = v77;\n                                        v80 = v79;\n                                        v81 = v70;\n                                        v69 = (int64_t)&g3;\n                                        v65 = v85;\n                                        v67 = v66;\n                                        v59 = v87;\n                                        v61 = v60;\n                                        v63 = v62;\n                                        if (v505 < 0) {\n                                            goto lab_0x402133;\n                                        } else {\n                                            // 0x402612\n                                            g37 = v505;\n                                            v95 = v504;\n                                            v100 = v503;\n                                            v97 = v501;\n                                            goto lab_0x402618;\n                                        }\n                                    }\n                                    int64_t v506 = v503 + 1; // 0x40209a\n                                    int64_t v507 = v506 + v62; // 0x40209e\n                                    char * v508 = (char *)v507;\n                                    unsigned char v509 = *v508; // 0x40209e\n                                    int64_t v510 = v509; // 0x40209e\n                                    v498 = v506;\n                                    v499 = v510;\n                                    v500 = v507;\n                                    v84 = v508;\n                                    v90 = v506;\n                                    v88 = 0;\n                                    v92 = v508;\n                                    v99 = v506;\n                                    v98 = v510;\n                                    v96 = v507;\n                                    switch (v509) {\n                                        case 0: {\n                                            goto lab_0x4020c6;\n                                        }\n                                        case 32: {\n                                            goto lab_0x402599;\n                                        }\n                                        case 9: {\n                                            goto lab_0x402599;\n                                        }\n                                        default: {\n                                            goto lab_0x4020c0;\n                                        }\n                                    }\n                                }\n                                // 0x4020c0\n                                v84 = (char *)v501;\n                                v90 = v503;\n                                v88 = v502;\n                                goto lab_0x4020c6;\n                            } else {\n                                goto lab_0x402599;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4023ab_3:;\n    int64_t v511 = v512;\n    int64_t v513 = v514;\n    int64_t v515 = v516;\n    char v517 = v518;\n    free((int64_t *)v158);\n    int32_t v519 = *(int32_t *)v463 & 32; // 0x4023b9\n    int64_t v520; // 0x401b20\n    int64_t v521; // 0x401b20\n    int64_t v522; // 0x401b20\n    int32_t v523; // 0x401b20\n    int64_t v524; // 0x401b20\n    int64_t v525; // 0x401b20\n    char v526; // 0x401b20\n    int32_t v527; // 0x401b20\n    int32_t v528; // 0x401b20\n    int32_t v529; // 0x401b20\n    char * v530; // 0x401b20\n    char v531; // 0x401b20\n    if (v519 != 0) {\n        // 0x402942\n        function_407290(0, 3, (int64_t)v465);\n        error(0, (int32_t)\"%s: read error\" ^ (int32_t)\"%s: read error\", dcgettext(NULL, \"%s: read error\", 5));\n        v530 = v465;\n        v531 = v517;\n        v523 = (int32_t)&g65 ^ (int32_t)&g65;\n        v525 = (int32_t)\"%s: read error\" ^ (int32_t)\"%s: read error\";\n        v521 = v515;\n        v522 = v513;\n        v520 = v511;\n        goto lab_0x40244a;\n    } else {\n        // 0x4023c2\n        v524 = v130;\n        v529 = 0;\n        v528 = 0;\n        v527 = 0;\n        v526 = 0;\n        if (strcmp_rc != 0) {\n            // 0x4028b2\n            v532 = v465;\n            v533 = v517;\n            v534 = v515;\n            v535 = v513;\n            v536 = v511;\n            if ((int32_t)function_4085e0(v463, v524) == 0) {\n                goto lab_0x4023cd;\n            } else {\n                goto lab_0x402768;\n            }\n        } else {\n            goto lab_0x4023cd;\n        }\n    }\n  lab_0x402768:;\n    int64_t v537 = function_407290(0, 3, (int64_t)v532); // 0x402774\n    uint32_t err_num = *__errno_location(); // 0x40278b\n    error(0, err_num, \"%s\", (char *)v537);\n    v530 = v532;\n    v531 = v533;\n    v523 = (int32_t)&g65 ^ (int32_t)&g65;\n    v525 = err_num;\n    v521 = v534;\n    v522 = v535;\n    v520 = v536;\n    goto lab_0x40244a;\n  lab_0x4027d3:;\n    int64_t v627 = v446;\n    int64_t v628 = v445;\n    int64_t v629 = v444;\n    int64_t v630 = v443;\n    char v631 = v442;\n    char * v632 = v441;\n    char v633 = v440;\n    int32_t v634 = v439;\n    int32_t v635 = v438;\n    int64_t v636 = v437;\n    int64_t v637 = (int64_t)g30; // 0x4027d3\n    int64_t * v638 = (int64_t *)(v637 + 40); // 0x4027da\n    uint64_t v639 = *v638; // 0x4027da\n    if (v639 >= *(int64_t *)(v637 + 48)) {\n        // 0x402d73\n        __overflow(g30, 92);\n        v425 = v636;\n        v421 = v635;\n        v417 = v634;\n        v419 = v633;\n        v423 = v632;\n        v426 = v631;\n        v414 = v630;\n        v409 = v629;\n        v411 = v628;\n        v407 = v627;\n    } else {\n        // 0x4027e8\n        *v638 = v639 + 1;\n        *(char *)v639 = 92;\n        v425 = v636;\n        v421 = v635;\n        v417 = v634;\n        v419 = v633;\n        v423 = v632;\n        v426 = v631;\n        v414 = v630;\n        v409 = v629;\n        v411 = v628;\n        v407 = v627;\n    }\n    goto lab_0x4027f3;\n  lab_0x40244a:\n    // 0x40244a\n    v451 = v538;\n    v452 = 0x1000000 * (v523 & v539) >> 24;\n    v453 = v540;\n    v454 = v541;\n    v461 = v530;\n    v456 = v531;\n    v462 = v525;\n    v457 = v521;\n    v458 = v522;\n    v460 = v520;\n    goto lab_0x402648;\n  lab_0x4027f3:;\n    int64_t v542 = v425; // 0x4027fd\n    int32_t v543 = v421; // 0x4027fd\n    int32_t v544 = v417; // 0x4027fd\n    char v545 = v419; // 0x4027fd\n    char * v546 = v423; // 0x4027fd\n    char v547 = v426; // 0x4027fd\n    int64_t v548 = v414; // 0x4027fd\n    int64_t v549 = v409; // 0x4027fd\n    int64_t v550 = v411; // 0x4027fd\n    int64_t v551 = v407; // 0x4027fd\n    int64_t v552 = v425; // 0x4027fd\n    int32_t v553 = v421; // 0x4027fd\n    int32_t v554 = v417; // 0x4027fd\n    char v555 = v419; // 0x4027fd\n    char * v556 = v423; // 0x4027fd\n    char v557 = v426; // 0x4027fd\n    int64_t v558 = v414; // 0x4027fd\n    int64_t v559 = v409; // 0x4027fd\n    int64_t v560 = v411; // 0x4027fd\n    int64_t v561 = v407; // 0x4027fd\n    if (g43 < 2) {\n        goto lab_0x402860;\n    } else {\n        goto lab_0x4027ff;\n    }\n  lab_0x402b16:;\n    int64_t v562 = v408;\n    int64_t v563 = v412;\n    int64_t v564 = v410;\n    int64_t v565 = v415;\n    char v566 = v427;\n    char * v567 = v422;\n    char v568 = v418;\n    int32_t v569 = v416;\n    int32_t v570 = v420;\n    int64_t v571 = v424;\n    int64_t v572 = *(int64_t *)(8 * (int64_t)g37 + (int64_t)&g3); // 0x402b23\n    fputs_unlocked((char *)v572, g30);\n    if (g36 < 512) {\n        // 0x402b97\n        __printf_chk(1, \"-%lu\", g36);\n        fwrite_unlocked((int64_t *)\" (\", 1, 2, g30);\n        function_403020((int64_t)v567, v565);\n        fwrite_unlocked((int64_t *)\") = \", 1, 4, g30);\n        v437 = v571;\n        v438 = v570;\n        v439 = v569;\n        v440 = v568;\n        v441 = v567;\n        v442 = v566;\n        v443 = v565;\n        v444 = v564;\n        v445 = v563;\n        v446 = v562;\n        if (v3 != 0 || v413 == 0) {\n            goto lab_0x402b82;\n        } else {\n            goto lab_0x4027d3;\n        }\n    } else {\n        // 0x402b40\n        fwrite_unlocked((int64_t *)\" (\", 1, 2, g30);\n        function_403020((int64_t)v567, v565);\n        fwrite_unlocked((int64_t *)\") = \", 1, 4, g30);\n        goto lab_0x402b82;\n    }\n  lab_0x4023cd:;\n    int64_t v573; // 0x401b20\n    int64_t v574; // 0x401b20\n    int64_t v575; // 0x401b20\n    int32_t v576; // 0x401b20\n    int64_t v577; // 0x401b20\n    int64_t v578; // 0x401b20\n    int64_t v579; // 0x401b20\n    // 0x402901\n    function_407290(0, 3, (int64_t)v465);\n    error(0, (int32_t)\"%s: no properly formatted %s checksum lines found\" ^ (int32_t)\"%s: no properly formatted %s checksum lines found\", dcgettext(NULL, \"%s: no properly formatted %s checksum lines found\", 5));\n    v576 = v519;\n    v578 = (int32_t)\"%s: no properly formatted %s checksum lines found\" ^ (int32_t)\"%s: no properly formatted %s checksum lines found\";\n    v574 = (int64_t)\"BLAKE2\";\n    goto lab_0x402445;\n  lab_0x402860:;\n    char v583 = v555;\n    int32_t v584 = v554;\n    int64_t v585 = (int64_t)g30; // 0x402860\n    int64_t * v586 = (int64_t *)(v585 + 40); // 0x402867\n    uint64_t v587 = *v586; // 0x402867\n    if (v587 >= *(int64_t *)(v585 + 48)) {\n        // 0x402d82\n        __overflow(g30, 32);\n    } else {\n        // 0x402875\n        *v586 = v587 + 1;\n        *(char *)v587 = 32;\n    }\n    int64_t v588 = (int64_t)g30; // 0x402880\n    int64_t * v589 = (int64_t *)(v588 + 40); // 0x402887\n    uint64_t v590 = *v589; // 0x402887\n    if (v590 >= *(int64_t *)(v588 + 48)) {\n        // 0x402d91\n        __overflow(g30, v584);\n    } else {\n        // 0x402895\n        *v589 = v590 + 1;\n        *(char *)v590 = v583;\n    }\n    int64_t v591 = v558 & 0xffffffff; // 0x4028a9\n    function_403020((int64_t)v556, v591);\n    int64_t v592 = v552; // 0x4028b0\n    int32_t v593 = v553; // 0x4028b0\n    int32_t v594 = v584; // 0x4028b0\n    char v595 = v583; // 0x4028b0\n    char * v596 = v556; // 0x4028b0\n    char v597 = v557; // 0x4028b0\n    int64_t v598 = v591; // 0x4028b0\n    int64_t v599 = v559; // 0x4028b0\n    int64_t v600 = v560; // 0x4028b0\n    int64_t v601 = v561; // 0x4028b0\n    goto lab_0x40283b;\n  lab_0x4027ff:;\n    int64_t v625 = 0; // 0x402801\n    int64_t v626 = v625 + 1; // 0x40281c\n    __printf_chk(1, \"%02x\", (int32_t)*(char *)(v2 + 128 + v625));\n    v625 = v626;\n    int64_t v614 = v542; // 0x402832\n    int32_t v615 = v543; // 0x402832\n    int32_t v616 = v544; // 0x402832\n    char v617 = v545; // 0x402832\n    char * v618 = v546; // 0x402832\n    char v619 = v547; // 0x402832\n    int64_t v624 = v548; // 0x402832\n    int64_t v620 = (int64_t)\"%02x\"; // 0x402832\n    int64_t v621 = v549; // 0x402832\n    int64_t v622 = v550; // 0x402832\n    int64_t v623 = v551; // 0x402832\n    while (g43 / 2 > v626) {\n        // 0x402808\n        v626 = v625 + 1;\n        __printf_chk(1, \"%02x\", (int32_t)*(char *)(v2 + 128 + v625));\n        v625 = v626;\n        v614 = v542;\n        v615 = v543;\n        v616 = v544;\n        v617 = v545;\n        v618 = v546;\n        v619 = v547;\n        v624 = v548;\n        v620 = (int64_t)\"%02x\";\n        v621 = v549;\n        v622 = v550;\n        v623 = v551;\n    }\n    goto lab_0x402834;\n  lab_0x40283b:;\n    int64_t v602 = v601;\n    int64_t v603 = v600;\n    int64_t v604 = v599;\n    char v605 = v597;\n    char * v606 = v596;\n    char v607 = v595;\n    int32_t v608 = v594;\n    int32_t v609 = v593;\n    int64_t v610 = v592;\n    int64_t v611 = (int64_t)g30; // 0x40283b\n    int64_t * v612 = (int64_t *)(v611 + 40); // 0x402842\n    uint64_t v613 = *v612; // 0x402842\n    if (v613 >= *(int64_t *)(v611 + 48)) {\n        // 0x402d43\n        __overflow(g30, 10);\n        v451 = v610;\n        v452 = v609;\n        v453 = v608;\n        v454 = v607;\n        v461 = v606;\n        v456 = v605;\n        v462 = 10;\n        v457 = v604;\n        v458 = v603;\n        v460 = v602;\n    } else {\n        // 0x402850\n        *v612 = v613 + 1;\n        *(char *)v613 = 10;\n        v451 = v610;\n        v452 = v609;\n        v453 = v608;\n        v454 = v607;\n        v461 = v606;\n        v456 = v605;\n        v462 = v598;\n        v457 = v604;\n        v458 = v603;\n        v460 = v602;\n    }\n    goto lab_0x402648;\n  lab_0x402834:\n    // 0x402834\n    v592 = v614;\n    v593 = v615;\n    v594 = v616;\n    v595 = v617;\n    v596 = v618;\n    v597 = v619;\n    v598 = v620;\n    v599 = v621;\n    v600 = v622;\n    v601 = v623;\n    v552 = v614;\n    v553 = v615;\n    v554 = v616;\n    v555 = v617;\n    v556 = v618;\n    v557 = v619;\n    v558 = v624;\n    v559 = v621;\n    v560 = v622;\n    v561 = v623;\n    if (v3 == 0) {\n        goto lab_0x402860;\n    } else {\n        goto lab_0x40283b;\n    }\n  lab_0x402b82:\n    // 0x402b82\n    v614 = v571;\n    v615 = v570;\n    v616 = v569;\n    v617 = v568;\n    v618 = v567;\n    v619 = v566;\n    v624 = v565;\n    v620 = 1;\n    v621 = v564;\n    v622 = v563;\n    v623 = v562;\n    if (g43 >= 2) {\n        goto lab_0x4027ff;\n    } else {\n        goto lab_0x402834;\n    }\n  lab_0x402445:\n    // 0x402445\n    v530 = v465;\n    v531 = v517;\n    v523 = v576 % 2;\n    v525 = v578;\n    v521 = v574;\n    v522 = v513;\n    v520 = v511;\n    goto lab_0x40244a;\n  lab_0x40279b:\n    // 0x40279b\n    v577 = v579;\n    v573 = v575;\n    v576 = v519;\n    v578 = v579;\n    v574 = v575;\n    if (v526 != 0) {\n        goto lab_0x402421;\n    } else {\n        goto lab_0x402445;\n    }\n  lab_0x402421:;\n    int64_t v580 = v573;\n    int64_t v581 = v577;\n    v576 = v519;\n    v578 = v581;\n    v574 = v580;\n    if ((v528 || v527) == 0) {\n        char v582 = *(char *)&g38; // 0x40242d\n        v576 = v582 ^ 1 | (char)(v529 == 0);\n        v578 = v581;\n        v574 = v580;\n    }\n    goto lab_0x402445;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402e7b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402e50\n    int64_t v1; // 0x402e50\n    __libc_start_main(0x401b20, (int32_t)a4, (char **)&v1, (void (*)())0x409cc0, (void (*)())0x409d20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e7b",
            "funcStartAddr": "402e7b",
            "funcEndAddr": "402e9a",
            "decompiledFuncCode": "int64_t function_402e7b(void) {\n    // 0x402e7b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_402e9a",
            "funcStartAddr": "402e9a",
            "funcEndAddr": "402ed1",
            "decompiledFuncCode": "int64_t function_402e9a(void) {\n    // 0x402e9a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402ed1",
            "funcStartAddr": "402ed1",
            "funcEndAddr": "402f28",
            "decompiledFuncCode": "int64_t function_402ed1(void) {\n    // 0x402ed1\n    if (g34 != 0) {\n        // 0x402f27\n        int64_t result; // 0x402ed1\n        return result;\n    }\n    int64_t v1 = g35; // 0x402f04\n    int64_t result2; // 0x402f16\n    if (g35 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402f16\n        result2 = function_402e7b();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402f06\n        v1++;\n    }\n    // 0x402efa\n    g35 = v1;\n    // 0x402f16\n    result2 = function_402e7b();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402f28",
            "funcStartAddr": "402f28",
            "funcEndAddr": "402f2d",
            "decompiledFuncCode": "int64_t function_402f28(void) {\n    // 0x402f28\n    return function_402e9a();\n}\n"
        },
        {
            "funcName": "function_402f30",
            "funcStartAddr": "402f30",
            "funcEndAddr": "402f8d",
            "decompiledFuncCode": "int64_t function_402f30(int64_t a1) {\n    uint64_t v1 = g43; // 0x402f39\n    int64_t v2; // 0x402f30\n    if (v1 == 0) {\n        // 0x402f80\n        return v2 & -256 | (int64_t)(*(char *)a1 == 0);\n    }\n    int16_t * v3 = *__ctype_b_loc(); // 0x402f4a\n    int64_t v4 = 0; // 0x402f4f\n    int64_t v5 = a1; // 0x402f4f\n    unsigned char v6 = *(char *)v5; // 0x402f67\n    while ((*(char *)((int64_t)v3 + 1 + 2 * (int64_t)v6) & 16) != 0) {\n        // 0x402f58\n        v4 = v4 + 1 & 0xffffffff;\n        v5++;\n        v2 = v4;\n        int64_t v7 = v5; // 0x402f65\n        if (v4 >= v1) {\n            // 0x402f80\n            return v2 & -256 | (int64_t)(*(char *)v7 == 0);\n        }\n        v6 = *(char *)v5;\n    }\n    // 0x402f71\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402f90",
            "funcStartAddr": "402f90",
            "funcEndAddr": "403011",
            "decompiledFuncCode": "int64_t function_402f90(int64_t result, uint64_t a2, char a3) {\n    int64_t v1 = result; // 0x402f9d\n    if (a2 == 0) {\n        // 0x402fc3\n        return result;\n    }\n    int64_t v2 = 0; // 0x402f9d\n    int64_t result2; // 0x402f90\n    int64_t v3; // 0x402f90\n    int64_t v4; // 0x402f90\n    while (true) {\n      lab_0x402f9f:;\n        int64_t v5 = v2;\n        char v6 = *(char *)(v5 + result); // 0x402f9f\n        result2 = 0;\n        if (v6 == 0) {\n            // break -> 0x402fc3\n            break;\n        }\n        // 0x402fa7\n        v3 = v1;\n        if (v6 != 92) {\n            // 0x402fd0\n            *(char *)v3 = v6;\n            v4 = v5;\n            goto lab_0x402fd6;\n        } else {\n            // 0x402fac\n            result2 = 0;\n            if ((int64_t)(a2 - 1) == v5) {\n                // break -> 0x402fc3\n                break;\n            }\n            int64_t v7 = v5 + 1; // 0x402fb1\n            result2 = 0;\n            switch (*(char *)(v7 + result)) {\n                case 92: {\n                    // 0x403008\n                    *(char *)v3 = 92;\n                    v4 = v7;\n                    goto lab_0x402fd6;\n                }\n                case 110: {\n                    // 0x402ff8\n                    *(char *)v3 = 10;\n                    v4 = v7;\n                    goto lab_0x402fd6;\n                }\n                default: {\n                    return result2;\n                }\n            }\n        }\n    }\n    // 0x402fc3\n    return result2;\n  lab_0x402fd6:\n    // 0x402fd6\n    v1 = v3 + 1;\n    v2 = v4 + 1;\n    if (v2 >= a2) {\n        // 0x402fe3\n        result2 = result;\n        if (v1 >= a2 + result) {\n            return result2;\n        } else {\n            // 0x402feb\n            *(char *)v1 = 0;\n            result2 = result;\n            return result2;\n        }\n    }\n    goto lab_0x402f9f;\n}\n"
        },
        {
            "funcName": "function_403020",
            "funcStartAddr": "403020",
            "funcEndAddr": "4030c5",
            "decompiledFuncCode": "int64_t function_403020(int64_t a1, int64_t a2) {\n    if ((char)a2 == 0) {\n        // 0x4030b8\n        return fputs_unlocked((char *)a1, g30);\n    }\n    char v1 = *(char *)a1; // 0x403049\n    if (v1 == 0) {\n        // 0x4030a0\n        int64_t result; // 0x403020\n        return result;\n    }\n    int64_t v2 = a1; // 0x40304f\n    int64_t result2; // 0x403020\n    uint64_t v3; // 0x403030\n    int64_t v4; // 0x403051\n    int64_t * v5; // 0x403030\n    if (v1 == 10) {\n        // 0x403080\n        result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g30);\n    } else {\n        if (v1 != 92) {\n            // 0x403030\n            v4 = (int64_t)g30;\n            v5 = (int64_t *)(v4 + 40);\n            v3 = *v5;\n            if (v3 >= *(int64_t *)(v4 + 48)) {\n                // 0x4030a8\n                result2 = __overflow(g30, (int32_t)v1);\n            } else {\n                // 0x40303a\n                *v5 = v3 + 1;\n                *(char *)v3 = v1;\n                result2 = v3;\n            }\n        } else {\n            // 0x403064\n            result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g30);\n        }\n    }\n    // 0x403045\n    v2++;\n    char v6 = *(char *)v2; // 0x403049\n    while (v6 != 0) {\n        unsigned char v7 = v6;\n        if (v7 == 10) {\n            // 0x403080\n            result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g30);\n        } else {\n            if (v7 != 92) {\n                // 0x403030\n                v4 = (int64_t)g30;\n                v5 = (int64_t *)(v4 + 40);\n                v3 = *v5;\n                if (v3 >= *(int64_t *)(v4 + 48)) {\n                    // 0x4030a8\n                    result2 = __overflow(g30, (int32_t)v7);\n                } else {\n                    // 0x40303a\n                    *v5 = v3 + 1;\n                    *(char *)v3 = v7;\n                    result2 = v3;\n                }\n            } else {\n                // 0x403064\n                result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g30);\n            }\n        }\n        // 0x403045\n        v2++;\n        v6 = *(char *)v2;\n    }\n    // 0x4030a0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4030d0",
            "funcStartAddr": "4030d0",
            "funcEndAddr": "403272",
            "decompiledFuncCode": "int64_t function_4030d0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    bool v3; // 0x4030d0\n    int64_t v4 = v3 ? -1 : 1; // 0x4030ed\n    int64_t v5 = (int64_t)\"-\"; // 0x4030d0\n    int64_t v6 = a1; // 0x4030d0\n    int64_t v7 = 2; // 0x4030ed\n    unsigned char v8 = *(char *)v6; // 0x4030ed\n    char v9 = *(char *)v5; // 0x4030ed\n    char v10 = v9; // 0x4030ed\n    bool v11 = false; // 0x4030ed\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    *(char *)a3 = 0;\n    int64_t v13; // 0x4030d0\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        int64_t v14 = function_405750(a1, (int64_t *)\"r\"); // 0x40315b\n        if (v14 == 0) {\n            int32_t * err_num = __errno_location(); // 0x403220\n            unsigned char result = *(char *)&g40; // 0x403225\n            if (result != 0) {\n                // 0x403235\n                if (*err_num == 2) {\n                    // 0x403268\n                    *(char *)a3 = 1;\n                    // 0x40313a\n                    return result;\n                }\n            }\n            // 0x40323a\n            error(0, *err_num, \"%s\", (char *)function_407290(0, 3, a1));\n            // 0x40313a\n            return 0;\n        }\n        // 0x40316c\n        function_405720(v14, 2, v1);\n        int64_t v15 = function_4051d0(v14, v2, (int64_t)g36 / 8); // 0x40318a\n        v13 = v14;\n        if ((int32_t)v15 == 0) {\n            int64_t result2 = 1; // 0x40319d\n            if ((int32_t)function_4085e0(v14, v2) != 0) {\n                // 0x40319f\n                error(0, *__errno_location(), \"%s\", (char *)function_407290(0, 3, a1));\n                result2 = 0;\n            }\n            // 0x40313a\n            return result2;\n        }\n    } else {\n        int64_t v16 = (int64_t)g31; // 0x4030fb\n        g45 = 1;\n        function_405720(v16, 2, v1);\n        int64_t v17 = function_4051d0(v16, v2, (int64_t)g36 / 8); // 0x403127\n        v13 = v16;\n        if ((int32_t)v17 == 0) {\n            // 0x40313a\n            return 1;\n        }\n    }\n    int64_t v18 = function_407290(0, 3, a1); // 0x4031e5\n    uint32_t err_num2 = *__errno_location(); // 0x4031fc\n    error(0, err_num2, \"%s\", (char *)v18);\n    if (v13 != (int64_t)g31) {\n        // 0x403212\n        function_4085e0(v13, (int64_t)err_num2);\n    }\n    // 0x40313a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "403675",
            "decompiledFuncCode": "int64_t function_403280(int32_t status) {\n    // 0x403280\n    if (status != 0) {\n        // 0x40329a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4032bf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4032c6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -b, --binary         read in binary mode\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"  -l, --length         digest length in bits; must not exceed the maximum for\\n                       the blake2 algorithm and must be a multiple of 8\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --tag            create a BSD-style checksum\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --text           read in text mode (default)\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following five options are useful only when verifying checksums:\\n      --ignore-missing  don't fail or report status for missing files\\n      --quiet          don't print OK for each successfully verified file\\n      --status         don't output anything, status code shows success\\n      --strict         exit non-zero for improperly formatted checksum lines\\n  -w, --warn           warn about improperly formatted checksum lines\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"\\nThe sums are computed as described in %s.  When checking, the input\\nshould be a former output of this program.  The default mode is to print a\\nline with checksum, a space, a character indicating input mode ('*' for binary,\\n' ' for text or where binary is insignificant), and name for each FILE.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x403451\n    bool v2; // 0x403280\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4034d8\n    int64_t v6 = *(int64_t *)v5; // 0x4034dc\n    int64_t v7 = 6; // 0x4034e2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"b2sum\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4034ee\n        char v11 = *(char *)v9; // 0x4034ee\n        char v12 = v11; // 0x4034ee\n        bool v13 = false; // 0x4034ee\n        while (v10 == v11) {\n            // 0x4034e4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4034ee\n            int64_t v15 = v8 + v3; // 0x4034ee\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4034fa\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4034fa\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40360c;\n        } else {\n            // 0x4035f6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40364b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40355c;\n            } else {\n                goto lab_0x40360c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40355c;\n        } else {\n            // 0x403542\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40364b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40355c;\n            } else {\n                goto lab_0x40355c;\n            }\n        }\n    }\n  lab_0x40360c:\n    // 0x40360c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40359c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4032bf\n    exit(status);\n    // UNREACHABLE\n  lab_0x40355c:\n    // 0x40355c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40359c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4032bf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "404c1d",
            "decompiledFuncCode": "int64_t function_403680(int64_t a1, int64_t a2) {\n    // 0x403680\n    int64_t v1; // bp-224, 0x403680\n    int64_t v2 = &v1; // 0x40368c\n    for (int64_t i = 0; i < 16; i++) {\n        int64_t v3 = 8 * i; // 0x403698\n        *(int64_t *)(v2 - 88 + v3) = *(int64_t *)(v3 + a2);\n    }\n    int64_t v4 = v2 + 40; // 0x4036b4\n    for (int64_t i = 0; i < 8; i++) {\n        int64_t v5 = 8 * i; // 0x4036b0\n        *(int64_t *)(v5 + v4) = *(int64_t *)(v5 + a1);\n    }\n    // 0x4036c3\n    int64_t v6; // 0x403680\n    int64_t v7 = 2 * v6 + v6; // 0x40370a\n    int64_t v8 = 2 * v6 + v6; // 0x40371a\n    uint64_t v9 = v7 ^ 0x510e527fade682d1 ^ *(int64_t *)(a1 + 64); // 0x403724\n    int64_t v10 = v9 / 0x100000000 | 0x100000000 * v9; // 0x403734\n    uint64_t v11 = v8 ^ -0x64fa9773d4c193e1 ^ *(int64_t *)(a1 + 72); // 0x40374b\n    int64_t v12 = v10 + 0x6a09e667f3bcc908; // 0x40374e\n    int64_t v13 = 2 * v6 + v6; // 0x403754\n    int64_t v14 = v11 / 0x100000000 | 0x100000000 * v11; // 0x403759\n    uint64_t v15 = v12 ^ v6; // 0x40375d\n    int64_t v16 = v14 - 0x4498517a7b3558c5; // 0x403763\n    int64_t v17 = v15 / 0x1000000 | 0x10000000000 * v15; // 0x403766\n    uint64_t v18 = v16 ^ v6; // 0x40376a\n    int64_t v19 = v7 + v6 + v17; // 0x40376d\n    int64_t v20 = v18 / 0x1000000 | 0x10000000000 * v18; // 0x403770\n    uint64_t v21 = v19 ^ v10; // 0x403774\n    int64_t v22 = v8 + v6 + v20; // 0x403777\n    int64_t v23 = v21 / 0x10000 | 0x1000000000000 * v21; // 0x40377a\n    uint64_t v24 = v22 ^ v14; // 0x40377e\n    int64_t v25 = v23 + v12; // 0x403781\n    int64_t v26 = v24 / 0x10000 | 0x1000000000000 * v24; // 0x403784\n    uint64_t v27 = v25 ^ v17; // 0x403788\n    int64_t v28 = v26 + v16; // 0x40378b\n    int64_t v29 = v27 / 0x8000000000000000 | 2 * v27; // 0x40378f\n    uint64_t v30 = v28 ^ v20; // 0x403796\n    int64_t v31 = v30 / 0x8000000000000000 | 2 * v30; // 0x4037a8\n    uint64_t v32 = v13 ^ 0x1f83d9abfb41bd6b ^ *(int64_t *)(a1 + 80); // 0x4037ab\n    int64_t v33 = v32 / 0x100000000 | 0x100000000 * v32; // 0x4037b8\n    int64_t v34 = 2 * v6 + v6; // 0x4037c9\n    int64_t v35 = v33 + 0x3c6ef372fe94f82b; // 0x4037ce\n    int64_t v36 = v19 + v6 + v31; // 0x4037d1\n    uint64_t v37 = v35 ^ v6; // 0x4037d7\n    int64_t v38 = v37 / 0x1000000 | 0x10000000000 * v37; // 0x4037e2\n    uint64_t v39 = v34 ^ 0x5be0cd19137e2179 ^ *(int64_t *)(a1 + 88); // 0x4037f0\n    int64_t v40 = v13 + v6 + v38; // 0x4037f3\n    int64_t v41 = v39 / 0x100000000 | 0x100000000 * v39; // 0x403800\n    uint64_t v42 = v40 ^ v33; // 0x403804\n    int64_t v43 = v41 - 0x5ab00ac5a0e2c90f; // 0x403807\n    int64_t v44 = v42 / 0x10000 | 0x1000000000000 * v42; // 0x40380a\n    uint64_t v45 = v43 ^ v6; // 0x40380e\n    int64_t v46 = v44 + v35; // 0x403811\n    int64_t v47 = v45 / 0x1000000 | 0x10000000000 * v45; // 0x403814\n    uint64_t v48 = v46 ^ v38; // 0x403818\n    int64_t v49 = v34 + v6 + v47; // 0x40381b\n    int64_t v50 = v48 / 0x8000000000000000 | 2 * v48; // 0x40381e\n    uint64_t v51 = v49 ^ v41; // 0x403821\n    int64_t v52 = v51 / 0x10000 | 0x1000000000000 * v51; // 0x403824\n    int64_t v53 = v52 + v43; // 0x403828\n    uint64_t v54 = v36 ^ v52; // 0x40382b\n    int64_t v55 = v54 / 0x100000000 | 0x100000000 * v54; // 0x40382e\n    uint64_t v56 = v53 ^ v47; // 0x403832\n    int64_t v57 = v55 + v46; // 0x403835\n    int64_t v58 = v56 / 0x8000000000000000 | 2 * v56; // 0x403838\n    uint64_t v59 = v57 ^ v31; // 0x40383b\n    int64_t v60 = v59 / 0x1000000 | 0x10000000000 * v59; // 0x403848\n    int64_t v61 = v22 + v6 + v50; // 0x40384c\n    int64_t v62 = v36 + v6 + v60; // 0x403854\n    uint64_t v63 = v61 ^ v23; // 0x403857\n    int64_t v64 = v40 + v6 + v58; // 0x40385a\n    uint64_t v65 = v62 ^ v55; // 0x403861\n    int64_t v66 = v63 / 0x100000000 | 0x100000000 * v63; // 0x403864\n    uint64_t v67 = v64 ^ v26; // 0x403868\n    int64_t v68 = v65 / 0x10000 | 0x1000000000000 * v65; // 0x403870\n    int64_t v69 = v67 / 0x100000000 | 0x100000000 * v67; // 0x403874\n    int64_t v70 = v68 + v57; // 0x403878\n    int64_t v71 = v66 + v53; // 0x403880\n    int64_t v72 = v69 + v25; // 0x403884\n    uint64_t v73 = v71 ^ v50; // 0x403887\n    uint64_t v74 = v72 ^ v58; // 0x40388a\n    uint64_t v75 = v70 ^ v60; // 0x40388d\n    int64_t v76 = v73 / 0x1000000 | 0x10000000000 * v73; // 0x403890\n    int64_t v77 = v74 / 0x1000000 | 0x10000000000 * v74; // 0x403894\n    int64_t v78 = v61 + v1 + v76; // 0x403898\n    int64_t v79 = v64 + v6 + v77; // 0x40389b\n    int64_t v80 = v75 / 0x8000000000000000 | 2 * v75; // 0x40389e\n    uint64_t v81 = v78 ^ v66; // 0x4038a1\n    uint64_t v82 = v79 ^ v69; // 0x4038a4\n    int64_t v83 = v81 / 0x10000 | 0x1000000000000 * v81; // 0x4038a7\n    int64_t v84 = v82 / 0x10000 | 0x1000000000000 * v82; // 0x4038ab\n    int64_t v85 = v83 + v71; // 0x4038af\n    uint64_t v86 = v85 ^ v76; // 0x4038b9\n    int64_t v87 = v86 / 0x8000000000000000 | 2 * v86; // 0x4038c1\n    int64_t v88 = v84 + v72; // 0x4038c4\n    int64_t v89 = v49 + v6 + v29; // 0x4038d1\n    uint64_t v90 = v88 ^ v77; // 0x4038d9\n    uint64_t v91 = v89 ^ v44; // 0x4038e1\n    int64_t v92 = v90 / 0x8000000000000000 | 2 * v90; // 0x4038e9\n    int64_t v93 = v91 / 0x100000000 | 0x100000000 * v91; // 0x4038ec\n    int64_t v94 = v93 + v28; // 0x4038f0\n    uint64_t v95 = v94 ^ v29; // 0x4038f3\n    int64_t v96 = v95 / 0x1000000 | 0x10000000000 * v95; // 0x4038f6\n    int64_t v97 = v89 + v6 + v96; // 0x4038fa\n    uint64_t v98 = v97 ^ v93; // 0x4038fd\n    int64_t v99 = v98 / 0x10000 | 0x1000000000000 * v98; // 0x403900\n    int64_t v100 = v99 + v94; // 0x403904\n    uint64_t v101 = v100 ^ v96; // 0x403907\n    int64_t v102 = v101 / 0x8000000000000000 | 2 * v101; // 0x40390a\n    int64_t v103 = v62 + v6 + v102; // 0x40390d\n    uint64_t v104 = v103 ^ v83; // 0x403910\n    int64_t v105 = v104 / 0x100000000 | 0x100000000 * v104; // 0x403918\n    int64_t v106 = v105 + v88; // 0x40391c\n    uint64_t v107 = v106 ^ v102; // 0x40391f\n    int64_t v108 = v107 / 0x1000000 | 0x10000000000 * v107; // 0x403922\n    int64_t v109 = v103 + v6 + v108; // 0x403926\n    uint64_t v110 = v109 ^ v105; // 0x403929\n    int64_t v111 = v110 / 0x10000 | 0x1000000000000 * v110; // 0x40392c\n    int64_t v112 = v111 + v106; // 0x403930\n    uint64_t v113 = v112 ^ v108; // 0x403933\n    int64_t v114 = v113 / 0x8000000000000000 | 2 * v113; // 0x403936\n    int64_t v115 = v78 + v6 + v80; // 0x403939\n    uint64_t v116 = v115 ^ v84; // 0x403946\n    int64_t v117 = v79 + v6 + v87; // 0x403949\n    int64_t v118 = v116 / 0x100000000 | 0x100000000 * v116; // 0x403956\n    uint64_t v119 = v117 ^ v99; // 0x40395a\n    int64_t v120 = v97 + v6 + v92; // 0x403962\n    int64_t v121 = v118 + v100; // 0x403965\n    int64_t v122 = v119 / 0x100000000 | 0x100000000 * v119; // 0x403968\n    uint64_t v123 = v121 ^ v80; // 0x403971\n    int64_t v124 = v122 + v70; // 0x403974\n    int64_t v125 = v123 / 0x1000000 | 0x10000000000 * v123; // 0x403977\n    uint64_t v126 = v124 ^ v87; // 0x40397b\n    uint64_t v127 = v120 ^ v68; // 0x40397e\n    int64_t v128 = v126 / 0x1000000 | 0x10000000000 * v126; // 0x403981\n    int64_t v129 = v115 + v6 + v125; // 0x403985\n    int64_t v130 = v127 / 0x100000000 | 0x100000000 * v127; // 0x403988\n    uint64_t v131 = v129 ^ v118; // 0x40398c\n    int64_t v132 = v117 + v6 + v128; // 0x40398f\n    int64_t v133 = v131 / 0x10000 | 0x1000000000000 * v131; // 0x403992\n    uint64_t v134 = v132 ^ v122; // 0x403996\n    int64_t v135 = v133 + v121; // 0x403999\n    int64_t v136 = v134 / 0x10000 | 0x1000000000000 * v134; // 0x40399c\n    uint64_t v137 = v135 ^ v125; // 0x4039a5\n    int64_t v138 = v136 + v124; // 0x4039ad\n    uint64_t v139 = v138 ^ v128; // 0x4039b0\n    int64_t v140 = v137 / 0x8000000000000000 | 2 * v137; // 0x4039b3\n    int64_t v141 = v130 + v85; // 0x4039b6\n    int64_t v142 = v139 / 0x8000000000000000 | 2 * v139; // 0x4039b9\n    uint64_t v143 = v141 ^ v92; // 0x4039bc\n    int64_t v144 = v143 / 0x1000000 | 0x10000000000 * v143; // 0x4039c9\n    int64_t v145 = v109 + v6 + v140; // 0x4039cd\n    int64_t v146 = v120 + v6 + v144; // 0x4039d5\n    int64_t v147 = v129 + v6 + v142; // 0x4039d8\n    uint64_t v148 = v146 ^ v130; // 0x4039db\n    uint64_t v149 = v147 ^ v111; // 0x4039de\n    int64_t v150 = v148 / 0x10000 | 0x1000000000000 * v148; // 0x4039e6\n    int64_t v151 = v149 / 0x100000000 | 0x100000000 * v149; // 0x4039ea\n    int64_t v152 = v150 + v141; // 0x4039ee\n    uint64_t v153 = v145 ^ v150; // 0x4039f1\n    int64_t v154 = v153 / 0x100000000 | 0x100000000 * v153; // 0x4039f9\n    uint64_t v155 = v152 ^ v144; // 0x4039fd\n    int64_t v156 = v151 + v152; // 0x403a00\n    int64_t v157 = v154 + v138; // 0x403a03\n    uint64_t v158 = v156 ^ v142; // 0x403a06\n    int64_t v159 = v155 / 0x8000000000000000 | 2 * v155; // 0x403a09\n    uint64_t v160 = v157 ^ v140; // 0x403a0c\n    int64_t v161 = v158 / 0x1000000 | 0x10000000000 * v158; // 0x403a0f\n    int64_t v162 = v160 / 0x1000000 | 0x10000000000 * v160; // 0x403a13\n    int64_t v163 = v147 + v6 + v161; // 0x403a17\n    int64_t v164 = v145 + v6 + v162; // 0x403a1a\n    uint64_t v165 = v164 ^ v154; // 0x403a1d\n    int64_t v166 = v165 / 0x10000 | 0x1000000000000 * v165; // 0x403a20\n    int64_t v167 = v166 + v157; // 0x403a24\n    uint64_t v168 = v167 ^ v162; // 0x403a31\n    int64_t v169 = v168 / 0x8000000000000000 | 2 * v168; // 0x403a34\n    uint64_t v170 = v163 ^ v151; // 0x403a37\n    int64_t v171 = v170 / 0x10000 | 0x1000000000000 * v170; // 0x403a43\n    int64_t v172 = v132 + v1 + v159; // 0x403a47\n    int64_t v173 = v146 + v6 + v114; // 0x403a4a\n    int64_t v174 = v171 + v156; // 0x403a4d\n    uint64_t v175 = v172 ^ v133; // 0x403a50\n    uint64_t v176 = v173 ^ v136; // 0x403a53\n    int64_t v177 = v175 / 0x100000000 | 0x100000000 * v175; // 0x403a60\n    uint64_t v178 = v174 ^ v161; // 0x403a64\n    int64_t v179 = v176 / 0x100000000 | 0x100000000 * v176; // 0x403a67\n    int64_t v180 = v177 + v112; // 0x403a70\n    int64_t v181 = v178 / 0x8000000000000000 | 2 * v178; // 0x403a78\n    uint64_t v182 = v180 ^ v159; // 0x403a7b\n    int64_t v183 = v179 + v135; // 0x403a7e\n    int64_t v184 = v182 / 0x1000000 | 0x10000000000 * v182; // 0x403a81\n    uint64_t v185 = v183 ^ v114; // 0x403a85\n    int64_t v186 = v172 + v6 + v184; // 0x403a88\n    int64_t v187 = v185 / 0x1000000 | 0x10000000000 * v185; // 0x403a8b\n    uint64_t v188 = v186 ^ v177; // 0x403a8f\n    int64_t v189 = v173 + v6 + v187; // 0x403a92\n    int64_t v190 = v188 / 0x10000 | 0x1000000000000 * v188; // 0x403a95\n    uint64_t v191 = v189 ^ v179; // 0x403a99\n    int64_t v192 = v190 + v180; // 0x403a9c\n    int64_t v193 = v191 / 0x10000 | 0x1000000000000 * v191; // 0x403a9f\n    uint64_t v194 = v192 ^ v184; // 0x403aa3\n    int64_t v195 = v193 + v183; // 0x403aa6\n    int64_t v196 = v194 / 0x8000000000000000 | 2 * v194; // 0x403aa9\n    uint64_t v197 = v195 ^ v187; // 0x403aac\n    int64_t v198 = v197 / 0x8000000000000000 | 2 * v197; // 0x403aaf\n    int64_t v199 = v164 + v1 + v198; // 0x403abb\n    int64_t v200 = v163 + v6 + v169; // 0x403abe\n    uint64_t v201 = v199 ^ v171; // 0x403ac1\n    uint64_t v202 = v200 ^ v190; // 0x403ac4\n    int64_t v203 = v201 / 0x100000000 | 0x100000000 * v201; // 0x403ad1\n    int64_t v204 = v202 / 0x100000000 | 0x100000000 * v202; // 0x403ad5\n    int64_t v205 = v203 + v192; // 0x403ad9\n    int64_t v206 = v204 + v195; // 0x403adc\n    uint64_t v207 = v205 ^ v198; // 0x403adf\n    uint64_t v208 = v206 ^ v169; // 0x403ae2\n    int64_t v209 = v207 / 0x1000000 | 0x10000000000 * v207; // 0x403ae5\n    int64_t v210 = v208 / 0x1000000 | 0x10000000000 * v208; // 0x403ae9\n    int64_t v211 = v199 + v6 + v209; // 0x403aed\n    int64_t v212 = v200 + v6 + v210; // 0x403af0\n    uint64_t v213 = v211 ^ v203; // 0x403af3\n    uint64_t v214 = v212 ^ v204; // 0x403af6\n    int64_t v215 = v213 / 0x10000 | 0x1000000000000 * v213; // 0x403af9\n    int64_t v216 = v214 / 0x10000 | 0x1000000000000 * v214; // 0x403afd\n    int64_t v217 = v215 + v205; // 0x403b01\n    int64_t v218 = v216 + v206; // 0x403b04\n    uint64_t v219 = v217 ^ v209; // 0x403b07\n    uint64_t v220 = v218 ^ v210; // 0x403b0f\n    int64_t v221 = v219 / 0x8000000000000000 | 2 * v219; // 0x403b12\n    int64_t v222 = v220 / 0x8000000000000000 | 2 * v220; // 0x403b15\n    int64_t v223 = v186 + v6 + v181; // 0x403b22\n    uint64_t v224 = v223 ^ v193; // 0x403b2f\n    int64_t v225 = v224 / 0x100000000 | 0x100000000 * v224; // 0x403b32\n    int64_t v226 = v189 + v6 + v196; // 0x403b40\n    int64_t v227 = v225 + v167; // 0x403b43\n    uint64_t v228 = v226 ^ v166; // 0x403b4b\n    uint64_t v229 = v227 ^ v181; // 0x403b4e\n    int64_t v230 = v211 + v6 + v222; // 0x403b56\n    int64_t v231 = v228 / 0x100000000 | 0x100000000 * v228; // 0x403b59\n    int64_t v232 = v229 / 0x1000000 | 0x10000000000 * v229; // 0x403b5d\n    int64_t v233 = v231 + v174; // 0x403b61\n    int64_t v234 = v223 + v6 + v232; // 0x403b64\n    uint64_t v235 = v233 ^ v196; // 0x403b67\n    uint64_t v236 = v234 ^ v225; // 0x403b6a\n    int64_t v237 = v235 / 0x1000000 | 0x10000000000 * v235; // 0x403b6d\n    int64_t v238 = v236 / 0x10000 | 0x1000000000000 * v236; // 0x403b71\n    int64_t v239 = v226 + v6 + v237; // 0x403b75\n    int64_t v240 = v238 + v227; // 0x403b78\n    uint64_t v241 = v239 ^ v231; // 0x403b7b\n    uint64_t v242 = v240 ^ v232; // 0x403b7e\n    int64_t v243 = v241 / 0x10000 | 0x1000000000000 * v241; // 0x403b81\n    int64_t v244 = v242 / 0x8000000000000000 | 2 * v242; // 0x403b85\n    int64_t v245 = v243 + v233; // 0x403b88\n    uint64_t v246 = v230 ^ v243; // 0x403b8b\n    int64_t v247 = v246 / 0x100000000 | 0x100000000 * v246; // 0x403b8e\n    uint64_t v248 = v245 ^ v237; // 0x403b92\n    int64_t v249 = v247 + v240; // 0x403b95\n    int64_t v250 = v248 / 0x8000000000000000 | 2 * v248; // 0x403b98\n    uint64_t v251 = v249 ^ v222; // 0x403b9b\n    int64_t v252 = v251 / 0x1000000 | 0x10000000000 * v251; // 0x403b9e\n    int64_t v253 = v212 + v6 + v244; // 0x403bac\n    int64_t v254 = v230 + v6 + v252; // 0x403bb4\n    uint64_t v255 = v253 ^ v215; // 0x403bb7\n    int64_t v256 = v234 + v6 + v250; // 0x403bba\n    uint64_t v257 = v254 ^ v247; // 0x403bc2\n    int64_t v258 = v255 / 0x100000000 | 0x100000000 * v255; // 0x403bc5\n    uint64_t v259 = v256 ^ v216; // 0x403bc9\n    int64_t v260 = v257 / 0x10000 | 0x1000000000000 * v257; // 0x403bd1\n    int64_t v261 = v258 + v245; // 0x403bd5\n    int64_t v262 = v259 / 0x100000000 | 0x100000000 * v259; // 0x403bd8\n    int64_t v263 = v260 + v249; // 0x403bdc\n    uint64_t v264 = v261 ^ v244; // 0x403be4\n    int64_t v265 = v262 + v217; // 0x403be7\n    uint64_t v266 = v263 ^ v252; // 0x403bef\n    int64_t v267 = v264 / 0x1000000 | 0x10000000000 * v264; // 0x403bf2\n    uint64_t v268 = v265 ^ v250; // 0x403bf6\n    int64_t v269 = v266 / 0x8000000000000000 | 2 * v266; // 0x403bf9\n    int64_t v270 = v253 + v6 + v267; // 0x403bfc\n    int64_t v271 = v268 / 0x1000000 | 0x10000000000 * v268; // 0x403bff\n    uint64_t v272 = v270 ^ v258; // 0x403c03\n    int64_t v273 = v256 + v6 + v271; // 0x403c06\n    int64_t v274 = v272 / 0x10000 | 0x1000000000000 * v272; // 0x403c09\n    uint64_t v275 = v273 ^ v262; // 0x403c0d\n    int64_t v276 = v274 + v261; // 0x403c10\n    int64_t v277 = v275 / 0x10000 | 0x1000000000000 * v275; // 0x403c13\n    uint64_t v278 = v276 ^ v267; // 0x403c17\n    int64_t v279 = v278 / 0x8000000000000000 | 2 * v278; // 0x403c24\n    int64_t v280 = v277 + v265; // 0x403c27\n    int64_t v281 = v239 + v6 + v221; // 0x403c34\n    uint64_t v282 = v280 ^ v271; // 0x403c37\n    uint64_t v283 = v281 ^ v238; // 0x403c3f\n    int64_t v284 = v282 / 0x8000000000000000 | 2 * v282; // 0x403c47\n    int64_t v285 = v283 / 0x100000000 | 0x100000000 * v283; // 0x403c4a\n    int64_t v286 = v285 + v218; // 0x403c4e\n    uint64_t v287 = v286 ^ v221; // 0x403c51\n    int64_t v288 = v287 / 0x1000000 | 0x10000000000 * v287; // 0x403c54\n    int64_t v289 = v281 + v6 + v288; // 0x403c58\n    uint64_t v290 = v289 ^ v285; // 0x403c5b\n    int64_t v291 = v290 / 0x10000 | 0x1000000000000 * v290; // 0x403c5e\n    int64_t v292 = v291 + v286; // 0x403c62\n    uint64_t v293 = v292 ^ v288; // 0x403c65\n    int64_t v294 = v293 / 0x8000000000000000 | 2 * v293; // 0x403c68\n    int64_t v295 = v254 + v6 + v294; // 0x403c6b\n    uint64_t v296 = v295 ^ v274; // 0x403c6e\n    int64_t v297 = v296 / 0x100000000 | 0x100000000 * v296; // 0x403c76\n    int64_t v298 = v297 + v280; // 0x403c7a\n    uint64_t v299 = v298 ^ v294; // 0x403c7d\n    int64_t v300 = v299 / 0x1000000 | 0x10000000000 * v299; // 0x403c80\n    int64_t v301 = v295 + v6 + v300; // 0x403c84\n    uint64_t v302 = v301 ^ v297; // 0x403c87\n    int64_t v303 = v302 / 0x10000 | 0x1000000000000 * v302; // 0x403c8a\n    int64_t v304 = v303 + v298; // 0x403c8e\n    uint64_t v305 = v304 ^ v300; // 0x403c91\n    int64_t v306 = v305 / 0x8000000000000000 | 2 * v305; // 0x403c94\n    int64_t v307 = v270 + v6 + v269; // 0x403c97\n    uint64_t v308 = v307 ^ v277; // 0x403ca3\n    int64_t v309 = v273 + v6 + v279; // 0x403ca6\n    int64_t v310 = v308 / 0x100000000 | 0x100000000 * v308; // 0x403cb3\n    uint64_t v311 = v309 ^ v291; // 0x403cb7\n    int64_t v312 = v289 + v1 + v284; // 0x403cbf\n    int64_t v313 = v310 + v292; // 0x403cc2\n    int64_t v314 = v311 / 0x100000000 | 0x100000000 * v311; // 0x403cc5\n    uint64_t v315 = v313 ^ v269; // 0x403cce\n    int64_t v316 = v314 + v263; // 0x403cd1\n    int64_t v317 = v315 / 0x1000000 | 0x10000000000 * v315; // 0x403cd4\n    uint64_t v318 = v316 ^ v279; // 0x403cd8\n    uint64_t v319 = v312 ^ v260; // 0x403cdb\n    int64_t v320 = v318 / 0x1000000 | 0x10000000000 * v318; // 0x403cde\n    int64_t v321 = v307 + v6 + v317; // 0x403ce2\n    int64_t v322 = v319 / 0x100000000 | 0x100000000 * v319; // 0x403ce5\n    uint64_t v323 = v321 ^ v310; // 0x403ce9\n    int64_t v324 = v309 + v6 + v320; // 0x403cec\n    int64_t v325 = v323 / 0x10000 | 0x1000000000000 * v323; // 0x403cef\n    uint64_t v326 = v324 ^ v314; // 0x403cf3\n    int64_t v327 = v325 + v313; // 0x403cf6\n    int64_t v328 = v326 / 0x10000 | 0x1000000000000 * v326; // 0x403cf9\n    uint64_t v329 = v327 ^ v317; // 0x403cfd\n    int64_t v330 = v328 + v316; // 0x403d0a\n    uint64_t v331 = v330 ^ v320; // 0x403d0d\n    int64_t v332 = v329 / 0x8000000000000000 | 2 * v329; // 0x403d10\n    int64_t v333 = v322 + v276; // 0x403d13\n    int64_t v334 = v331 / 0x8000000000000000 | 2 * v331; // 0x403d16\n    uint64_t v335 = v333 ^ v284; // 0x403d19\n    int64_t v336 = v335 / 0x1000000 | 0x10000000000 * v335; // 0x403d26\n    int64_t v337 = v301 + v6 + v332; // 0x403d2a\n    int64_t v338 = v312 + v6 + v336; // 0x403d2d\n    uint64_t v339 = v338 ^ v322; // 0x403d30\n    int64_t v340 = v339 / 0x10000 | 0x1000000000000 * v339; // 0x403d33\n    int64_t v341 = v340 + v333; // 0x403d37\n    uint64_t v342 = v337 ^ v340; // 0x403d3a\n    int64_t v343 = v342 / 0x100000000 | 0x100000000 * v342; // 0x403d42\n    uint64_t v344 = v341 ^ v336; // 0x403d46\n    int64_t v345 = v343 + v330; // 0x403d49\n    int64_t v346 = v344 / 0x8000000000000000 | 2 * v344; // 0x403d4c\n    uint64_t v347 = v345 ^ v332; // 0x403d4f\n    int64_t v348 = v347 / 0x1000000 | 0x10000000000 * v347; // 0x403d52\n    int64_t v349 = v337 + v6 + v348; // 0x403d56\n    uint64_t v350 = v349 ^ v343; // 0x403d59\n    int64_t v351 = v350 / 0x10000 | 0x1000000000000 * v350; // 0x403d5c\n    int64_t v352 = v351 + v345; // 0x403d6a\n    int64_t v353 = v321 + v6 + v334; // 0x403d6d\n    uint64_t v354 = v352 ^ v348; // 0x403d70\n    uint64_t v355 = v353 ^ v303; // 0x403d78\n    int64_t v356 = v354 / 0x8000000000000000 | 2 * v354; // 0x403d80\n    int64_t v357 = v355 / 0x100000000 | 0x100000000 * v355; // 0x403d83\n    int64_t v358 = v357 + v341; // 0x403d87\n    uint64_t v359 = v358 ^ v334; // 0x403d8a\n    int64_t v360 = v359 / 0x1000000 | 0x10000000000 * v359; // 0x403d8d\n    int64_t v361 = v353 + v6 + v360; // 0x403d91\n    uint64_t v362 = v361 ^ v357; // 0x403d94\n    int64_t v363 = v362 / 0x10000 | 0x1000000000000 * v362; // 0x403da1\n    int64_t v364 = v324 + v6 + v346; // 0x403da5\n    int64_t v365 = v338 + v6 + v306; // 0x403da8\n    int64_t v366 = v363 + v358; // 0x403dab\n    uint64_t v367 = v364 ^ v325; // 0x403dae\n    uint64_t v368 = v365 ^ v328; // 0x403db1\n    int64_t v369 = v367 / 0x100000000 | 0x100000000 * v367; // 0x403dbe\n    uint64_t v370 = v366 ^ v360; // 0x403dc2\n    int64_t v371 = v368 / 0x100000000 | 0x100000000 * v368; // 0x403dc5\n    int64_t v372 = v369 + v304; // 0x403dce\n    int64_t v373 = v370 / 0x8000000000000000 | 2 * v370; // 0x403dd6\n    uint64_t v374 = v372 ^ v346; // 0x403dd9\n    int64_t v375 = v371 + v327; // 0x403ddc\n    int64_t v376 = v374 / 0x1000000 | 0x10000000000 * v374; // 0x403ddf\n    uint64_t v377 = v375 ^ v306; // 0x403de3\n    int64_t v378 = v364 + v6 + v376; // 0x403de6\n    int64_t v379 = v377 / 0x1000000 | 0x10000000000 * v377; // 0x403de9\n    uint64_t v380 = v378 ^ v369; // 0x403ded\n    int64_t v381 = v365 + v6 + v379; // 0x403df0\n    int64_t v382 = v380 / 0x10000 | 0x1000000000000 * v380; // 0x403df3\n    uint64_t v383 = v381 ^ v371; // 0x403df7\n    int64_t v384 = v382 + v372; // 0x403dfa\n    int64_t v385 = v383 / 0x10000 | 0x1000000000000 * v383; // 0x403dfd\n    uint64_t v386 = v384 ^ v376; // 0x403e01\n    int64_t v387 = v385 + v375; // 0x403e04\n    int64_t v388 = v386 / 0x8000000000000000 | 2 * v386; // 0x403e07\n    uint64_t v389 = v387 ^ v379; // 0x403e0a\n    int64_t v390 = v389 / 0x8000000000000000 | 2 * v389; // 0x403e0d\n    int64_t v391 = v349 + v6 + v390; // 0x403e1a\n    int64_t v392 = v361 + v6 + v356; // 0x403e1d\n    uint64_t v393 = v391 ^ v363; // 0x403e25\n    uint64_t v394 = v392 ^ v382; // 0x403e28\n    int64_t v395 = v393 / 0x100000000 | 0x100000000 * v393; // 0x403e35\n    int64_t v396 = v394 / 0x100000000 | 0x100000000 * v394; // 0x403e39\n    int64_t v397 = v378 + v6 + v373; // 0x403e3d\n    int64_t v398 = v395 + v384; // 0x403e40\n    int64_t v399 = v396 + v387; // 0x403e43\n    uint64_t v400 = v397 ^ v385; // 0x403e46\n    uint64_t v401 = v398 ^ v390; // 0x403e49\n    uint64_t v402 = v399 ^ v356; // 0x403e4c\n    int64_t v403 = v401 / 0x1000000 | 0x10000000000 * v401; // 0x403e4f\n    int64_t v404 = v402 / 0x1000000 | 0x10000000000 * v402; // 0x403e53\n    int64_t v405 = v391 + v6 + v403; // 0x403e57\n    int64_t v406 = v392 + v6 + v404; // 0x403e5a\n    uint64_t v407 = v405 ^ v395; // 0x403e5d\n    uint64_t v408 = v406 ^ v396; // 0x403e60\n    int64_t v409 = v407 / 0x10000 | 0x1000000000000 * v407; // 0x403e63\n    int64_t v410 = v408 / 0x10000 | 0x1000000000000 * v408; // 0x403e67\n    int64_t v411 = v409 + v398; // 0x403e6b\n    int64_t v412 = v410 + v399; // 0x403e6e\n    uint64_t v413 = v411 ^ v403; // 0x403e71\n    uint64_t v414 = v412 ^ v404; // 0x403e74\n    int64_t v415 = v413 / 0x8000000000000000 | 2 * v413; // 0x403e81\n    int64_t v416 = v414 / 0x8000000000000000 | 2 * v414; // 0x403e84\n    int64_t v417 = v400 / 0x100000000 | 0x100000000 * v400; // 0x403e8c\n    int64_t v418 = v417 + v352; // 0x403e9a\n    int64_t v419 = v381 + v6 + v388; // 0x403ea2\n    uint64_t v420 = v418 ^ v373; // 0x403ea5\n    uint64_t v421 = v419 ^ v351; // 0x403ead\n    int64_t v422 = v420 / 0x1000000 | 0x10000000000 * v420; // 0x403eb5\n    int64_t v423 = v405 + v6 + v416; // 0x403eb9\n    int64_t v424 = v421 / 0x100000000 | 0x100000000 * v421; // 0x403ebc\n    int64_t v425 = v397 + v6 + v422; // 0x403ec0\n    int64_t v426 = v424 + v366; // 0x403ec3\n    uint64_t v427 = v425 ^ v417; // 0x403ec6\n    uint64_t v428 = v426 ^ v388; // 0x403ec9\n    int64_t v429 = v427 / 0x10000 | 0x1000000000000 * v427; // 0x403ecc\n    int64_t v430 = v428 / 0x1000000 | 0x10000000000 * v428; // 0x403ed0\n    int64_t v431 = v429 + v418; // 0x403ed4\n    int64_t v432 = v419 + v6 + v430; // 0x403ed7\n    uint64_t v433 = v431 ^ v422; // 0x403eda\n    uint64_t v434 = v432 ^ v424; // 0x403edd\n    int64_t v435 = v433 / 0x8000000000000000 | 2 * v433; // 0x403ee0\n    int64_t v436 = v434 / 0x10000 | 0x1000000000000 * v434; // 0x403ee3\n    int64_t v437 = v436 + v426; // 0x403ee7\n    uint64_t v438 = v423 ^ v436; // 0x403eea\n    int64_t v439 = v438 / 0x100000000 | 0x100000000 * v438; // 0x403eed\n    uint64_t v440 = v437 ^ v430; // 0x403ef1\n    int64_t v441 = v439 + v431; // 0x403ef4\n    int64_t v442 = v440 / 0x8000000000000000 | 2 * v440; // 0x403ef7\n    uint64_t v443 = v441 ^ v416; // 0x403efa\n    int64_t v444 = v443 / 0x1000000 | 0x10000000000 * v443; // 0x403efd\n    int64_t v445 = v406 + v1 + v435; // 0x403f0a\n    int64_t v446 = v423 + v6 + v444; // 0x403f12\n    uint64_t v447 = v445 ^ v409; // 0x403f15\n    int64_t v448 = v425 + v6 + v442; // 0x403f18\n    uint64_t v449 = v446 ^ v439; // 0x403f20\n    int64_t v450 = v447 / 0x100000000 | 0x100000000 * v447; // 0x403f23\n    uint64_t v451 = v448 ^ v410; // 0x403f27\n    int64_t v452 = v449 / 0x10000 | 0x1000000000000 * v449; // 0x403f2f\n    int64_t v453 = v450 + v437; // 0x403f33\n    int64_t v454 = v451 / 0x100000000 | 0x100000000 * v451; // 0x403f36\n    int64_t v455 = v452 + v441; // 0x403f3a\n    uint64_t v456 = v453 ^ v435; // 0x403f42\n    int64_t v457 = v454 + v411; // 0x403f45\n    uint64_t v458 = v455 ^ v444; // 0x403f48\n    int64_t v459 = v456 / 0x1000000 | 0x10000000000 * v456; // 0x403f50\n    uint64_t v460 = v457 ^ v442; // 0x403f54\n    int64_t v461 = v458 / 0x8000000000000000 | 2 * v458; // 0x403f57\n    int64_t v462 = v445 + v6 + v459; // 0x403f5a\n    int64_t v463 = v460 / 0x1000000 | 0x10000000000 * v460; // 0x403f5d\n    uint64_t v464 = v462 ^ v450; // 0x403f61\n    int64_t v465 = v448 + v6 + v463; // 0x403f64\n    int64_t v466 = v464 / 0x10000 | 0x1000000000000 * v464; // 0x403f67\n    uint64_t v467 = v465 ^ v454; // 0x403f6b\n    int64_t v468 = v466 + v453; // 0x403f6e\n    int64_t v469 = v467 / 0x10000 | 0x1000000000000 * v467; // 0x403f71\n    uint64_t v470 = v468 ^ v459; // 0x403f75\n    int64_t v471 = v470 / 0x8000000000000000 | 2 * v470; // 0x403f82\n    int64_t v472 = v469 + v457; // 0x403f85\n    int64_t v473 = v432 + v6 + v415; // 0x403f8d\n    uint64_t v474 = v472 ^ v463; // 0x403f90\n    uint64_t v475 = v473 ^ v429; // 0x403f93\n    int64_t v476 = v474 / 0x8000000000000000 | 2 * v474; // 0x403fa0\n    int64_t v477 = v475 / 0x100000000 | 0x100000000 * v475; // 0x403fa3\n    int64_t v478 = v477 + v412; // 0x403fac\n    uint64_t v479 = v478 ^ v415; // 0x403faf\n    int64_t v480 = v479 / 0x1000000 | 0x10000000000 * v479; // 0x403fb2\n    int64_t v481 = v473 + v6 + v480; // 0x403fb6\n    uint64_t v482 = v481 ^ v477; // 0x403fb9\n    int64_t v483 = v482 / 0x10000 | 0x1000000000000 * v482; // 0x403fbc\n    int64_t v484 = v483 + v478; // 0x403fc0\n    uint64_t v485 = v484 ^ v480; // 0x403fc3\n    int64_t v486 = v485 / 0x8000000000000000 | 2 * v485; // 0x403fc6\n    int64_t v487 = v446 + v6 + v486; // 0x403fc9\n    uint64_t v488 = v487 ^ v466; // 0x403fcc\n    int64_t v489 = v488 / 0x100000000 | 0x100000000 * v488; // 0x403fd4\n    int64_t v490 = v489 + v472; // 0x403fd8\n    uint64_t v491 = v490 ^ v486; // 0x403fdb\n    int64_t v492 = v491 / 0x1000000 | 0x10000000000 * v491; // 0x403fde\n    int64_t v493 = v487 + v6 + v492; // 0x403fe2\n    uint64_t v494 = v493 ^ v489; // 0x403fe5\n    int64_t v495 = v494 / 0x10000 | 0x1000000000000 * v494; // 0x403fe8\n    int64_t v496 = v495 + v490; // 0x403fec\n    uint64_t v497 = v496 ^ v492; // 0x403fef\n    int64_t v498 = v497 / 0x8000000000000000 | 2 * v497; // 0x403ff2\n    int64_t v499 = v462 + v6 + v461; // 0x403ff5\n    uint64_t v500 = v499 ^ v469; // 0x404002\n    int64_t v501 = v465 + v6 + v471; // 0x404005\n    int64_t v502 = v500 / 0x100000000 | 0x100000000 * v500; // 0x404012\n    uint64_t v503 = v501 ^ v483; // 0x404016\n    int64_t v504 = v502 + v484; // 0x404022\n    int64_t v505 = v503 / 0x100000000 | 0x100000000 * v503; // 0x404025\n    int64_t v506 = v481 + v6 + v476; // 0x404029\n    uint64_t v507 = v504 ^ v461; // 0x40402c\n    int64_t v508 = v505 + v455; // 0x40402f\n    uint64_t v509 = v506 ^ v452; // 0x404032\n    int64_t v510 = v507 / 0x1000000 | 0x10000000000 * v507; // 0x404035\n    uint64_t v511 = v508 ^ v471; // 0x404039\n    int64_t v512 = v509 / 0x100000000 | 0x100000000 * v509; // 0x40403c\n    int64_t v513 = v499 + v6 + v510; // 0x404040\n    int64_t v514 = v511 / 0x1000000 | 0x10000000000 * v511; // 0x404043\n    uint64_t v515 = v513 ^ v502; // 0x404047\n    int64_t v516 = v501 + v1 + v514; // 0x40404a\n    int64_t v517 = v515 / 0x10000 | 0x1000000000000 * v515; // 0x40404d\n    uint64_t v518 = v516 ^ v505; // 0x404051\n    int64_t v519 = v517 + v504; // 0x404054\n    int64_t v520 = v518 / 0x10000 | 0x1000000000000 * v518; // 0x404057\n    uint64_t v521 = v519 ^ v510; // 0x404060\n    int64_t v522 = v520 + v508; // 0x404068\n    uint64_t v523 = v522 ^ v514; // 0x40406b\n    int64_t v524 = v521 / 0x8000000000000000 | 2 * v521; // 0x40406e\n    int64_t v525 = v512 + v468; // 0x404071\n    int64_t v526 = v523 / 0x8000000000000000 | 2 * v523; // 0x404074\n    uint64_t v527 = v525 ^ v476; // 0x404077\n    int64_t v528 = v527 / 0x1000000 | 0x10000000000 * v527; // 0x404084\n    int64_t v529 = v493 + v6 + v524; // 0x404088\n    int64_t v530 = v506 + v6 + v528; // 0x404090\n    int64_t v531 = v513 + v6 + v526; // 0x404093\n    uint64_t v532 = v530 ^ v512; // 0x404096\n    uint64_t v533 = v531 ^ v495; // 0x404099\n    int64_t v534 = v532 / 0x10000 | 0x1000000000000 * v532; // 0x4040a1\n    int64_t v535 = v533 / 0x100000000 | 0x100000000 * v533; // 0x4040a5\n    int64_t v536 = v534 + v525; // 0x4040a9\n    uint64_t v537 = v529 ^ v534; // 0x4040ac\n    int64_t v538 = v537 / 0x100000000 | 0x100000000 * v537; // 0x4040b4\n    uint64_t v539 = v536 ^ v528; // 0x4040b8\n    int64_t v540 = v535 + v536; // 0x4040bb\n    int64_t v541 = v538 + v522; // 0x4040be\n    uint64_t v542 = v540 ^ v526; // 0x4040c1\n    int64_t v543 = v539 / 0x8000000000000000 | 2 * v539; // 0x4040c4\n    uint64_t v544 = v541 ^ v524; // 0x4040c7\n    int64_t v545 = v542 / 0x1000000 | 0x10000000000 * v542; // 0x4040ca\n    int64_t v546 = v544 / 0x1000000 | 0x10000000000 * v544; // 0x4040ce\n    int64_t v547 = v531 + v6 + v545; // 0x4040d2\n    int64_t v548 = v529 + v6 + v546; // 0x4040d5\n    uint64_t v549 = v548 ^ v538; // 0x4040d8\n    int64_t v550 = v549 / 0x10000 | 0x1000000000000 * v549; // 0x4040db\n    int64_t v551 = v550 + v541; // 0x4040df\n    uint64_t v552 = v551 ^ v546; // 0x4040ec\n    int64_t v553 = v552 / 0x8000000000000000 | 2 * v552; // 0x4040ef\n    uint64_t v554 = v547 ^ v535; // 0x4040f2\n    int64_t v555 = v554 / 0x10000 | 0x1000000000000 * v554; // 0x4040ff\n    int64_t v556 = v516 + v6 + v543; // 0x404103\n    int64_t v557 = v530 + v6 + v498; // 0x404106\n    int64_t v558 = v555 + v540; // 0x404109\n    uint64_t v559 = v556 ^ v517; // 0x40410c\n    uint64_t v560 = v557 ^ v520; // 0x40410f\n    int64_t v561 = v559 / 0x100000000 | 0x100000000 * v559; // 0x40411c\n    uint64_t v562 = v558 ^ v545; // 0x404120\n    int64_t v563 = v560 / 0x100000000 | 0x100000000 * v560; // 0x404123\n    int64_t v564 = v561 + v496; // 0x40412c\n    int64_t v565 = v562 / 0x8000000000000000 | 2 * v562; // 0x404134\n    uint64_t v566 = v564 ^ v543; // 0x404137\n    int64_t v567 = v563 + v519; // 0x40413a\n    int64_t v568 = v566 / 0x1000000 | 0x10000000000 * v566; // 0x40413d\n    uint64_t v569 = v567 ^ v498; // 0x404141\n    int64_t v570 = v556 + v6 + v568; // 0x404144\n    int64_t v571 = v569 / 0x1000000 | 0x10000000000 * v569; // 0x404147\n    uint64_t v572 = v570 ^ v561; // 0x40414b\n    int64_t v573 = v557 + v6 + v571; // 0x40414e\n    int64_t v574 = v572 / 0x10000 | 0x1000000000000 * v572; // 0x404151\n    uint64_t v575 = v573 ^ v563; // 0x404155\n    int64_t v576 = v574 + v564; // 0x404158\n    int64_t v577 = v575 / 0x10000 | 0x1000000000000 * v575; // 0x40415b\n    uint64_t v578 = v576 ^ v568; // 0x40415f\n    int64_t v579 = v577 + v567; // 0x404162\n    int64_t v580 = v578 / 0x8000000000000000 | 2 * v578; // 0x404165\n    uint64_t v581 = v579 ^ v571; // 0x404168\n    int64_t v582 = v581 / 0x8000000000000000 | 2 * v581; // 0x40416b\n    int64_t v583 = v548 + v6 + v582; // 0x404178\n    int64_t v584 = v547 + v6 + v553; // 0x40417b\n    uint64_t v585 = v583 ^ v555; // 0x404183\n    uint64_t v586 = v584 ^ v574; // 0x404186\n    int64_t v587 = v585 / 0x100000000 | 0x100000000 * v585; // 0x404193\n    int64_t v588 = v586 / 0x100000000 | 0x100000000 * v586; // 0x404197\n    int64_t v589 = v570 + v6 + v565; // 0x40419b\n    int64_t v590 = v587 + v576; // 0x40419e\n    int64_t v591 = v588 + v579; // 0x4041a1\n    uint64_t v592 = v589 ^ v577; // 0x4041a4\n    uint64_t v593 = v590 ^ v582; // 0x4041a7\n    uint64_t v594 = v591 ^ v553; // 0x4041aa\n    int64_t v595 = v593 / 0x1000000 | 0x10000000000 * v593; // 0x4041ad\n    int64_t v596 = v594 / 0x1000000 | 0x10000000000 * v594; // 0x4041b1\n    int64_t v597 = v583 + v6 + v595; // 0x4041b5\n    int64_t v598 = v584 + v6 + v596; // 0x4041b8\n    uint64_t v599 = v597 ^ v587; // 0x4041bb\n    uint64_t v600 = v598 ^ v588; // 0x4041be\n    int64_t v601 = v599 / 0x10000 | 0x1000000000000 * v599; // 0x4041c1\n    int64_t v602 = v600 / 0x10000 | 0x1000000000000 * v600; // 0x4041c5\n    int64_t v603 = v601 + v590; // 0x4041c9\n    int64_t v604 = v602 + v591; // 0x4041cc\n    uint64_t v605 = v603 ^ v595; // 0x4041cf\n    uint64_t v606 = v604 ^ v596; // 0x4041d2\n    int64_t v607 = v605 / 0x8000000000000000 | 2 * v605; // 0x4041da\n    int64_t v608 = v606 / 0x8000000000000000 | 2 * v606; // 0x4041dd\n    int64_t v609 = v592 / 0x100000000 | 0x100000000 * v592; // 0x4041e5\n    int64_t v610 = v609 + v551; // 0x4041f8\n    int64_t v611 = v573 + v6 + v580; // 0x4041fb\n    uint64_t v612 = v610 ^ v565; // 0x404203\n    uint64_t v613 = v611 ^ v550; // 0x40420b\n    int64_t v614 = v612 / 0x1000000 | 0x10000000000 * v612; // 0x404213\n    int64_t v615 = v597 + v6 + v608; // 0x404217\n    int64_t v616 = v613 / 0x100000000 | 0x100000000 * v613; // 0x40421a\n    int64_t v617 = v589 + v6 + v614; // 0x40421e\n    int64_t v618 = v616 + v558; // 0x404221\n    uint64_t v619 = v617 ^ v609; // 0x404224\n    uint64_t v620 = v618 ^ v580; // 0x404227\n    int64_t v621 = v619 / 0x10000 | 0x1000000000000 * v619; // 0x40422a\n    int64_t v622 = v620 / 0x1000000 | 0x10000000000 * v620; // 0x40422e\n    int64_t v623 = v621 + v610; // 0x404232\n    int64_t v624 = v611 + v6 + v622; // 0x404235\n    uint64_t v625 = v623 ^ v614; // 0x404238\n    uint64_t v626 = v624 ^ v616; // 0x40423b\n    int64_t v627 = v625 / 0x8000000000000000 | 2 * v625; // 0x40423e\n    int64_t v628 = v626 / 0x10000 | 0x1000000000000 * v626; // 0x404241\n    int64_t v629 = v628 + v618; // 0x404245\n    uint64_t v630 = v615 ^ v628; // 0x404248\n    int64_t v631 = v630 / 0x100000000 | 0x100000000 * v630; // 0x40424b\n    uint64_t v632 = v629 ^ v622; // 0x40424f\n    int64_t v633 = v631 + v623; // 0x404252\n    int64_t v634 = v632 / 0x8000000000000000 | 2 * v632; // 0x404255\n    uint64_t v635 = v633 ^ v608; // 0x404258\n    int64_t v636 = v635 / 0x1000000 | 0x10000000000 * v635; // 0x40425b\n    int64_t v637 = v598 + v6 + v627; // 0x404269\n    int64_t v638 = v615 + v6 + v636; // 0x404271\n    uint64_t v639 = v637 ^ v601; // 0x404274\n    int64_t v640 = v617 + v6 + v634; // 0x404277\n    uint64_t v641 = v638 ^ v631; // 0x40427f\n    int64_t v642 = v639 / 0x100000000 | 0x100000000 * v639; // 0x404282\n    uint64_t v643 = v640 ^ v602; // 0x404286\n    int64_t v644 = v641 / 0x10000 | 0x1000000000000 * v641; // 0x40428e\n    int64_t v645 = v642 + v629; // 0x404292\n    int64_t v646 = v643 / 0x100000000 | 0x100000000 * v643; // 0x404295\n    int64_t v647 = v644 + v633; // 0x404299\n    uint64_t v648 = v645 ^ v627; // 0x4042a1\n    int64_t v649 = v646 + v603; // 0x4042a4\n    uint64_t v650 = v647 ^ v636; // 0x4042ac\n    int64_t v651 = v648 / 0x1000000 | 0x10000000000 * v648; // 0x4042af\n    uint64_t v652 = v649 ^ v634; // 0x4042b3\n    int64_t v653 = v650 / 0x8000000000000000 | 2 * v650; // 0x4042b6\n    int64_t v654 = v637 + v6 + v651; // 0x4042b9\n    int64_t v655 = v652 / 0x1000000 | 0x10000000000 * v652; // 0x4042bc\n    uint64_t v656 = v654 ^ v642; // 0x4042c0\n    int64_t v657 = v640 + v6 + v655; // 0x4042c3\n    int64_t v658 = v656 / 0x10000 | 0x1000000000000 * v656; // 0x4042c6\n    uint64_t v659 = v657 ^ v646; // 0x4042ca\n    int64_t v660 = v658 + v645; // 0x4042cd\n    int64_t v661 = v659 / 0x10000 | 0x1000000000000 * v659; // 0x4042d0\n    uint64_t v662 = v660 ^ v651; // 0x4042d4\n    int64_t v663 = v662 / 0x8000000000000000 | 2 * v662; // 0x4042e1\n    int64_t v664 = v661 + v649; // 0x4042e4\n    int64_t v665 = v624 + v6 + v607; // 0x4042f1\n    uint64_t v666 = v664 ^ v655; // 0x4042f4\n    uint64_t v667 = v665 ^ v621; // 0x4042fc\n    int64_t v668 = v666 / 0x8000000000000000 | 2 * v666; // 0x404303\n    int64_t v669 = v667 / 0x100000000 | 0x100000000 * v667; // 0x404306\n    int64_t v670 = v669 + v604; // 0x40430a\n    uint64_t v671 = v670 ^ v607; // 0x40430d\n    int64_t v672 = v671 / 0x1000000 | 0x10000000000 * v671; // 0x404310\n    int64_t v673 = v665 + v1 + v672; // 0x404314\n    uint64_t v674 = v673 ^ v669; // 0x404317\n    int64_t v675 = v674 / 0x10000 | 0x1000000000000 * v674; // 0x40431a\n    int64_t v676 = v675 + v670; // 0x40431e\n    uint64_t v677 = v676 ^ v672; // 0x404321\n    int64_t v678 = v677 / 0x8000000000000000 | 2 * v677; // 0x404324\n    int64_t v679 = v638 + v6 + v678; // 0x404327\n    uint64_t v680 = v679 ^ v658; // 0x40432a\n    int64_t v681 = v680 / 0x100000000 | 0x100000000 * v680; // 0x404331\n    int64_t v682 = v681 + v664; // 0x404335\n    uint64_t v683 = v682 ^ v678; // 0x404338\n    int64_t v684 = v683 / 0x1000000 | 0x10000000000 * v683; // 0x40433b\n    int64_t v685 = v679 + v1 + v684; // 0x40433f\n    uint64_t v686 = v685 ^ v681; // 0x404342\n    int64_t v687 = v686 / 0x10000 | 0x1000000000000 * v686; // 0x404345\n    int64_t v688 = v687 + v682; // 0x404349\n    uint64_t v689 = v688 ^ v684; // 0x40434c\n    int64_t v690 = v689 / 0x8000000000000000 | 2 * v689; // 0x40434f\n    int64_t v691 = v654 + v6 + v653; // 0x404352\n    uint64_t v692 = v691 ^ v661; // 0x40435f\n    int64_t v693 = v657 + v6 + v663; // 0x404362\n    int64_t v694 = v692 / 0x100000000 | 0x100000000 * v692; // 0x40436f\n    uint64_t v695 = v693 ^ v675; // 0x404373\n    int64_t v696 = v673 + v6 + v668; // 0x40437b\n    int64_t v697 = v694 + v676; // 0x40437e\n    int64_t v698 = v695 / 0x100000000 | 0x100000000 * v695; // 0x404381\n    uint64_t v699 = v697 ^ v653; // 0x40438a\n    int64_t v700 = v698 + v647; // 0x40438d\n    int64_t v701 = v699 / 0x1000000 | 0x10000000000 * v699; // 0x404390\n    uint64_t v702 = v700 ^ v663; // 0x404394\n    uint64_t v703 = v696 ^ v644; // 0x404397\n    int64_t v704 = v702 / 0x1000000 | 0x10000000000 * v702; // 0x40439a\n    int64_t v705 = v691 + v6 + v701; // 0x40439e\n    int64_t v706 = v703 / 0x100000000 | 0x100000000 * v703; // 0x4043a1\n    uint64_t v707 = v705 ^ v694; // 0x4043a5\n    int64_t v708 = v693 + v6 + v704; // 0x4043a8\n    int64_t v709 = v707 / 0x10000 | 0x1000000000000 * v707; // 0x4043ab\n    uint64_t v710 = v708 ^ v698; // 0x4043af\n    int64_t v711 = v709 + v697; // 0x4043b2\n    int64_t v712 = v710 / 0x10000 | 0x1000000000000 * v710; // 0x4043b5\n    uint64_t v713 = v711 ^ v701; // 0x4043b9\n    int64_t v714 = v712 + v700; // 0x4043c6\n    uint64_t v715 = v714 ^ v704; // 0x4043c9\n    int64_t v716 = v713 / 0x8000000000000000 | 2 * v713; // 0x4043cc\n    int64_t v717 = v706 + v660; // 0x4043cf\n    int64_t v718 = v715 / 0x8000000000000000 | 2 * v715; // 0x4043d2\n    uint64_t v719 = v717 ^ v668; // 0x4043d5\n    int64_t v720 = v719 / 0x1000000 | 0x10000000000 * v719; // 0x4043e2\n    int64_t v721 = v685 + v6 + v716; // 0x4043e6\n    int64_t v722 = v696 + v6 + v720; // 0x4043e9\n    uint64_t v723 = v722 ^ v706; // 0x4043ec\n    int64_t v724 = v723 / 0x10000 | 0x1000000000000 * v723; // 0x4043ef\n    int64_t v725 = v724 + v717; // 0x4043f3\n    uint64_t v726 = v721 ^ v724; // 0x4043f6\n    int64_t v727 = v726 / 0x100000000 | 0x100000000 * v726; // 0x4043fe\n    uint64_t v728 = v725 ^ v720; // 0x404402\n    int64_t v729 = v727 + v714; // 0x404405\n    int64_t v730 = v728 / 0x8000000000000000 | 2 * v728; // 0x404408\n    uint64_t v731 = v729 ^ v716; // 0x40440b\n    int64_t v732 = v731 / 0x1000000 | 0x10000000000 * v731; // 0x40440e\n    int64_t v733 = v721 + v6 + v732; // 0x404412\n    uint64_t v734 = v733 ^ v727; // 0x404415\n    int64_t v735 = v734 / 0x10000 | 0x1000000000000 * v734; // 0x404418\n    int64_t v736 = v735 + v729; // 0x404426\n    int64_t v737 = v705 + v6 + v718; // 0x404429\n    uint64_t v738 = v736 ^ v732; // 0x40442c\n    uint64_t v739 = v737 ^ v687; // 0x404434\n    int64_t v740 = v738 / 0x8000000000000000 | 2 * v738; // 0x40443c\n    int64_t v741 = v739 / 0x100000000 | 0x100000000 * v739; // 0x40443f\n    int64_t v742 = v741 + v725; // 0x404443\n    uint64_t v743 = v742 ^ v718; // 0x404446\n    int64_t v744 = v743 / 0x1000000 | 0x10000000000 * v743; // 0x404449\n    int64_t v745 = v737 + v6 + v744; // 0x40444d\n    uint64_t v746 = v745 ^ v741; // 0x404450\n    int64_t v747 = v746 / 0x10000 | 0x1000000000000 * v746; // 0x40445d\n    int64_t v748 = v708 + v6 + v730; // 0x404461\n    int64_t v749 = v722 + v6 + v690; // 0x404464\n    int64_t v750 = v747 + v742; // 0x404467\n    uint64_t v751 = v748 ^ v709; // 0x40446a\n    uint64_t v752 = v749 ^ v712; // 0x40446d\n    int64_t v753 = v751 / 0x100000000 | 0x100000000 * v751; // 0x40447a\n    uint64_t v754 = v750 ^ v744; // 0x40447e\n    int64_t v755 = v752 / 0x100000000 | 0x100000000 * v752; // 0x404481\n    int64_t v756 = v753 + v688; // 0x40448a\n    int64_t v757 = v754 / 0x8000000000000000 | 2 * v754; // 0x404492\n    uint64_t v758 = v756 ^ v730; // 0x404495\n    int64_t v759 = v755 + v711; // 0x404498\n    int64_t v760 = v758 / 0x1000000 | 0x10000000000 * v758; // 0x40449b\n    uint64_t v761 = v759 ^ v690; // 0x40449f\n    int64_t v762 = v748 + v6 + v760; // 0x4044a2\n    int64_t v763 = v761 / 0x1000000 | 0x10000000000 * v761; // 0x4044a5\n    uint64_t v764 = v762 ^ v753; // 0x4044a9\n    int64_t v765 = v749 + v6 + v763; // 0x4044ac\n    int64_t v766 = v764 / 0x10000 | 0x1000000000000 * v764; // 0x4044af\n    uint64_t v767 = v765 ^ v755; // 0x4044b3\n    int64_t v768 = v766 + v756; // 0x4044b6\n    int64_t v769 = v767 / 0x10000 | 0x1000000000000 * v767; // 0x4044b9\n    uint64_t v770 = v768 ^ v760; // 0x4044bd\n    int64_t v771 = v769 + v759; // 0x4044c0\n    int64_t v772 = v770 / 0x8000000000000000 | 2 * v770; // 0x4044c3\n    uint64_t v773 = v771 ^ v763; // 0x4044c6\n    int64_t v774 = v773 / 0x8000000000000000 | 2 * v773; // 0x4044c9\n    int64_t v775 = v733 + v6 + v774; // 0x4044d6\n    int64_t v776 = v745 + v6 + v740; // 0x4044d9\n    uint64_t v777 = v775 ^ v747; // 0x4044e0\n    uint64_t v778 = v776 ^ v766; // 0x4044e3\n    int64_t v779 = v777 / 0x100000000 | 0x100000000 * v777; // 0x4044f0\n    int64_t v780 = v778 / 0x100000000 | 0x100000000 * v778; // 0x4044f4\n    int64_t v781 = v762 + v1 + v757; // 0x4044f8\n    int64_t v782 = v779 + v768; // 0x4044fb\n    int64_t v783 = v780 + v771; // 0x4044fe\n    uint64_t v784 = v781 ^ v769; // 0x404501\n    uint64_t v785 = v782 ^ v774; // 0x404504\n    uint64_t v786 = v783 ^ v740; // 0x404507\n    int64_t v787 = v785 / 0x1000000 | 0x10000000000 * v785; // 0x40450a\n    int64_t v788 = v786 / 0x1000000 | 0x10000000000 * v786; // 0x40450e\n    int64_t v789 = v775 + v6 + v787; // 0x404512\n    int64_t v790 = v776 + v6 + v788; // 0x404515\n    uint64_t v791 = v789 ^ v779; // 0x404518\n    uint64_t v792 = v790 ^ v780; // 0x40451b\n    int64_t v793 = v791 / 0x10000 | 0x1000000000000 * v791; // 0x40451e\n    int64_t v794 = v792 / 0x10000 | 0x1000000000000 * v792; // 0x404522\n    int64_t v795 = v793 + v782; // 0x404526\n    int64_t v796 = v794 + v783; // 0x404529\n    uint64_t v797 = v795 ^ v787; // 0x40452c\n    uint64_t v798 = v796 ^ v788; // 0x40452f\n    int64_t v799 = v797 / 0x8000000000000000 | 2 * v797; // 0x40453c\n    int64_t v800 = v798 / 0x8000000000000000 | 2 * v798; // 0x40453f\n    int64_t v801 = v784 / 0x100000000 | 0x100000000 * v784; // 0x404547\n    int64_t v802 = v801 + v736; // 0x404555\n    int64_t v803 = v765 + v6 + v772; // 0x40455d\n    uint64_t v804 = v802 ^ v757; // 0x404560\n    uint64_t v805 = v803 ^ v735; // 0x404568\n    int64_t v806 = v804 / 0x1000000 | 0x10000000000 * v804; // 0x404570\n    int64_t v807 = v789 + v6 + v800; // 0x404574\n    int64_t v808 = v805 / 0x100000000 | 0x100000000 * v805; // 0x404577\n    int64_t v809 = v781 + v6 + v806; // 0x40457b\n    int64_t v810 = v808 + v750; // 0x40457e\n    uint64_t v811 = v809 ^ v801; // 0x404581\n    uint64_t v812 = v810 ^ v772; // 0x404584\n    int64_t v813 = v811 / 0x10000 | 0x1000000000000 * v811; // 0x404587\n    int64_t v814 = v812 / 0x1000000 | 0x10000000000 * v812; // 0x40458b\n    int64_t v815 = v813 + v802; // 0x40458f\n    int64_t v816 = v803 + v6 + v814; // 0x404592\n    uint64_t v817 = v815 ^ v806; // 0x404595\n    uint64_t v818 = v816 ^ v808; // 0x404598\n    int64_t v819 = v817 / 0x8000000000000000 | 2 * v817; // 0x40459b\n    int64_t v820 = v818 / 0x10000 | 0x1000000000000 * v818; // 0x40459e\n    int64_t v821 = v820 + v810; // 0x4045a2\n    uint64_t v822 = v807 ^ v820; // 0x4045a5\n    int64_t v823 = v822 / 0x100000000 | 0x100000000 * v822; // 0x4045a8\n    uint64_t v824 = v821 ^ v814; // 0x4045ac\n    int64_t v825 = v823 + v815; // 0x4045af\n    int64_t v826 = v824 / 0x8000000000000000 | 2 * v824; // 0x4045b2\n    uint64_t v827 = v825 ^ v800; // 0x4045b5\n    int64_t v828 = v827 / 0x1000000 | 0x10000000000 * v827; // 0x4045b8\n    int64_t v829 = v790 + v6 + v819; // 0x4045c6\n    int64_t v830 = v807 + v6 + v828; // 0x4045ce\n    uint64_t v831 = v829 ^ v793; // 0x4045d1\n    int64_t v832 = v809 + v6 + v826; // 0x4045d4\n    uint64_t v833 = v830 ^ v823; // 0x4045dc\n    int64_t v834 = v831 / 0x100000000 | 0x100000000 * v831; // 0x4045df\n    uint64_t v835 = v832 ^ v794; // 0x4045e3\n    int64_t v836 = v833 / 0x10000 | 0x1000000000000 * v833; // 0x4045eb\n    int64_t v837 = v834 + v821; // 0x4045ef\n    int64_t v838 = v835 / 0x100000000 | 0x100000000 * v835; // 0x4045f2\n    int64_t v839 = v836 + v825; // 0x4045f6\n    uint64_t v840 = v837 ^ v819; // 0x4045fe\n    int64_t v841 = v838 + v795; // 0x404601\n    uint64_t v842 = v839 ^ v828; // 0x404604\n    int64_t v843 = v840 / 0x1000000 | 0x10000000000 * v840; // 0x40460c\n    uint64_t v844 = v841 ^ v826; // 0x404610\n    int64_t v845 = v842 / 0x8000000000000000 | 2 * v842; // 0x404613\n    int64_t v846 = v829 + v6 + v843; // 0x404616\n    int64_t v847 = v844 / 0x1000000 | 0x10000000000 * v844; // 0x404619\n    uint64_t v848 = v846 ^ v834; // 0x40461d\n    int64_t v849 = v832 + v6 + v847; // 0x404620\n    int64_t v850 = v848 / 0x10000 | 0x1000000000000 * v848; // 0x404623\n    uint64_t v851 = v849 ^ v838; // 0x404627\n    int64_t v852 = v850 + v837; // 0x40462a\n    int64_t v853 = v851 / 0x10000 | 0x1000000000000 * v851; // 0x40462d\n    uint64_t v854 = v852 ^ v843; // 0x404631\n    int64_t v855 = v854 / 0x8000000000000000 | 2 * v854; // 0x40463e\n    int64_t v856 = v853 + v841; // 0x404641\n    int64_t v857 = v816 + v6 + v799; // 0x404649\n    uint64_t v858 = v856 ^ v847; // 0x40464c\n    uint64_t v859 = v857 ^ v813; // 0x40464f\n    int64_t v860 = v858 / 0x8000000000000000 | 2 * v858; // 0x40465c\n    int64_t v861 = v859 / 0x100000000 | 0x100000000 * v859; // 0x40465f\n    int64_t v862 = v861 + v796; // 0x404668\n    uint64_t v863 = v862 ^ v799; // 0x40466b\n    int64_t v864 = v863 / 0x1000000 | 0x10000000000 * v863; // 0x40466e\n    int64_t v865 = v857 + v6 + v864; // 0x404672\n    uint64_t v866 = v865 ^ v861; // 0x404675\n    int64_t v867 = v866 / 0x10000 | 0x1000000000000 * v866; // 0x404678\n    int64_t v868 = v867 + v862; // 0x40467c\n    uint64_t v869 = v868 ^ v864; // 0x40467f\n    int64_t v870 = v869 / 0x8000000000000000 | 2 * v869; // 0x404682\n    int64_t v871 = v830 + v6 + v870; // 0x404685\n    uint64_t v872 = v871 ^ v850; // 0x404688\n    int64_t v873 = v872 / 0x100000000 | 0x100000000 * v872; // 0x404690\n    int64_t v874 = v873 + v856; // 0x404694\n    uint64_t v875 = v874 ^ v870; // 0x404697\n    int64_t v876 = v875 / 0x1000000 | 0x10000000000 * v875; // 0x40469a\n    int64_t v877 = v871 + v6 + v876; // 0x40469e\n    uint64_t v878 = v877 ^ v873; // 0x4046a1\n    int64_t v879 = v878 / 0x10000 | 0x1000000000000 * v878; // 0x4046a4\n    int64_t v880 = v879 + v874; // 0x4046a8\n    uint64_t v881 = v880 ^ v876; // 0x4046ab\n    int64_t v882 = v881 / 0x8000000000000000 | 2 * v881; // 0x4046ae\n    int64_t v883 = v846 + v6 + v845; // 0x4046b1\n    uint64_t v884 = v883 ^ v853; // 0x4046be\n    int64_t v885 = v849 + v6 + v855; // 0x4046c1\n    int64_t v886 = v884 / 0x100000000 | 0x100000000 * v884; // 0x4046ce\n    uint64_t v887 = v885 ^ v867; // 0x4046d2\n    int64_t v888 = v865 + v6 + v860; // 0x4046da\n    int64_t v889 = v886 + v868; // 0x4046dd\n    int64_t v890 = v887 / 0x100000000 | 0x100000000 * v887; // 0x4046e0\n    uint64_t v891 = v889 ^ v845; // 0x4046e9\n    int64_t v892 = v890 + v839; // 0x4046ec\n    int64_t v893 = v891 / 0x1000000 | 0x10000000000 * v891; // 0x4046ef\n    uint64_t v894 = v892 ^ v855; // 0x4046f3\n    uint64_t v895 = v888 ^ v836; // 0x4046f6\n    int64_t v896 = v894 / 0x1000000 | 0x10000000000 * v894; // 0x4046f9\n    int64_t v897 = v883 + v6 + v893; // 0x4046fd\n    int64_t v898 = v895 / 0x100000000 | 0x100000000 * v895; // 0x404700\n    uint64_t v899 = v897 ^ v886; // 0x404704\n    int64_t v900 = v885 + v6 + v896; // 0x404707\n    int64_t v901 = v899 / 0x10000 | 0x1000000000000 * v899; // 0x40470a\n    uint64_t v902 = v900 ^ v890; // 0x40470e\n    int64_t v903 = v901 + v889; // 0x404711\n    int64_t v904 = v902 / 0x10000 | 0x1000000000000 * v902; // 0x404714\n    uint64_t v905 = v903 ^ v893; // 0x40471d\n    int64_t v906 = v904 + v892; // 0x404725\n    uint64_t v907 = v906 ^ v896; // 0x404728\n    int64_t v908 = v905 / 0x8000000000000000 | 2 * v905; // 0x40472b\n    int64_t v909 = v898 + v852; // 0x40472e\n    int64_t v910 = v907 / 0x8000000000000000 | 2 * v907; // 0x404731\n    uint64_t v911 = v909 ^ v860; // 0x404734\n    int64_t v912 = v911 / 0x1000000 | 0x10000000000 * v911; // 0x404741\n    int64_t v913 = v877 + v6 + v908; // 0x404745\n    int64_t v914 = v888 + v6 + v912; // 0x40474d\n    int64_t v915 = v897 + v6 + v910; // 0x404750\n    uint64_t v916 = v914 ^ v898; // 0x404753\n    uint64_t v917 = v915 ^ v879; // 0x404756\n    int64_t v918 = v916 / 0x10000 | 0x1000000000000 * v916; // 0x40475e\n    int64_t v919 = v917 / 0x100000000 | 0x100000000 * v917; // 0x404762\n    int64_t v920 = v918 + v909; // 0x404766\n    uint64_t v921 = v913 ^ v918; // 0x404769\n    int64_t v922 = v921 / 0x100000000 | 0x100000000 * v921; // 0x404770\n    uint64_t v923 = v920 ^ v912; // 0x404774\n    int64_t v924 = v919 + v920; // 0x404777\n    int64_t v925 = v922 + v906; // 0x40477a\n    uint64_t v926 = v924 ^ v910; // 0x40477d\n    int64_t v927 = v923 / 0x8000000000000000 | 2 * v923; // 0x404780\n    uint64_t v928 = v925 ^ v908; // 0x404783\n    int64_t v929 = v926 / 0x1000000 | 0x10000000000 * v926; // 0x404786\n    int64_t v930 = v928 / 0x1000000 | 0x10000000000 * v928; // 0x40478a\n    int64_t v931 = v915 + v6 + v929; // 0x40478e\n    int64_t v932 = v913 + v1 + v930; // 0x404791\n    uint64_t v933 = v932 ^ v922; // 0x404794\n    int64_t v934 = v933 / 0x10000 | 0x1000000000000 * v933; // 0x404797\n    int64_t v935 = v934 + v925; // 0x40479b\n    uint64_t v936 = v935 ^ v930; // 0x4047a8\n    int64_t v937 = v936 / 0x8000000000000000 | 2 * v936; // 0x4047ab\n    uint64_t v938 = v931 ^ v919; // 0x4047ae\n    int64_t v939 = v938 / 0x10000 | 0x1000000000000 * v938; // 0x4047bb\n    int64_t v940 = v900 + v6 + v927; // 0x4047bf\n    int64_t v941 = v914 + v6 + v882; // 0x4047c2\n    int64_t v942 = v939 + v924; // 0x4047c5\n    uint64_t v943 = v940 ^ v901; // 0x4047c8\n    uint64_t v944 = v941 ^ v904; // 0x4047cb\n    int64_t v945 = v943 / 0x100000000 | 0x100000000 * v943; // 0x4047d8\n    uint64_t v946 = v942 ^ v929; // 0x4047dc\n    int64_t v947 = v944 / 0x100000000 | 0x100000000 * v944; // 0x4047df\n    int64_t v948 = v945 + v880; // 0x4047e8\n    int64_t v949 = v946 / 0x8000000000000000 | 2 * v946; // 0x4047f0\n    uint64_t v950 = v948 ^ v927; // 0x4047f3\n    int64_t v951 = v947 + v903; // 0x4047f6\n    int64_t v952 = v950 / 0x1000000 | 0x10000000000 * v950; // 0x4047f9\n    uint64_t v953 = v951 ^ v882; // 0x4047fd\n    int64_t v954 = v940 + v6 + v952; // 0x404800\n    int64_t v955 = v953 / 0x1000000 | 0x10000000000 * v953; // 0x404803\n    uint64_t v956 = v954 ^ v945; // 0x404807\n    int64_t v957 = v941 + v6 + v955; // 0x40480a\n    int64_t v958 = v956 / 0x10000 | 0x1000000000000 * v956; // 0x40480d\n    uint64_t v959 = v957 ^ v947; // 0x404811\n    int64_t v960 = v958 + v948; // 0x404814\n    int64_t v961 = v959 / 0x10000 | 0x1000000000000 * v959; // 0x404817\n    uint64_t v962 = v960 ^ v952; // 0x40481b\n    int64_t v963 = v961 + v951; // 0x40481e\n    int64_t v964 = v962 / 0x8000000000000000 | 2 * v962; // 0x404821\n    uint64_t v965 = v963 ^ v955; // 0x404824\n    int64_t v966 = v965 / 0x8000000000000000 | 2 * v965; // 0x404827\n    int64_t v967 = v932 + v6 + v966; // 0x404834\n    int64_t v968 = v931 + v6 + v937; // 0x404837\n    uint64_t v969 = v967 ^ v939; // 0x40483f\n    uint64_t v970 = v968 ^ v958; // 0x404842\n    int64_t v971 = v969 / 0x100000000 | 0x100000000 * v969; // 0x40484f\n    int64_t v972 = v970 / 0x100000000 | 0x100000000 * v970; // 0x404853\n    int64_t v973 = v954 + v6 + v949; // 0x404857\n    int64_t v974 = v971 + v960; // 0x40485a\n    int64_t v975 = v972 + v963; // 0x40485d\n    uint64_t v976 = v973 ^ v961; // 0x404860\n    uint64_t v977 = v974 ^ v966; // 0x404863\n    uint64_t v978 = v975 ^ v937; // 0x404866\n    int64_t v979 = v977 / 0x1000000 | 0x10000000000 * v977; // 0x404869\n    int64_t v980 = v978 / 0x1000000 | 0x10000000000 * v978; // 0x40486d\n    int64_t v981 = v967 + v6 + v979; // 0x404871\n    int64_t v982 = v968 + v6 + v980; // 0x404874\n    uint64_t v983 = v981 ^ v971; // 0x404877\n    uint64_t v984 = v982 ^ v972; // 0x40487a\n    int64_t v985 = v983 / 0x10000 | 0x1000000000000 * v983; // 0x40487d\n    int64_t v986 = v984 / 0x10000 | 0x1000000000000 * v984; // 0x404881\n    int64_t v987 = v985 + v974; // 0x404885\n    int64_t v988 = v986 + v975; // 0x404888\n    uint64_t v989 = v987 ^ v979; // 0x40488b\n    uint64_t v990 = v988 ^ v980; // 0x40488e\n    int64_t v991 = v989 / 0x8000000000000000 | 2 * v989; // 0x404896\n    int64_t v992 = v990 / 0x8000000000000000 | 2 * v990; // 0x404899\n    int64_t v993 = v976 / 0x100000000 | 0x100000000 * v976; // 0x4048a1\n    int64_t v994 = v993 + v935; // 0x4048b4\n    int64_t v995 = v957 + v6 + v964; // 0x4048b7\n    uint64_t v996 = v994 ^ v949; // 0x4048bf\n    uint64_t v997 = v995 ^ v934; // 0x4048c7\n    int64_t v998 = v996 / 0x1000000 | 0x10000000000 * v996; // 0x4048cf\n    int64_t v999 = v981 + v6 + v992; // 0x4048d3\n    int64_t v1000 = v997 / 0x100000000 | 0x100000000 * v997; // 0x4048d6\n    int64_t v1001 = v973 + v6 + v998; // 0x4048da\n    int64_t v1002 = v1000 + v942; // 0x4048dd\n    uint64_t v1003 = v1001 ^ v993; // 0x4048e0\n    uint64_t v1004 = v1002 ^ v964; // 0x4048e3\n    int64_t v1005 = v1003 / 0x10000 | 0x1000000000000 * v1003; // 0x4048e6\n    int64_t v1006 = v1004 / 0x1000000 | 0x10000000000 * v1004; // 0x4048ea\n    int64_t v1007 = v1005 + v994; // 0x4048ee\n    int64_t v1008 = v995 + v6 + v1006; // 0x4048f1\n    uint64_t v1009 = v1007 ^ v998; // 0x4048f4\n    uint64_t v1010 = v1008 ^ v1000; // 0x4048f7\n    int64_t v1011 = v1009 / 0x8000000000000000 | 2 * v1009; // 0x4048fa\n    int64_t v1012 = v1010 / 0x10000 | 0x1000000000000 * v1010; // 0x4048fd\n    int64_t v1013 = v1012 + v1002; // 0x404901\n    uint64_t v1014 = v999 ^ v1012; // 0x404904\n    int64_t v1015 = v1014 / 0x100000000 | 0x100000000 * v1014; // 0x404907\n    uint64_t v1016 = v1013 ^ v1006; // 0x40490b\n    int64_t v1017 = v1015 + v1007; // 0x40490e\n    int64_t v1018 = v1016 / 0x8000000000000000 | 2 * v1016; // 0x404911\n    uint64_t v1019 = v1017 ^ v992; // 0x404914\n    int64_t v1020 = v1019 / 0x1000000 | 0x10000000000 * v1019; // 0x404917\n    int64_t v1021 = v982 + v6 + v1011; // 0x404925\n    int64_t v1022 = v999 + v6 + v1020; // 0x40492d\n    uint64_t v1023 = v1021 ^ v985; // 0x404930\n    int64_t v1024 = v1001 + v6 + v1018; // 0x404933\n    uint64_t v1025 = v1022 ^ v1015; // 0x40493a\n    int64_t v1026 = v1023 / 0x100000000 | 0x100000000 * v1023; // 0x40493d\n    uint64_t v1027 = v1024 ^ v986; // 0x404941\n    int64_t v1028 = v1025 / 0x10000 | 0x1000000000000 * v1025; // 0x404949\n    int64_t v1029 = v1026 + v1013; // 0x40494d\n    int64_t v1030 = v1027 / 0x100000000 | 0x100000000 * v1027; // 0x404950\n    int64_t v1031 = v1028 + v1017; // 0x404954\n    uint64_t v1032 = v1029 ^ v1011; // 0x40495c\n    int64_t v1033 = v1030 + v987; // 0x40495f\n    uint64_t v1034 = v1031 ^ v1020; // 0x404967\n    int64_t v1035 = v1032 / 0x1000000 | 0x10000000000 * v1032; // 0x40496a\n    uint64_t v1036 = v1033 ^ v1018; // 0x40496e\n    int64_t v1037 = v1034 / 0x8000000000000000 | 2 * v1034; // 0x404971\n    int64_t v1038 = v1021 + v1 + v1035; // 0x404974\n    int64_t v1039 = v1036 / 0x1000000 | 0x10000000000 * v1036; // 0x404977\n    uint64_t v1040 = v1038 ^ v1026; // 0x40497b\n    int64_t v1041 = v1024 + v6 + v1039; // 0x40497e\n    int64_t v1042 = v1040 / 0x10000 | 0x1000000000000 * v1040; // 0x404981\n    uint64_t v1043 = v1041 ^ v1030; // 0x404985\n    int64_t v1044 = v1042 + v1029; // 0x404988\n    int64_t v1045 = v1043 / 0x10000 | 0x1000000000000 * v1043; // 0x40498b\n    uint64_t v1046 = v1044 ^ v1035; // 0x40498f\n    int64_t v1047 = v1046 / 0x8000000000000000 | 2 * v1046; // 0x40499c\n    int64_t v1048 = v1045 + v1033; // 0x40499f\n    int64_t v1049 = v1008 + v6 + v991; // 0x4049ac\n    uint64_t v1050 = v1048 ^ v1039; // 0x4049af\n    uint64_t v1051 = v1049 ^ v1005; // 0x4049b7\n    int64_t v1052 = v1050 / 0x8000000000000000 | 2 * v1050; // 0x4049bf\n    int64_t v1053 = v1051 / 0x100000000 | 0x100000000 * v1051; // 0x4049c2\n    int64_t v1054 = v1053 + v988; // 0x4049c6\n    uint64_t v1055 = v1054 ^ v991; // 0x4049c9\n    int64_t v1056 = v1055 / 0x1000000 | 0x10000000000 * v1055; // 0x4049cc\n    int64_t v1057 = v1049 + v6 + v1056; // 0x4049d0\n    uint64_t v1058 = v1057 ^ v1053; // 0x4049d3\n    int64_t v1059 = v1058 / 0x10000 | 0x1000000000000 * v1058; // 0x4049d6\n    int64_t v1060 = v1059 + v1054; // 0x4049da\n    uint64_t v1061 = v1060 ^ v1056; // 0x4049dd\n    int64_t v1062 = v1061 / 0x8000000000000000 | 2 * v1061; // 0x4049e0\n    int64_t v1063 = v1022 + v6 + v1062; // 0x4049e3\n    uint64_t v1064 = v1063 ^ v1042; // 0x4049e6\n    int64_t v1065 = v1064 / 0x100000000 | 0x100000000 * v1064; // 0x4049ee\n    int64_t v1066 = v1065 + v1048; // 0x4049f2\n    uint64_t v1067 = v1066 ^ v1062; // 0x4049f5\n    int64_t v1068 = v1063 + v6 + (v1067 / 0x1000000 | 0x10000000000 * v1067); // 0x4049fc\n    uint64_t v1069 = v1068 ^ v1065; // 0x4049ff\n    int64_t v1070 = v1038 + v6 + v1037; // 0x404a1c\n    int64_t v1071 = v1041 + v6 + v1047; // 0x404a29\n    uint64_t v1072 = v1070 ^ v1045; // 0x404a2c\n    int64_t v1073 = v1057 + v6 + v1052; // 0x404a34\n    uint64_t v1074 = v1071 ^ v1059; // 0x404a37\n    int64_t v1075 = v1072 / 0x100000000 | 0x100000000 * v1072; // 0x404a3a\n    uint64_t v1076 = v1073 ^ v1028; // 0x404a43\n    int64_t v1077 = v1074 / 0x100000000 | 0x100000000 * v1074; // 0x404a46\n    int64_t v1078 = v1075 + v1060; // 0x404a4a\n    int64_t v1079 = v1076 / 0x100000000 | 0x100000000 * v1076; // 0x404a52\n    int64_t v1080 = v1077 + v1031; // 0x404a56\n    uint64_t v1081 = v1078 ^ v1037; // 0x404a59\n    uint64_t v1082 = v1080 ^ v1047; // 0x404a61\n    int64_t v1083 = v1081 / 0x1000000 | 0x10000000000 * v1081; // 0x404a64\n    int64_t v1084 = v1079 + v1044; // 0x404a6f\n    int64_t v1085 = v1071 + v6 + (v1082 / 0x1000000 | 0x10000000000 * v1082); // 0x404a72\n    uint64_t v1086 = v1070 + v6 + v1083 ^ v1075; // 0x404a75\n    uint64_t v1087 = v1085 ^ v1077; // 0x404a78\n    int64_t v1088 = v1086 / 0x10000 | 0x1000000000000 * v1086; // 0x404a7b\n    uint64_t v1089 = v1088 + v1078 ^ v1083; // 0x404a89\n    int64_t v1090 = v1089 / 0x8000000000000000 | 2 * v1089; // 0x404a8f\n    uint64_t v1091 = v1084 ^ v1052; // 0x404a95\n    int64_t v1092 = v1091 / 0x1000000 | 0x10000000000 * v1091; // 0x404aa2\n    int64_t v1093 = v1068 + v6 + v1090; // 0x404aa6\n    uint64_t v1094 = v1073 + v6 + v1092 ^ v1079; // 0x404aac\n    int64_t v1095 = v1094 / 0x10000 | 0x1000000000000 * v1094; // 0x404aaf\n    uint64_t v1096 = v1093 ^ v1095; // 0x404ab6\n    uint64_t v1097 = v1095 + v1084 ^ v1092; // 0x404ac2\n    int64_t v1098 = v1097 / 0x8000000000000000 | 2 * v1097; // 0x404ac8\n    uint64_t v1099 = (v1087 / 0x10000 | 0x1000000000000 * v1087) + v1080 + (v1096 / 0x100000000 | 0x100000000 * v1096) ^ v1090; // 0x404acb\n    int64_t v1100 = v1085 + v1 + v1098; // 0x404b2e\n    uint64_t v1101 = v1100 ^ v1088; // 0x404b35\n    int64_t v1102 = v1101 / 0x100000000 | 0x100000000 * v1101; // 0x404b48\n    int64_t v1103 = (v1069 / 0x10000 | 0x1000000000000 * v1069) + v1066 + v1102; // 0x404b57\n    uint64_t v1104 = v1103 ^ v1098; // 0x404b5e\n    uint64_t v1105 = v1100 + v6 + (v1104 / 0x1000000 | 0x10000000000 * v1104) ^ v1102; // 0x404b73\n    int64_t * v1106 = (int64_t *)a1; // 0x404bfd\n    int64_t v1107 = *v1106; // 0x404bfd\n    *v1106 = v1093 + v6 + (v1099 / 0x1000000 | 0x10000000000 * v1099) ^ v1107 ^ (v1105 / 0x10000 | 0x1000000000000 * v1105) + v1103;\n    for (int64_t i = 1; i < 8; i++) {\n        int64_t v1108 = 8 * i;\n        int64_t v1109 = *(int64_t *)(v2 + 104 + v1108); // 0x404bf5\n        int64_t * v1110 = (int64_t *)(v1108 + a1); // 0x404bfd\n        *v1110 = v1109 ^ *(int64_t *)(v1108 + v4) ^ *v1110;\n    }\n    // 0x404c0b\n    return 8;\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404d42",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t * a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = a1 + 96; // 0x404c24\n    int64_t * v3 = (int64_t *)(a1 + 224); // 0x404c40\n    int64_t v4 = *v3; // 0x404c40\n    uint64_t v5 = 128 - v4; // 0x404c47\n    int64_t v6 = v4 + v2; // 0x404c4a\n    int64_t v7 = v6; // 0x404c51\n    int64_t v8 = v1; // 0x404c51\n    int64_t v9 = a3; // 0x404c51\n    if (v5 < a3) {\n        // 0x404c78\n        *v3 = 0;\n        int64_t v10 = a3 - 128 + v4; // 0x404c86\n        memcpy((int64_t *)v6, a2, (int32_t)v5);\n        int64_t * v11 = (int64_t *)(a1 + 64); // 0x404c90\n        uint64_t v12 = *v11 + 128; // 0x404c9a\n        *v11 = v12;\n        int64_t v13 = v5 + v1; // 0x404ca9\n        int64_t * v14 = (int64_t *)(a1 + 72); // 0x404caf\n        *v14 = *v14 + (int64_t)(v12 < 128);\n        function_403680(a1, v2);\n        if (v10 < 129) {\n            // 0x404d30\n            v7 = *v3 + v2;\n            v8 = v13;\n            v9 = v10;\n        } else {\n            int64_t v15 = (v10 - 1 & -128) + v13; // 0x404cd4\n            uint64_t v16 = *v11 + 128; // 0x404cea\n            *v11 = v16;\n            int64_t v17 = v13 + 128; // 0x404cf9\n            *v14 = *v14 + (int64_t)(v16 < 128);\n            function_403680(a1, v13);\n            while (v15 != v17) {\n                int64_t v18 = v17;\n                v16 = *v11 + 128;\n                *v11 = v16;\n                v17 = v18 + 128;\n                *v14 = *v14 + (int64_t)(v16 < 128);\n                function_403680(a1, v18);\n            }\n            // 0x404d0e\n            v7 = *v3 + v2;\n            v8 = v15;\n            v9 = v10 - 128 - (v10 - 129 & -128);\n        }\n    }\n    int64_t * dest_mem = memcpy((int64_t *)v7, (int64_t *)v8, (int32_t)v9); // 0x404c59\n    *v3 = *v3 + v9;\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404e1b",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2) {\n    int64_t v1 = a2;\n    *(int64_t *)(a1 + 64) = 0;\n    *(int64_t *)(a1 + 240) = 0;\n    int64_t v2 = a1 + 72 & -8; // 0x404d77\n    __asm_rep_stosq_memset((char *)v2, 0, (a1 + 248 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)a1;\n    *v3 = 0x6a09e667f3bcc908;\n    *(int64_t *)(a1 + 8) = -0x4498517a7b3558c5;\n    *(int64_t *)(a1 + 16) = 0x3c6ef372fe94f82b;\n    *(int64_t *)(a1 + 24) = -0x5ab00ac5a0e2c90f;\n    *(int64_t *)(a1 + 32) = 0x510e527fade682d1;\n    *(int64_t *)(a1 + 40) = -0x64fa9773d4c193e1;\n    *(int64_t *)(a1 + 48) = 0x1f83d9abfb41bd6b;\n    *(int64_t *)(a1 + 56) = 0x5be0cd19137e2179;\n    *v3 = *(int64_t *)v1 ^ 0x6a09e667f3bcc908;\n    for (int64_t i = 1; i < 8; i++) {\n        int64_t v4 = 8 * i;\n        int64_t * v5 = (int64_t *)(v4 + a1);\n        *v5 = *(int64_t *)(v1 + v4) ^ *v5;\n    }\n    // 0x404e0e\n    *(int64_t *)(a1 + 232) = (int64_t)*(char *)&v1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e86",
            "decompiledFuncCode": "int64_t function_404e20(int64_t * a1, int64_t a2) {\n    // 0x404e20\n    int128_t v1; // 0x404e20\n    int128_t v2 = v1;\n    if (a2 >= 65) {\n        // 0x404e80\n        return 0xffffffff;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x404e2e\n    int64_t v4 = 0x100000000000000 * a2 >> 56; // bp-72, 0x404e34\n    __asm_movaps(v3);\n    __asm_movaps(v3);\n    return function_404d50((int64_t)a1, (int64_t)&v4);\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404f7b",
            "decompiledFuncCode": "int64_t function_404e90(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404e90\n    int128_t v1; // 0x404e90\n    int128_t v2 = v1;\n    if (a2 >= 65 || a3 == 0 || a4 > 64) {\n        // 0x404f5d\n        return 0xffffffff;\n    }\n    int64_t v3 = (int64_t)a1;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x404eb8\n    int64_t v5 = 0x100000000000000 * a2 >> 56; // bp-216, 0x404ecd\n    __asm_movaps(v4);\n    __asm_movaps(v4);\n    int64_t v6 = function_404d50(v3, (int64_t)&v5); // 0x404f0a\n    int64_t result = 0xffffffff; // 0x404f11\n    if ((int32_t)v6 >= 0) {\n        // 0x404f13\n        int64_t v7; // bp-152, 0x404e90\n        __asm_rep_stosq_memset((char *)&v7, 0, 16);\n        __memcpy_chk(&v7, (int64_t *)a3, (int32_t)a4, 128);\n        function_404c20(v3, &v7, 128);\n        memset(&v7, 0, 128);\n        result = 0;\n    }\n    // 0x404f5d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404f9b",
            "decompiledFuncCode": "int64_t function_404f80(int64_t * a1, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x404f98\n        return 0;\n    }\n    // 0x404f85\n    function_404c20((int64_t)a1, (int64_t *)a2, a3);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "4050e4",
            "decompiledFuncCode": "int64_t function_404fa0(int64_t * a1, int64_t a2, uint64_t a3) {\n    // 0x404fa0\n    int128_t v1; // 0x404fa0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x404fa2\n    int64_t v4 = __asm_movaps(v3); // bp-88, 0x404fac\n    __asm_movaps(v3);\n    __asm_movaps(v3);\n    __asm_movaps(v3);\n    if (a2 == 0) {\n        // 0x4050c3\n        return 0xffffffff;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t * v6 = (int64_t *)(v5 + 232); // 0x404fc8\n    if (*v6 > a3) {\n        // 0x4050c3\n        return 0xffffffff;\n    }\n    int64_t * v7 = (int64_t *)(v5 + 80); // 0x404fd5\n    if (*v7 != 0) {\n        // 0x4050c3\n        return 0xffffffff;\n    }\n    uint64_t v8 = *(int64_t *)(v5 + 224); // 0x404fe0\n    int64_t * v9 = (int64_t *)(v5 + 64); // 0x404fea\n    uint64_t v10 = *v9 + v8; // 0x404fea\n    int64_t * v11 = (int64_t *)(v5 + 72); // 0x404fee\n    *v11 = *v11 + (int64_t)(v10 < v8);\n    *v9 = v10;\n    if (*(char *)(v5 + 240) != 0) {\n        // 0x4050d0\n        *(int64_t *)(v5 + 88) = -1;\n    }\n    int64_t v12 = v5 + 96; // 0x405004\n    *v7 = -1;\n    memset((int64_t *)(v8 + v12), 0, 128 - (int32_t)v8);\n    function_403680(v5, v12);\n    int64_t v13 = v5; // 0x40503f\n    int64_t v14 = &v4;\n    uint64_t v15 = *(int64_t *)v13; // 0x405040\n    int64_t v16 = v14 + 8; // 0x405043\n    *(char *)v14 = (char)v15;\n    *(char *)(v14 | 1) = (char)(v15 / 256);\n    *(char *)(v14 | 2) = (char)(v15 / 0x10000);\n    *(char *)(v14 | 3) = (char)(v15 / 0x1000000);\n    *(char *)(v14 | 4) = (char)(v15 / 0x100000000);\n    *(char *)(v14 | 5) = (char)(v15 / 0x10000000000);\n    *(char *)(v14 | 7) = (char)(v15 / 0x100000000000000);\n    *(char *)(v14 | 6) = (char)(v15 / 0x1000000000000);\n    v13 += 8;\n    int64_t v17; // bp-24, 0x404fa0\n    while (v16 != (int64_t)&v17) {\n        // 0x405040\n        v14 = v16;\n        v15 = *(int64_t *)v13;\n        v16 = v14 + 8;\n        *(char *)v14 = (char)v15;\n        *(char *)(v14 | 1) = (char)(v15 / 256);\n        *(char *)(v14 | 2) = (char)(v15 / 0x10000);\n        *(char *)(v14 | 3) = (char)(v15 / 0x1000000);\n        *(char *)(v14 | 4) = (char)(v15 / 0x100000000);\n        *(char *)(v14 | 5) = (char)(v15 / 0x10000000000);\n        *(char *)(v14 | 7) = (char)(v15 / 0x100000000000000);\n        *(char *)(v14 | 6) = (char)(v15 / 0x1000000000000);\n        v13 += 8;\n    }\n    // 0x40509c\n    memcpy((int64_t *)a2, &v4, (int32_t)*v6);\n    memset(&v4, 0, 64);\n    // 0x4050c3\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "4051bd",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6) {\n    // 0x4050f0\n    if (a1 == 0 || a3 == 0 == (a4 != 0) || a5 == 0 == (a6 != 0) || a2 < 65 != a6 < 65) {\n        // 0x405187\n        return 0xffffffff;\n    }\n    int64_t v1; // bp-296, 0x4050f0\n    if (a6 != 0) {\n        // 0x4051a0\n        if ((int32_t)function_404e90(&v1, a2, a5, a6) < 0) {\n            // 0x405187\n            return 0xffffffff;\n        }\n    } else {\n        // 0x405158\n        if ((int32_t)function_404e20(&v1, a2) < 0) {\n            // 0x405187\n            return 0xffffffff;\n        }\n    }\n    if (a4 != 0) {\n        // 0x405169\n        function_404c20((int64_t)&v1, (int64_t *)a3, a4);\n    }\n    // 0x405177\n    function_404fa0(&v1, a1, a2);\n    // 0x405187\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "4051c5",
            "decompiledFuncCode": "int64_t function_4051c0(void) {\n    // 0x4051c0\n    int64_t v1; // 0x4051c0\n    return function_4050f0(v1, v1, v1, v1, v1, v1);\n}\n"
        },
        {
            "funcName": "function_4051d0",
            "funcStartAddr": "4051d0",
            "funcEndAddr": "4052b7",
            "decompiledFuncCode": "int64_t function_4051d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * mem = malloc(0x8000); // 0x4051ef\n    if (mem == NULL) {\n        // 0x40528b\n        return 0xffffffff;\n    }\n    int64_t v1 = (int64_t)mem; // 0x4051ef\n    int64_t v2; // bp-312, 0x4051d0\n    function_404e20(&v2, a3);\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    int64_t v3; // 0x405240\n    while (true) {\n        int64_t v4 = 0;\n        int32_t items_read = fread((int64_t *)(v4 + v1), 1, 0x8000 - (int32_t)v4, stream); // 0x40523b\n        v3 = v4 + (int64_t)items_read;\n        while (v3 != 0x8000) {\n            if (items_read == 0) {\n                // break (via goto) -> 0x405260\n                goto lab_0x405260;\n            }\n            // 0x405220\n            if (feof(stream) != 0) {\n                goto lab_0x40526e;\n            }\n            v4 = v3;\n            items_read = fread((int64_t *)(v4 + v1), 1, 0x8000 - (int32_t)v4, stream);\n            v3 = v4 + (int64_t)items_read;\n        }\n        // 0x40524c\n        function_404f80(&v2, v1, 0x8000);\n    }\n  lab_0x405260:\n    // 0x405260\n    if (ferror(stream) != 0) {\n        // 0x405283\n        free(mem);\n        // 0x40528b\n        return 0xffffffff;\n    }\n  lab_0x40526e:\n    if (v3 != 0) {\n        // 0x4052a0\n        function_404f80(&v2, v1, v3);\n    }\n    // 0x405273\n    function_404fa0(&v2, a2, a3);\n    // 0x405283\n    free(mem);\n    // 0x40528b\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "4052ca",
            "decompiledFuncCode": "int64_t function_4052c0(void) {\n    // 0x4052c0\n    return function_403280(1);\n}\n"
        },
        {
            "funcName": "function_4052d0",
            "funcStartAddr": "4052d0",
            "funcEndAddr": "4053e6",
            "decompiledFuncCode": "int64_t function_4052d0(int64_t a1, char (**a2)[8], int32_t a3, int32_t n) {\n    char * str = (char *)a1; // 0x4052f1\n    int32_t len = strlen(str); // 0x4052f1\n    if (a2 == NULL) {\n        // 0x4053bd\n        return -1;\n    }\n    int64_t v1 = n;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = a3;\n    int64_t v4 = -1;\n    int64_t * str3 = (int64_t *)(v4 * v1 + v3);\n    int32_t v5 = 0;\n    int64_t v6 = 0; // 0x405357\n    int64_t v7 = v3; // 0x4052d0\n    int64_t v8 = v2; // 0x40535e\n    int64_t str4; // 0x4052d0\n    int64_t v9; // 0x4052d0\n    int32_t v10; // 0x4052d0\n    int32_t v11; // 0x4052d0\n    int32_t v12; // 0x4052d0\n    int64_t v13; // 0x4052d0\n    int64_t result; // 0x4052d0\n    int32_t v14; // 0x405353\n    char * str2; // 0x405372\n    while (true) {\n        // 0x405367\n        str4 = v7;\n        v9 = v6;\n        v11 = v5;\n        str2 = (char *)v8;\n        v10 = v11;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40537b\n            result = v9;\n            if (len == strlen(str2)) {\n                // 0x4053bd\n                return result;\n            }\n            if (v4 == -1) {\n                // break -> 0x40538f\n                break;\n            }\n            // 0x405320\n            v10 = 1;\n            if (a3 != 0) {\n                // 0x40532e\n                v14 = memcmp(str3, (int64_t *)str4, n) != 0 ? 1 : 0x1000000 * v11 >> 24;\n                v10 = v14;\n            }\n        }\n        // 0x405357\n        v5 = v10;\n        v6 = v9 + 1;\n        v8 = *(int64_t *)(8 * v6 + v2);\n        v7 = str4 + v1;\n        v13 = v4;\n        v12 = v5;\n        if (v8 == 0) {\n            return (char)v12 == 0 ? v13 : -2;\n        }\n    }\n    int64_t v15 = v9 + 1; // 0x405393\n    int64_t v16 = *(int64_t *)(8 * v15 + v2); // 0x40539a\n    v13 = v9;\n    v12 = v11;\n    while (v16 != 0) {\n        // 0x405367\n        v4 = v9;\n        str3 = (int64_t *)(v4 * v1 + v3);\n        v5 = v11;\n        v6 = v15;\n        v7 = str4 + v1;\n        v8 = v16;\n        while (true) {\n            // 0x405367\n            str4 = v7;\n            v9 = v6;\n            v11 = v5;\n            str2 = (char *)v8;\n            v10 = v11;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40537b\n                result = v9;\n                if (len == strlen(str2)) {\n                    // 0x4053bd\n                    return result;\n                }\n                if (v4 == -1) {\n                    // break -> 0x40538f\n                    break;\n                }\n                // 0x405320\n                v10 = 1;\n                if (a3 != 0) {\n                    // 0x40532e\n                    v14 = memcmp(str3, (int64_t *)str4, n) != 0 ? 1 : 0x1000000 * v11 >> 24;\n                    v10 = v14;\n                }\n            }\n            // 0x405357\n            v5 = v10;\n            v6 = v9 + 1;\n            v8 = *(int64_t *)(8 * v6 + v2);\n            v7 = str4 + v1;\n            v13 = v4;\n            v12 = v5;\n            if (v8 == 0) {\n                return (char)v12 == 0 ? v13 : -2;\n            }\n        }\n        // 0x40538f\n        v15 = v9 + 1;\n        v16 = *(int64_t *)(8 * v15 + v2);\n        v13 = v9;\n        v12 = v11;\n    }\n  lab_0x4053a8:\n    // 0x4053bd\n    return (char)v12 == 0 ? v13 : -2;\n}\n"
        },
        {
            "funcName": "function_4053f0",
            "funcStartAddr": "4053f0",
            "funcEndAddr": "405461",
            "decompiledFuncCode": "int64_t function_4053f0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x4053f0\n    if (a3 == -1) {\n        // 0x405450\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x405405\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x405414\n    function_4073f0(1, a1);\n    function_4070e0(0, 8, a2);\n    error(0, 0, format);\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_405470",
            "funcStartAddr": "405470",
            "funcEndAddr": "405588",
            "decompiledFuncCode": "int64_t function_405470(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40549d\n    fputs_unlocked(v1, g33);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x405510\n        int64_t v5; // 0x405517\n        int64_t v6; // 0x405537\n        while (v3 != 0) {\n            // 0x4054fb\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x4054c0\n                break;\n            }\n            // 0x40550d\n            v4 = v3 + 1;\n            v5 = function_407410(v2);\n            __fprintf_chk(g33, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x405540\n                goto lab_0x405540;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x4054c3\n        int64_t v8 = function_407410(v2); // 0x4054cd\n        __fprintf_chk(g33, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x4054ed\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x4054fb\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x4054c0\n                    break;\n                }\n                // 0x40550d\n                v4 = v3 + 1;\n                v5 = function_407410(v2);\n                __fprintf_chk(g33, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x405540\n                    goto lab_0x405540;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x4054c0\n            v7 = v3 + 1;\n            v8 = function_407410(v2);\n            __fprintf_chk(g33, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x405540:;\n    int64_t v10 = (int64_t)g33; // 0x405540\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x405547\n    uint64_t result = *v11; // 0x405547\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x405570\n        return __overflow(g33, 10);\n    }\n    // 0x405551\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "405600",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_4052d0(a2, (char (**)[8])a3, (int32_t)a4, (int32_t)a5); // 0x4055bc\n    int64_t result = v1; // 0x4055c4\n    if (v1 < 0) {\n        // 0x4055d8\n        function_4053f0(a1, a2, v1);\n        function_405470(a3, a4, a5);\n        result = -1;\n    }\n    // 0x4055c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "40564d",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x405600\n    if (result == 0) {\n        // 0x405641\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x405638\n    int32_t n = a4; // 0x405638\n    int64_t v1 = result; // 0x40563f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x405641\n        return result;\n    }\n    int64_t str3 = str2; // 0x40563f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x405620\n    int64_t result2 = 0; // 0x40562d\n    while (v2 != 0) {\n        // 0x40562f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x405641\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x405641\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "405658",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1) {\n    // 0x405650\n    g47 = a1;\n    int64_t result; // 0x405650\n    return result;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405668",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1) {\n    // 0x405660\n    g46 = a1;\n    int64_t result; // 0x405660\n    return result;\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "40570e",
            "decompiledFuncCode": "int64_t function_405670(void) {\n    // 0x405670\n    int32_t * err_num; // 0x405686\n    if ((int32_t)function_409690((int64_t)g30) == 0) {\n        goto lab_0x40569c;\n    } else {\n        // 0x405686\n        err_num = __errno_location();\n        if (g46 == 0) {\n            goto lab_0x4056b3;\n        } else {\n            // 0x405697\n            if (*err_num != 32) {\n                goto lab_0x4056b3;\n            } else {\n                goto lab_0x40569c;\n            }\n        }\n    }\n  lab_0x40569c:;\n    int64_t result = function_409690((int64_t)g33); // 0x4056a3\n    if ((int32_t)result == 0) {\n        // 0x4056ac\n        return result;\n    }\n    // 0x4056ee\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x4056b3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4056bf\n    if (g47 == 0) {\n        // 0x4056f9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4056d3\n        error(0, *err_num, \"%s: %s\", (char *)function_407260((int64_t)g47), v1);\n    }\n    // 0x4056ee\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "405715",
            "decompiledFuncCode": "int64_t function_405710(void) {\n    // 0x405710\n    int64_t fd; // 0x405710\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405741",
            "decompiledFuncCode": "int64_t function_405720(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x405720\n    if (stream == 0) {\n        // 0x405740\n        int64_t result; // 0x405720\n        return result;\n    }\n    // 0x405725\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057e3",
            "decompiledFuncCode": "int64_t function_405750(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x405757\n    int64_t result = (int64_t)file; // 0x405757\n    if (file == NULL) {\n        // 0x405771\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x405767\n    if (v1 >= 3) {\n        // 0x405771\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_407430((int64_t)v1, v2); // 0x40578a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x4057c8\n        function_4085e0(result, v2);\n        // 0x405771\n        return 0;\n    }\n    // 0x40578e\n    if ((int32_t)function_4085e0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x4057a0\n        if (v4 != NULL) {\n            // 0x405771\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x4057ad\n    close(fd);\n    // 0x405771\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405889",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t str) {\n    // 0x4057f0\n    if (str == 0) {\n        // 0x405869\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4057fe\n    int64_t result = (int64_t)found_char_pos; // 0x4057fe\n    if (found_char_pos == NULL) {\n        // 0x405859\n        g48 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x405808\n    if (v1 - str < 7) {\n        // 0x405859\n        g48 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x405818\n    bool v2; // 0x4057f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4057f0\n    int64_t v5 = result - 6; // 0x4057f0\n    int64_t v6 = 7; // 0x405826\n    unsigned char v7 = *(char *)v5; // 0x405826\n    char v8 = *(char *)v4; // 0x405826\n    char v9 = v8; // 0x405826\n    bool v10 = false; // 0x405826\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x405830\n    int64_t v13 = v1; // 0x405830\n    int64_t v14 = 3; // 0x405830\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x405859\n        g48 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x405842\n    char v16 = *(char *)v12; // 0x405842\n    char v17 = v16; // 0x405842\n    bool v18 = false; // 0x405842\n    while (v15 == v16) {\n        // 0x405832\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40584c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40584e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x405859\n    g48 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "405982",
            "decompiledFuncCode": "int64_t function_405890(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4058a4\n    int64_t result = (int64_t)v1; // 0x4058a4\n    if (result != a1) {\n        // 0x4058b1\n        return result;\n    }\n    int64_t v2 = function_409750(); // 0x4058c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x405976\n    if (v3 == 85) {\n        // 0x4058d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x405968\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4058fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40590b\n        // 0x4058b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x405968\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40594d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40595a\n    // 0x4058b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059e7",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405990\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4059d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059e7",
            "funcStartAddr": "4059e7",
            "funcEndAddr": "406bb1",
            "decompiledFuncCode": "int64_t function_4059e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x405a31\n    int64_t v3 = 0; // 0x405a31\n    int64_t v4; // 0x4059e7\n    int64_t v5; // 0x4059e7\n    int64_t v6; // 0x4059e7\n    int64_t v7; // 0x4059e7\n    int64_t v8; // 0x4059e7\n    int64_t v9; // 0x4059e7\n    int64_t v10; // 0x4059e7\n    int64_t v11; // 0x4059e7\n    int64_t v12; // 0x4059e7\n    int64_t v13; // 0x4059e7\n    int64_t v14; // 0x4059e7\n    int64_t v15; // 0x4059e7\n    int64_t v16; // 0x4059e7\n    int64_t v17; // 0x4059e7\n    int64_t v18; // 0x4059e7\n    int64_t result; // 0x4059e7\n    int64_t v19; // 0x4059e7\n    int32_t wc; // bp+132, 0x4059e7\n    int64_t ps; // bp+136, 0x4059e7\n    char v20; // 0x405fa0\n    int64_t v21; // 0x405fa0\n    int64_t v22; // 0x406348\n    int64_t v23; // 0x4059e7\n    int64_t v24; // 0x406367\n    int32_t v25; // 0x4059e7\n    while (true) {\n      lab_0x405a38_2:\n        // 0x405a38\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4059e7\n        int64_t v27; // 0x405a6c\n        while (true) {\n          lab_0x405a38:\n            // 0x405a38\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x405a43\n            if (v15 == -1) {\n                // 0x405a45\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405a53\n            if (v28) {\n                // break (via goto) -> 0x4061b8\n                goto lab_0x4061b8;\n            }\n            // 0x405a5c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g64 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40604b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x405b91;\n                    }\n                    // 0x40646d\n                    v26 = v5 + 1;\n                    goto lab_0x405a38;\n                }\n                case 7: {\n                    goto lab_0x405b91;\n                }\n                case 8: {\n                    goto lab_0x405b91;\n                }\n                case 9: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x405b91;\n                }\n                case 12: {\n                    goto lab_0x405b91;\n                }\n                case 13: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x405b5d;\n                }\n                case 36: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x405b91;\n                }\n                case 38: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x405b91;\n                }\n                case 44: {\n                    goto lab_0x405b91;\n                }\n                case 45: {\n                    goto lab_0x405b91;\n                }\n                case 46: {\n                    goto lab_0x405b91;\n                }\n                case 47: {\n                    goto lab_0x405b91;\n                }\n                case 48: {\n                    goto lab_0x405b91;\n                }\n                case 49: {\n                    goto lab_0x405b91;\n                }\n                case 50: {\n                    goto lab_0x405b91;\n                }\n                case 51: {\n                    goto lab_0x405b91;\n                }\n                case 52: {\n                    goto lab_0x405b91;\n                }\n                case 53: {\n                    goto lab_0x405b91;\n                }\n                case 54: {\n                    goto lab_0x405b91;\n                }\n                case 55: {\n                    goto lab_0x405b91;\n                }\n                case 56: {\n                    goto lab_0x405b91;\n                }\n                case 57: {\n                    goto lab_0x405b91;\n                }\n                case 58: {\n                    goto lab_0x405b91;\n                }\n                case 59: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x405b91;\n                }\n                case 66: {\n                    goto lab_0x405b91;\n                }\n                case 67: {\n                    goto lab_0x405b91;\n                }\n                case 68: {\n                    goto lab_0x405b91;\n                }\n                case 69: {\n                    goto lab_0x405b91;\n                }\n                case 70: {\n                    goto lab_0x405b91;\n                }\n                case 71: {\n                    goto lab_0x405b91;\n                }\n                case 72: {\n                    goto lab_0x405b91;\n                }\n                case 73: {\n                    goto lab_0x405b91;\n                }\n                case 74: {\n                    goto lab_0x405b91;\n                }\n                case 75: {\n                    goto lab_0x405b91;\n                }\n                case 76: {\n                    goto lab_0x405b91;\n                }\n                case 77: {\n                    goto lab_0x405b91;\n                }\n                case 78: {\n                    goto lab_0x405b91;\n                }\n                case 79: {\n                    goto lab_0x405b91;\n                }\n                case 80: {\n                    goto lab_0x405b91;\n                }\n                case 81: {\n                    goto lab_0x405b91;\n                }\n                case 82: {\n                    goto lab_0x405b91;\n                }\n                case 83: {\n                    goto lab_0x405b91;\n                }\n                case 84: {\n                    goto lab_0x405b91;\n                }\n                case 85: {\n                    goto lab_0x405b91;\n                }\n                case 86: {\n                    goto lab_0x405b91;\n                }\n                case 87: {\n                    goto lab_0x405b91;\n                }\n                case 88: {\n                    goto lab_0x405b91;\n                }\n                case 89: {\n                    goto lab_0x405b91;\n                }\n                case 90: {\n                    goto lab_0x405b91;\n                }\n                case 91: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x405b91;\n                }\n                case 94: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x405b91;\n                }\n                case 96: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x405b91;\n                }\n                case 98: {\n                    goto lab_0x405b91;\n                }\n                case 99: {\n                    goto lab_0x405b91;\n                }\n                case 100: {\n                    goto lab_0x405b91;\n                }\n                case 101: {\n                    goto lab_0x405b91;\n                }\n                case 102: {\n                    goto lab_0x405b91;\n                }\n                case 103: {\n                    goto lab_0x405b91;\n                }\n                case 104: {\n                    goto lab_0x405b91;\n                }\n                case 105: {\n                    goto lab_0x405b91;\n                }\n                case 106: {\n                    goto lab_0x405b91;\n                }\n                case 107: {\n                    goto lab_0x405b91;\n                }\n                case 108: {\n                    goto lab_0x405b91;\n                }\n                case 109: {\n                    goto lab_0x405b91;\n                }\n                case 110: {\n                    goto lab_0x405b91;\n                }\n                case 111: {\n                    goto lab_0x405b91;\n                }\n                case 112: {\n                    goto lab_0x405b91;\n                }\n                case 113: {\n                    goto lab_0x405b91;\n                }\n                case 114: {\n                    goto lab_0x405b91;\n                }\n                case 115: {\n                    goto lab_0x405b91;\n                }\n                case 116: {\n                    goto lab_0x405b91;\n                }\n                case 117: {\n                    goto lab_0x405b91;\n                }\n                case 118: {\n                    goto lab_0x405b91;\n                }\n                case 119: {\n                    goto lab_0x405b91;\n                }\n                case 120: {\n                    goto lab_0x405b91;\n                }\n                case 121: {\n                    goto lab_0x405b91;\n                }\n                case 122: {\n                    goto lab_0x405b91;\n                }\n                case 123: {\n                    goto lab_0x405b35;\n                }\n                case 124: {\n                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x405b35;\n                }\n                case 126: {\n                    goto lab_0x405b5d;\n                }\n                default: {\n                    goto lab_0x405f35;\n                }\n            }\n        }\n      lab_0x405f35:\n        if (v23 != 1) {\n            // 0x4062a0\n            ps = 0;\n            int64_t len = v15; // 0x4062b0\n            if (v15 == -1) {\n                // 0x4062b2\n                len = strlen((char *)str);\n            }\n            // 0x4062de\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40633f:\n                // 0x40633f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x406344\n                int64_t v30 = v29 + str;\n                v24 = function_409610(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4068ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4068ba_2;\n                    }\n                    case -2: {\n                        // 0x40699d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4069d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4069da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4069e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4069e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4068ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4068ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x406310;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4063bc\n                        char v34 = *(char *)v33; // 0x4063cd\n                        unsigned char v35; // 0x4059e7\n                        if (v34 < 125) {\n                            // 0x4063d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4063ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4063c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4063cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4063d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4063ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4063c0\n                            v33++;\n                        }\n                        goto lab_0x406310;\n                    }\n                }\n            }\n            goto lab_0x4068ba_2;\n        } else {\n            // 0x405f84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x405b91;\n        }\n    }\n  lab_0x4061b8:\n    // 0x4061b8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x406aba\n        if (v8 > result) {\n            // 0x406ac3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405de7\n        return result;\n    }\n    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x405b91:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x405ba0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x405daa_2;\n        }\n    }\n    int64_t v39 = result; // 0x405ca1\n    char v40 = v20; // 0x405ca1\n    int64_t v41 = v38; // 0x405ca1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x405ca1\n    int64_t v43 = v36; // 0x405ca1\n    goto lab_0x405c1d;\n  lab_0x405daa_2:\n    // 0x405de7\n    return function_405990(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4068ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x405b91;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40648e\n        int64_t v50 = v5 + 1; // 0x406571\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x406578\n        char v52 = v20; // 0x406578\n        int64_t v53 = result; // 0x406578\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x406541\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x406545\n            int64_t v56 = v54 + 1; // 0x40654a\n            int64_t v57 = v51 + 1; // 0x406571\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40653c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x406541\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x406545\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x405c1d;\n    }\n  lab_0x406310:\n    // 0x406310\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40632f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406332\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4068ba\n        goto lab_0x4068ba_2;\n    }\n    goto lab_0x40633f;\n  lab_0x405b5d:\n    // 0x405b5d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x405daa_2;\n    }\n    goto lab_0x405b91;\n  lab_0x405b35:;\n    bool v60 = v15 == 1; // 0x405b40\n    if (v15 == -1) {\n        // 0x405b42\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x405b4e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x405b91;\n    } else {\n        goto lab_0x405b5d;\n    }\n  lab_0x405c1d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x405c22\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x405c26\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x405a38_2;\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406d5e",
            "decompiledFuncCode": "int64_t function_406bc0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x406bc2\n    int32_t * v3 = __errno_location(); // 0x406bdc\n    int64_t v4 = (int64_t)g22; // 0x406be1\n    int32_t v5 = *v3; // 0x406beb\n    int64_t v6 = v4; // 0x406c01\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406d59\n            function_407c30(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x406c10\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x406c17\n        int64_t v9; // 0x406bc0\n        if (g22 == &g23) {\n            int64_t v10 = function_407a40(0, v8); // 0x406d3a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x406d3f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_407a40(v4, v8); // 0x406c2b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x406c3a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x406c3a\n        int32_t v14 = v7; // 0x406c41\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x406c71\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x406c7b\n    int64_t * v17 = (int64_t *)v15; // 0x406c7e\n    uint64_t v18 = *v17; // 0x406c7e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x406c81\n    int64_t result = *v19; // 0x406c81\n    int64_t v20; // 0x406bc0\n    uint64_t v21 = function_405990(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x406ca4\n    if (v18 > v21) {\n        // 0x406d1b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x406cb7\n    *v17 = v22;\n    if (result != (int64_t)&g49) {\n        // 0x406cc7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4079e0(v22); // 0x406ce1\n    *v19 = result2;\n    int64_t v23; // 0x406bc0\n    function_405990(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x406d1b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406d60",
            "funcStartAddr": "406d60",
            "funcEndAddr": "406d94",
            "decompiledFuncCode": "int64_t function_406d60(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x406d67\n    int64_t result = function_407be0(a1 == 0 ? (int64_t)&g50 : a1, 56); // 0x406d86\n    return result;\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406daf",
            "decompiledFuncCode": "int64_t function_406da0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g50 : a1); // 0x406dac\n    return result;\n}\n"
        },
        {
            "funcName": "function_406db0",
            "funcStartAddr": "406db0",
            "funcEndAddr": "406dbf",
            "decompiledFuncCode": "int64_t function_406db0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g50 : a1; // 0x406db8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g50;\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "406df3",
            "decompiledFuncCode": "int64_t function_406dc0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g50 + 8 : a1 + 8; // 0x406dd9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x406dde\n    uint32_t v3 = *v2; // 0x406dde\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406de2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_406e00",
            "funcStartAddr": "406e00",
            "funcEndAddr": "406e13",
            "decompiledFuncCode": "int64_t function_406e00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g50 + 4 : a1 + 4); // 0x406e0c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_406e20",
            "funcStartAddr": "406e20",
            "funcEndAddr": "406e4b",
            "decompiledFuncCode": "int64_t function_406e20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g50 : a1; // 0x406e28\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x406e45\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406e3c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g50;\n}\n"
        },
        {
            "funcName": "function_406e50",
            "funcStartAddr": "406e50",
            "funcEndAddr": "406ec2",
            "decompiledFuncCode": "int64_t function_406e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g50 : a5; // 0x406e72\n    int32_t * v2 = __errno_location(); // 0x406e7b\n    uint32_t v3 = *(int32_t *)v1; // 0x406e9b\n    int64_t result = function_405990(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x406eaa\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ed0",
            "funcStartAddr": "406ed0",
            "funcEndAddr": "406fb1",
            "decompiledFuncCode": "int64_t function_406ed0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g50 : a4; // 0x406ef2\n    int32_t * v2 = __errno_location(); // 0x406ef8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x406f17\n    int32_t * v4 = (int32_t *)v1; // 0x406f1a\n    int64_t v5 = function_405990(0, 0, a1, a2, (int64_t)*v4, v3); // 0x406f35\n    int64_t v6 = v5 + 1; // 0x406f3a\n    int64_t result = function_4079e0(v6); // 0x406f4f\n    function_405990(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x406f94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x406f9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406fc0",
            "funcStartAddr": "406fc0",
            "funcEndAddr": "406fca",
            "decompiledFuncCode": "int64_t function_406fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406fc0\n    return function_406ed0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_406fd0",
            "funcStartAddr": "406fd0",
            "funcEndAddr": "407065",
            "decompiledFuncCode": "int64_t function_406fd0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x406fd0\n    int64_t v2 = v1; // 0x406fd0\n    int64_t v3 = v2; // 0x406fe4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x407003\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g65;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x407000\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g65;\n        }\n    }\n    int64_t v6 = v3; // 0x40701d\n    if (g23 != 0x60e340) {\n        // 0x40701f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g49;\n        v6 = &g65;\n    }\n    int64_t result = v6; // 0x407041\n    if (g22 != &g23) {\n        // 0x407043\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g65;\n    }\n    // 0x407056\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407070",
            "funcStartAddr": "407070",
            "funcEndAddr": "407081",
            "decompiledFuncCode": "int64_t function_407070(void) {\n    // 0x407070\n    int64_t v1; // 0x407070\n    return function_406bc0(v1, v1, -1, (int64_t *)&g50);\n}\n"
        },
        {
            "funcName": "function_407090",
            "funcStartAddr": "407090",
            "funcEndAddr": "40709a",
            "decompiledFuncCode": "int64_t function_407090(void) {\n    // 0x407090\n    int64_t v1; // 0x407090\n    return function_406bc0(v1, v1, v1, (int64_t *)&g50);\n}\n"
        },
        {
            "funcName": "function_4070a0",
            "funcStartAddr": "4070a0",
            "funcEndAddr": "4070b6",
            "decompiledFuncCode": "int64_t function_4070a0(int64_t a1) {\n    // 0x4070a0\n    return function_406bc0(0, a1, -1, (int64_t *)&g50);\n}\n"
        },
        {
            "funcName": "function_4070c0",
            "funcStartAddr": "4070c0",
            "funcEndAddr": "4070d2",
            "decompiledFuncCode": "int64_t function_4070c0(int64_t a1, int64_t a2) {\n    // 0x4070c0\n    return function_406bc0(0, a1, a2, (int64_t *)&g50);\n}\n"
        },
        {
            "funcName": "function_4070e0",
            "funcStartAddr": "4070e0",
            "funcEndAddr": "407148",
            "decompiledFuncCode": "int64_t function_4070e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4070f0\n    return function_406bc0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407150",
            "funcStartAddr": "407150",
            "funcEndAddr": "4071b4",
            "decompiledFuncCode": "int64_t function_407150(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407160\n    return function_406bc0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4071c0",
            "funcStartAddr": "4071c0",
            "funcEndAddr": "4071cc",
            "decompiledFuncCode": "int64_t function_4071c0(int64_t a1, int64_t a2) {\n    // 0x4071c0\n    return function_4070e0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4071d0",
            "funcStartAddr": "4071d0",
            "funcEndAddr": "4071df",
            "decompiledFuncCode": "int64_t function_4071d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4071d0\n    return function_407150(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4071e0",
            "funcStartAddr": "4071e0",
            "funcEndAddr": "407250",
            "decompiledFuncCode": "int64_t function_4071e0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g50); // 0x4071ed\n    int128_t v2 = __asm_movdqa(g51); // 0x4071f5\n    int128_t v3 = __asm_movdqa(g52); // 0x4071fd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x407212\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x407228\n    uint32_t v6 = *v5; // 0x407228\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40722d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_406bc0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_407250",
            "funcStartAddr": "407250",
            "funcEndAddr": "40725d",
            "decompiledFuncCode": "int64_t function_407250(int64_t a1, int64_t a2) {\n    // 0x407250\n    return function_4071e0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_407260",
            "funcStartAddr": "407260",
            "funcEndAddr": "407271",
            "decompiledFuncCode": "int64_t function_407260(int64_t a1) {\n    // 0x407260\n    return function_4071e0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_407280",
            "funcStartAddr": "407280",
            "funcEndAddr": "40728a",
            "decompiledFuncCode": "int64_t function_407280(void) {\n    // 0x407280\n    int64_t v1; // 0x407280\n    return function_4071e0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_407290",
            "funcStartAddr": "407290",
            "funcEndAddr": "4072fe",
            "decompiledFuncCode": "int64_t function_407290(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4072aa\n    return function_406bc0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407300",
            "funcStartAddr": "407300",
            "funcEndAddr": "40736c",
            "decompiledFuncCode": "int64_t function_407300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g50); // 0x407307\n    int128_t v2 = __asm_movdqa(g51); // 0x40730f\n    int128_t v3 = __asm_movdqa(g52); // 0x407317\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x407339\n    if (a2 == 0 || a3 == 0) {\n        // 0x407367\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40734a\n    return function_406bc0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_407370",
            "funcStartAddr": "407370",
            "funcEndAddr": "407379",
            "decompiledFuncCode": "int64_t function_407370(void) {\n    // 0x407370\n    int64_t v1; // 0x407370\n    return function_407300(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_407380",
            "funcStartAddr": "407380",
            "funcEndAddr": "407397",
            "decompiledFuncCode": "int64_t function_407380(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407380\n    return function_407300(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4073a0",
            "funcStartAddr": "4073a0",
            "funcEndAddr": "4073b3",
            "decompiledFuncCode": "int64_t function_4073a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4073a0\n    return function_407300(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4073c0",
            "funcStartAddr": "4073c0",
            "funcEndAddr": "4073ca",
            "decompiledFuncCode": "int64_t function_4073c0(void) {\n    // 0x4073c0\n    int64_t v1; // 0x4073c0\n    return function_406bc0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_4073d0",
            "funcStartAddr": "4073d0",
            "funcEndAddr": "4073e2",
            "decompiledFuncCode": "int64_t function_4073d0(int64_t a1, int64_t a2) {\n    // 0x4073d0\n    return function_406bc0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4073f0",
            "funcStartAddr": "4073f0",
            "funcEndAddr": "407401",
            "decompiledFuncCode": "int64_t function_4073f0(int64_t a1, int64_t a2) {\n    // 0x4073f0\n    return function_406bc0(a1, a2, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_407410",
            "funcStartAddr": "407410",
            "funcEndAddr": "407426",
            "decompiledFuncCode": "int64_t function_407410(int64_t a1) {\n    // 0x407410\n    return function_406bc0(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_407430",
            "funcStartAddr": "407430",
            "funcEndAddr": "40743e",
            "decompiledFuncCode": "int64_t function_407430(int64_t a1, int64_t a2) {\n    // 0x407430\n    int64_t v1; // 0x407430\n    return function_408660(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_407440",
            "funcStartAddr": "407440",
            "funcEndAddr": "40781d",
            "decompiledFuncCode": "int64_t function_407440(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4074d8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40745c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x407476\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4074bb\n    if (a6 < 10) {\n        // 0x4074ca\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4075c2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "407840",
            "decompiledFuncCode": "int64_t function_407820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407820\n    if (a5 == 0) {\n        // 0x40783b\n        return function_407440(a1, a2, a3, a4, a5, 0, (int64_t)&g65);\n    }\n    int64_t v1 = 0; // 0x407827\n    v1++;\n    int64_t v2 = v1; // 0x407839\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x407830\n        v1++;\n        v2 = v1;\n    }\n    // 0x40783b\n    return function_407440(a1, a2, a3, a4, a5, v2, (int64_t)&g65);\n}\n"
        },
        {
            "funcName": "function_407840",
            "funcStartAddr": "407840",
            "funcEndAddr": "4078a0",
            "decompiledFuncCode": "int64_t function_407840(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x407840\n    int64_t v3 = &v2; // 0x407840\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x407873\n    int64_t v6; // 0x40785d\n    int64_t * v7; // 0x40787b\n    int64_t v8; // 0x40787b\n    int64_t v9; // 0x407887\n    if (v5 < 48) {\n        // 0x407850\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x407893\n            break;\n        }\n    } else {\n        // 0x40787b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x407893\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x407871\n    while (v4 != 9) {\n        // 0x407869\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x407850\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x407893\n                break;\n            }\n        } else {\n            // 0x40787b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x407893\n                break;\n            }\n        }\n        // 0x407869\n        v10 = 10;\n    }\n    // 0x407893\n    return function_407440(a1, a2, a3, a4, v3, v10, (int64_t)&g65);\n}\n"
        },
        {
            "funcName": "function_4078a0",
            "funcStartAddr": "4078a0",
            "funcEndAddr": "40795c",
            "decompiledFuncCode": "int64_t function_4078a0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4078a0\n    int64_t v1; // bp-168, 0x4078a0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4078a0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4078a0\n    int64_t v8; // 0x4078a0\n    int64_t v9; // bp-56, 0x4078a0\n    int64_t v10; // 0x407905\n    int64_t v11; // 0x407929\n    if ((int32_t)v6 < 48) {\n        // 0x4078f0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x407940\n            break;\n        }\n    } else {\n        // 0x407922\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x407940\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40791a\n    int64_t v13 = 10; // 0x40791a\n    while (v5 != 9) {\n        // 0x40791c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4078f0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x407940\n                break;\n            }\n        } else {\n            // 0x407922\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x407940\n                break;\n            }\n        }\n        // 0x407912\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x407940\n    int64_t v14; // bp-136, 0x4078a0\n    int64_t result = function_407440(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g65); // 0x40794f\n    return result;\n}\n"
        },
        {
            "funcName": "function_407960",
            "funcStartAddr": "407960",
            "funcEndAddr": "4079d4",
            "decompiledFuncCode": "int64_t function_407960(int64_t a1) {\n    // 0x407960\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4079c3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_4079e0",
            "funcStartAddr": "4079e0",
            "funcEndAddr": "4079fa",
            "decompiledFuncCode": "int64_t function_4079e0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4079e4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4079f3\n        return (int64_t)mem;\n    }\n    // 0x4079f5\n    function_407c30(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407a00",
            "funcStartAddr": "407a00",
            "funcEndAddr": "407a21",
            "decompiledFuncCode": "int64_t function_407a00(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x407a03\n    int64_t v2 = v1; // 0x407a03\n    if (v2 < 0) {\n        // 0x407a1b\n        function_407c30(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407a19\n        return function_4079e0(v2);\n    }\n    // 0x407a1b\n    function_407c30(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407a32",
            "decompiledFuncCode": "int64_t function_407a30(void) {\n    // 0x407a30\n    int64_t v1; // 0x407a30\n    return function_4079e0(v1);\n}\n"
        },
        {
            "funcName": "function_407a40",
            "funcStartAddr": "407a40",
            "funcEndAddr": "407a76",
            "decompiledFuncCode": "int64_t function_407a40(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x407a68\n        free(v1);\n        return (int32_t)&g65 ^ (int32_t)&g65;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x407a51\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x407a60\n        return (int64_t)mem;\n    }\n    // 0x407a71\n    function_407c30(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407a80",
            "funcStartAddr": "407a80",
            "funcEndAddr": "407aa1",
            "decompiledFuncCode": "int64_t function_407a80(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x407a83\n    int64_t v2 = v1; // 0x407a83\n    if (v2 < 0) {\n        // 0x407a9b\n        function_407c30(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407a99\n        return function_407a40(a1, v2);\n    }\n    // 0x407a9b\n    function_407c30(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407ab0",
            "funcStartAddr": "407ab0",
            "funcEndAddr": "407b36",
            "decompiledFuncCode": "int64_t function_407ab0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x407b0b\n            function_407c30(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407a40(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x407af3\n    if (a2 == 0) {\n        // 0x407b18\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x407af8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x407b0b\n        function_407c30(a1);\n        // UNREACHABLE\n    }\n    // 0x407ada\n    *(int64_t *)a2 = v2;\n    return function_407a40(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_407b40",
            "funcStartAddr": "407b40",
            "funcEndAddr": "407b90",
            "decompiledFuncCode": "int64_t function_407b40(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x407b40\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x407b8a\n            function_407c30(a1);\n            // UNREACHABLE\n        }\n        // 0x407b62\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407a40(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x407b75\n        *(int64_t *)a2 = 128;\n        return function_407a40(0, 128);\n    }\n    // 0x407b88\n    if (a2 < 0) {\n        // 0x407b8a\n        function_407c30(a1);\n        // UNREACHABLE\n    }\n    // 0x407b62\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_407a40(a1, v1);\n}\n"
        },
        {
            "funcName": "function_407b90",
            "funcStartAddr": "407b90",
            "funcEndAddr": "407ba7",
            "decompiledFuncCode": "int64_t function_407b90(int64_t a1, int64_t a2) {\n    // 0x407b90\n    return (int64_t)memset((int64_t *)function_4079e0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_407bb0",
            "funcStartAddr": "407bb0",
            "funcEndAddr": "407bde",
            "decompiledFuncCode": "int64_t function_407bb0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x407bb7\n    if ((int64_t)v1 < 0) {\n        // 0x407bd9\n        function_407c30(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x407bd9\n        function_407c30(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x407bca\n    if (mem != NULL) {\n        // 0x407bd4\n        return (int64_t)mem;\n    }\n    // 0x407bd9\n    function_407c30(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407be0",
            "funcStartAddr": "407be0",
            "funcEndAddr": "407c08",
            "decompiledFuncCode": "int64_t function_407be0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4079e0(a2); // 0x407bef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_407c10",
            "funcStartAddr": "407c10",
            "funcEndAddr": "407c23",
            "decompiledFuncCode": "int64_t function_407c10(int64_t str) {\n    // 0x407c10\n    return function_407be0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_407c30",
            "funcStartAddr": "407c30",
            "funcEndAddr": "407c61",
            "decompiledFuncCode": "int64_t function_407c30(int64_t a1) {\n    // 0x407c30\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407c70",
            "funcStartAddr": "407c70",
            "funcEndAddr": "407d40",
            "decompiledFuncCode": "int64_t function_407c70(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x407c70\n    int64_t result2; // bp-64, 0x407c70\n    int32_t v1 = function_4081a0(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x407c9c\n    int32_t * v2; // 0x407c70\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x407d1a\n        if (v1 == 1) {\n            // 0x407d38\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x407d27\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x407d2c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x407ca0\n        if (result >= a3 && result <= a4) {\n            // 0x407d02\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x407caf\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_407410(a1); // 0x407ccc\n    int32_t v6 = *v2; // 0x407cd1\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x407ce7\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x407d02\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407d40",
            "funcStartAddr": "407d40",
            "funcEndAddr": "407d61",
            "decompiledFuncCode": "int64_t function_407d40(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x407d40\n    int64_t result; // 0x407d40\n    return result;\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "4081a0",
            "decompiledFuncCode": "int64_t function_407d70(int64_t str, int32_t a2, uint32_t base, int64_t * a4, int32_t a5, int64_t a6) {\n    if (base >= 37) {\n        // 0x40817b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g65;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x407da2\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x407dd2\n    int64_t v3 = str; // 0x407dd7\n    char v4 = c; // 0x407dd7\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x407dcc\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x407dc8\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x407dd9\n    if (v4 == 45) {\n        // 0x407e13\n        return 4;\n    }\n    int64_t str2 = a5;\n    int64_t v6; // bp-64, 0x407d70\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x407d9e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x407de4\n    int64_t * v7 = (int64_t *)endptr; // 0x407de9\n    int64_t v8 = *v7; // 0x407de9\n    char v9; // 0x407d70\n    int64_t v10; // 0x407d70\n    int64_t v11; // 0x407d70\n    int64_t v12; // 0x407d70\n    int64_t v13; // 0x407d70\n    int64_t v14; // 0x407d70\n    int64_t v15; // 0x407d70\n    if (v8 == str) {\n        // 0x407e40\n        if (c == 0 || a5 == 0) {\n            // 0x407e13\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x407e61\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x407e13\n            return 4;\n        }\n        goto lab_0x407e6f;\n    } else {\n        int32_t v16 = *v1; // 0x407df4\n        int64_t v17 = 0; // 0x407dfa\n        if (v16 != 0) {\n            // 0x407e28\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x407e13\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x407de4\n        v13 = v18;\n        v10 = v17;\n        if (a5 == 0) {\n            goto lab_0x407e10;\n        } else {\n            char c2 = *(char *)v8; // 0x407e03\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x407f63\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407e6f;\n                } else {\n                    goto lab_0x407f75;\n                }\n            } else {\n                goto lab_0x407e10;\n            }\n        }\n    }\n  lab_0x407e6f:;\n    int64_t v19 = 0x100000000 * v8 >> 32;\n    unsigned char v20 = v9 - 69;\n    int64_t v21 = 1024; // 0x407e77\n    int64_t v22 = 1; // 0x407e77\n    int64_t v23; // 0x407d70\n    int64_t v24; // 0x407d70\n    int64_t v25; // 0x407d70\n    int64_t v26; // 0x407d70\n    int64_t v27; // 0x407d70\n    int64_t v28; // 0x407d70\n    int64_t v29; // 0x407d70\n    int64_t v30; // 0x407d70\n    int64_t v31; // 0x407d70\n    int64_t v32; // 0x407d70\n    int64_t v33; // 0x407d70\n    int64_t v34; // 0x407d70\n    int64_t v35; // 0x407d70\n    int64_t v36; // 0x407d70\n    int64_t v37; // 0x407d70\n    int64_t v38; // 0x407d70\n    int64_t v39; // 0x407d70\n    int64_t v40; // 0x407d70\n    int64_t v41; // 0x407d70\n    int64_t v42; // 0x407d70\n    if (v20 < 48) {\n        // 0x407e79\n        v21 = 1024;\n        v22 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x407eda;\n        } else {\n            // 0x407e8c\n            v21 = 1024;\n            v22 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x407eda;\n            } else {\n                // 0x407ea8\n                v21 = 1000;\n                v22 = 2;\n                switch (*(char *)(v19 + 1)) {\n                    case 68: {\n                        goto lab_0x407eda;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v19 + 2); // 0x408109\n                        v21 = 1024;\n                        v22 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x407eda;\n                    }\n                    default: {\n                        // 0x407ebd\n                        g60 = v20;\n                        v21 = 1000;\n                        v22 = 2;\n                        v25 = 1024;\n                        v37 = 1;\n                        v24 = v14;\n                        v23 = v11;\n                        v38 = 1;\n                        v26 = 1024;\n                        v39 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v42 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x40807b;\n                            }\n                            case 70: {\n                                goto lab_0x407f75;\n                            }\n                            case 71: {\n                                goto lab_0x4080b3;\n                            }\n                            case 72: {\n                                goto lab_0x407f75;\n                            }\n                            case 73: {\n                                goto lab_0x407f75;\n                            }\n                            case 74: {\n                                goto lab_0x407f75;\n                            }\n                            case 75: {\n                                goto lab_0x407f3c;\n                            }\n                            case 76: {\n                                goto lab_0x407f75;\n                            }\n                            case 77: {\n                                goto lab_0x407efe;\n                            }\n                            case 78: {\n                                goto lab_0x407f75;\n                            }\n                            case 79: {\n                                goto lab_0x407f75;\n                            }\n                            case 80: {\n                                goto lab_0x408048;\n                            }\n                            case 81: {\n                                goto lab_0x407f75;\n                            }\n                            case 82: {\n                                goto lab_0x407f75;\n                            }\n                            case 83: {\n                                goto lab_0x407f75;\n                            }\n                            case 84: {\n                                goto lab_0x408018;\n                            }\n                            case 85: {\n                                goto lab_0x407f75;\n                            }\n                            case 86: {\n                                goto lab_0x407f75;\n                            }\n                            case 87: {\n                                goto lab_0x407f75;\n                            }\n                            case 88: {\n                                goto lab_0x407f75;\n                            }\n                            case 89: {\n                                goto lab_0x407fe6;\n                            }\n                            case 90: {\n                                goto lab_0x407fab;\n                            }\n                            case 91: {\n                                goto lab_0x407f75;\n                            }\n                            case 92: {\n                                goto lab_0x407f75;\n                            }\n                            case 93: {\n                                goto lab_0x407f75;\n                            }\n                            case 94: {\n                                goto lab_0x407f75;\n                            }\n                            case 95: {\n                                goto lab_0x407f75;\n                            }\n                            case 96: {\n                                goto lab_0x407f75;\n                            }\n                            case 97: {\n                                goto lab_0x407f75;\n                            }\n                            case 98: {\n                                goto lab_0x407f8f;\n                            }\n                            case 99: {\n                                goto lab_0x407f18;\n                            }\n                            case 100: {\n                                goto lab_0x407f75;\n                            }\n                            case 101: {\n                                goto lab_0x407f75;\n                            }\n                            case 102: {\n                                goto lab_0x407f75;\n                            }\n                            case 103: {\n                                goto lab_0x4080b3;\n                            }\n                            case 104: {\n                                goto lab_0x407f75;\n                            }\n                            case 105: {\n                                goto lab_0x407f75;\n                            }\n                            case 106: {\n                                goto lab_0x407f75;\n                            }\n                            case 107: {\n                                goto lab_0x407f3c;\n                            }\n                            case 108: {\n                                goto lab_0x407f75;\n                            }\n                            case 109: {\n                                goto lab_0x407efe;\n                            }\n                            case 110: {\n                                goto lab_0x407f75;\n                            }\n                            case 111: {\n                                goto lab_0x407f75;\n                            }\n                            case 112: {\n                                goto lab_0x407f75;\n                            }\n                            case 113: {\n                                goto lab_0x407f75;\n                            }\n                            case 114: {\n                                goto lab_0x407f75;\n                            }\n                            case 115: {\n                                goto lab_0x407f75;\n                            }\n                            case 116: {\n                                goto lab_0x408018;\n                            }\n                            default: {\n                                goto lab_0x407eda;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x407eda;\n    }\n  lab_0x407e10:\n    // 0x407e10\n    *a4 = v13;\n    // 0x407e13\n    return v10 & 0xffffffff;\n  lab_0x407eda:\n    // 0x407eda\n    g61 = v9 - 66;\n    v25 = v21;\n    v37 = v22;\n    v24 = v14;\n    v23 = v11;\n    v38 = v22;\n    v26 = v21;\n    v39 = v22;\n    v15 = v14;\n    v12 = v11;\n    v40 = v22;\n    v27 = v21;\n    v41 = v22;\n    v28 = v21;\n    v42 = v22;\n    v29 = v21;\n    v33 = v22;\n    v30 = v21;\n    v34 = v22;\n    v31 = v21;\n    v35 = v22;\n    v32 = v21;\n    v36 = v22;\n    int64_t v44; // 0x407d70\n    switch (v9) {\n        case 66: {\n            // 0x4080d4\n            v44 = v22;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x407f47;\n            } else {\n                // 0x4080e1\n                v24 = 1024 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x407f18;\n            }\n        }\n        case 69: {\n            goto lab_0x40807b;\n        }\n        case 71: {\n            goto lab_0x4080b3;\n        }\n        case 75: {\n            goto lab_0x407f3c;\n        }\n        case 77: {\n            goto lab_0x407efe;\n        }\n        case 80: {\n            goto lab_0x408048;\n        }\n        case 84: {\n            goto lab_0x408018;\n        }\n        case 89: {\n            goto lab_0x407fe6;\n        }\n        case 90: {\n            goto lab_0x407fab;\n        }\n        case 98: {\n            goto lab_0x407f8f;\n        }\n        case 99: {\n            goto lab_0x407f18;\n        }\n        case 103: {\n            goto lab_0x4080b3;\n        }\n        case 107: {\n            goto lab_0x407f3c;\n        }\n        case 109: {\n            goto lab_0x407efe;\n        }\n        case 116: {\n            goto lab_0x408018;\n        }\n        case 119: {\n            // 0x407f80\n            v44 = v22;\n            if (v14 < 0) {\n                goto lab_0x407f47;\n            } else {\n                // 0x407f85\n                v24 = 2 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x407f18;\n            }\n        }\n        default: {\n            goto lab_0x407f75;\n        }\n    }\n  lab_0x40807b:;\n    uint128_t v45 = (int128_t)v14 * (int128_t)v31; // 0x408093\n    int64_t v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n    int64_t v47 = v45 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v48 = 5; // 0x40809f\n    int64_t v49 = v46; // 0x4080a2\n    int64_t v50 = v35; // 0x4080a2\n    int64_t v51 = v47; // 0x4080a2\n    int32_t v52 = v48; // 0x4080a2\n    int64_t v53 = v47; // 0x4080a2\n    while (v48 != 0) {\n        // 0x408090\n        v45 = (int128_t)v46 * (int128_t)v31;\n        v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n        v47 = v45 > 0xffffffffffffffff ? 1 : v53;\n        v48 = v52 - 1;\n        v49 = v46;\n        v50 = v35;\n        v51 = v47;\n        v52 = v48;\n        v53 = v47;\n    }\n    goto lab_0x407fd4;\n  lab_0x4080b3:\n    // 0x4080b3\n    v24 = -1;\n    v23 = 1;\n    v38 = v36;\n    if ((int128_t)v32 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x4080be\n        int128_t v54; // 0x4080b9\n        uint128_t v55; // 0x4080b9\n        uint128_t v56 = (v55 & 0xffffffffffffffff) * v54; // 0x4080be\n        v24 = -1;\n        v23 = 1;\n        int64_t v57; // 0x407d70\n        v38 = v57;\n        if (v56 <= 0xffffffffffffffff) {\n            uint128_t v58 = (v56 & 0xffffffffffffffff) * v54; // 0x4080c3\n            v24 = -1;\n            v23 = 1;\n            v38 = v57;\n            if (v58 <= 0xffffffffffffffff) {\n                // 0x4080c8\n                v24 = v58;\n                int64_t v59; // 0x407d70\n                v23 = v59 & 0xffffffff;\n                v38 = v57;\n            }\n        }\n    }\n    goto lab_0x407f18;\n  lab_0x407f3c:;\n    uint128_t v62 = (int128_t)v26 * (int128_t)v14; // 0x407f3f\n    v24 = v62;\n    v23 = v11;\n    v38 = v39;\n    v44 = v39;\n    if (v62 <= 0xffffffffffffffff) {\n        goto lab_0x407f18;\n    } else {\n        goto lab_0x407f47;\n    }\n  lab_0x407efe:;\n    int128_t v63 = v25; // 0x407f04\n    uint128_t v64 = v63 * (int128_t)v14; // 0x407f04\n    v44 = v37;\n    if (v64 > 0xffffffffffffffff) {\n        goto lab_0x407f47;\n    } else {\n        uint128_t v65 = (v64 & 0xffffffffffffffff) * v63; // 0x407f09\n        v44 = v37;\n        if (v65 > 0xffffffffffffffff) {\n            goto lab_0x407f47;\n        } else {\n            // 0x407f0e\n            v24 = v65;\n            v23 = v11;\n            v38 = v37;\n            goto lab_0x407f18;\n        }\n    }\n  lab_0x408048:;\n    uint128_t v66 = (int128_t)v14 * (int128_t)v30; // 0x40805b\n    int64_t v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n    int64_t v68 = v66 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v69 = 4; // 0x408067\n    v49 = v67;\n    v50 = v34;\n    v51 = v68;\n    int32_t v70 = v69; // 0x40806a\n    int64_t v71 = v68; // 0x40806a\n    while (v69 != 0) {\n        // 0x408058\n        v66 = (int128_t)v67 * (int128_t)v30;\n        v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n        v68 = v66 > 0xffffffffffffffff ? 1 : v71;\n        v69 = v70 - 1;\n        v49 = v67;\n        v50 = v34;\n        v51 = v68;\n        v70 = v69;\n        v71 = v68;\n    }\n    goto lab_0x407fd4;\n  lab_0x408018:;\n    uint128_t v72 = (int128_t)v14 * (int128_t)v29; // 0x40802b\n    int64_t v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n    int64_t v74 = v72 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v75 = 3; // 0x408037\n    v49 = v73;\n    v50 = v33;\n    v51 = v74;\n    int32_t v76 = v75; // 0x40803a\n    int64_t v77 = v74; // 0x40803a\n    while (v75 != 0) {\n        // 0x408028\n        v72 = (int128_t)v73 * (int128_t)v29;\n        v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n        v74 = v72 > 0xffffffffffffffff ? 1 : v77;\n        v75 = v76 - 1;\n        v49 = v73;\n        v50 = v33;\n        v51 = v74;\n        v76 = v75;\n        v77 = v74;\n    }\n    goto lab_0x407fd4;\n  lab_0x407fe6:;\n    uint128_t v78 = (int128_t)v14 * (int128_t)v28; // 0x407ffb\n    int64_t v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n    int64_t v80 = v78 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v81 = 7; // 0x408007\n    v49 = v79;\n    v50 = v42;\n    v51 = v80;\n    int32_t v82 = v81; // 0x40800a\n    int64_t v83 = v80; // 0x40800a\n    while (v81 != 0) {\n        // 0x407ff8\n        v78 = (int128_t)v79 * (int128_t)v28;\n        v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n        v80 = v78 > 0xffffffffffffffff ? 1 : v83;\n        v81 = v82 - 1;\n        v49 = v79;\n        v50 = v42;\n        v51 = v80;\n        v82 = v81;\n        v83 = v80;\n    }\n    goto lab_0x407fd4;\n  lab_0x407fab:;\n    uint128_t v84 = (int128_t)v14 * (int128_t)v27; // 0x407fc3\n    int64_t v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n    int64_t v86 = v84 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v87 = 6; // 0x407fcf\n    int32_t v88 = v87; // 0x407fd2\n    int64_t v89 = v86; // 0x407fd2\n    v49 = v85;\n    v50 = v41;\n    v51 = v86;\n    while (v87 != 0) {\n        // 0x407fc0\n        v84 = (int128_t)v85 * (int128_t)v27;\n        v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n        v86 = v84 > 0xffffffffffffffff ? 1 : v89;\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v49 = v85;\n        v50 = v41;\n        v51 = v86;\n    }\n    goto lab_0x407fd4;\n  lab_0x407f8f:\n    // 0x407f8f\n    v44 = v40;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x407f47;\n    } else {\n        // 0x407f98\n        v24 = 512 * v14;\n        v23 = v11;\n        v38 = v40;\n        goto lab_0x407f18;\n    }\n  lab_0x407f18:;\n    int64_t v60 = v23;\n    int64_t v61 = (0x100000000 * v38 >> 32) + v19; // 0x407f1d\n    *v7 = v61;\n    v13 = v24;\n    v10 = (*(char *)v61 != 0 ? v60 | 2 : v60) & 0xffffffff;\n    goto lab_0x407e10;\n  lab_0x407f75:\n    // 0x407f75\n    *a4 = v15;\n    // 0x407e13\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407f47:\n    // 0x407f47\n    v24 = -1;\n    v23 = 1;\n    v38 = v44;\n    goto lab_0x407f18;\n  lab_0x407fd4:\n    // 0x407fd4\n    v24 = v49;\n    v23 = (v51 | v11) & 0xffffffff;\n    v38 = v50;\n    goto lab_0x407f18;\n}\n"
        },
        {
            "funcName": "function_4081a0",
            "funcStartAddr": "4081a0",
            "funcEndAddr": "4085e0",
            "decompiledFuncCode": "int64_t function_4081a0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x4081ae\n    if (v1 >= 37) {\n        // 0x4085bb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g65;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4081d2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x408202\n    int64_t v4 = a1; // 0x408207\n    char v5 = c; // 0x408207\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x4081fc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x4081f8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x408209\n    if (v5 == 45) {\n        // 0x408245\n        return 4;\n    }\n    // 0x40820e\n    int64_t v7; // bp-64, 0x4081a0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x4081ce\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x408216\n    int64_t * v10 = (int64_t *)v8; // 0x40821b\n    int64_t v11 = *v10; // 0x40821b\n    char v12; // 0x4081a0\n    int64_t v13; // 0x4081a0\n    int64_t v14; // 0x4081a0\n    int64_t v15; // 0x4081a0\n    int64_t v16; // 0x4081a0\n    int64_t v17; // 0x4081a0\n    int64_t v18; // 0x4081a0\n    if (v11 == a1) {\n        // 0x408278\n        if (c == 0 || str == 0) {\n            // 0x408245\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x408299\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x408245\n            return 4;\n        }\n        goto lab_0x4082a7;\n    } else {\n        int32_t v19 = *v2; // 0x408226\n        int64_t v20 = 0; // 0x40822c\n        if (v19 != 0) {\n            // 0x408260\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x408245\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x408216\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x408242;\n        } else {\n            char c2 = *(char *)v11; // 0x408235\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x4083a3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4082a7;\n                } else {\n                    goto lab_0x4083b5;\n                }\n            } else {\n                goto lab_0x408242;\n            }\n        }\n    }\n  lab_0x4082a7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x4082af\n    int64_t v24 = 1; // 0x4082af\n    int64_t v25; // 0x4081a0\n    int64_t v26; // 0x4081a0\n    int64_t v27; // 0x4081a0\n    int64_t v28; // 0x4081a0\n    int64_t v29; // 0x4081a0\n    int64_t v30; // 0x4081a0\n    int64_t v31; // 0x4081a0\n    int64_t v32; // 0x4081a0\n    int64_t v33; // 0x4081a0\n    int64_t v34; // 0x4081a0\n    int64_t v35; // 0x4081a0\n    int64_t v36; // 0x4081a0\n    int64_t v37; // 0x4081a0\n    int64_t v38; // 0x4081a0\n    int64_t v39; // 0x4081a0\n    int64_t v40; // 0x4081a0\n    int64_t v41; // 0x4081a0\n    int64_t v42; // 0x4081a0\n    int64_t v43; // 0x4081a0\n    int64_t v44; // 0x4081a0\n    if (v22 < 48) {\n        // 0x4082b1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40831a;\n        } else {\n            // 0x4082c4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40831a;\n            } else {\n                // 0x4082e0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x40831a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x408549\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x40831a;\n                    }\n                    default: {\n                        // 0x4082f5\n                        g62 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x4084bb;\n                            }\n                            case 70: {\n                                goto lab_0x4083b5;\n                            }\n                            case 71: {\n                                goto lab_0x4084f3;\n                            }\n                            case 72: {\n                                goto lab_0x4083b5;\n                            }\n                            case 73: {\n                                goto lab_0x4083b5;\n                            }\n                            case 74: {\n                                goto lab_0x4083b5;\n                            }\n                            case 75: {\n                                goto lab_0x40837c;\n                            }\n                            case 76: {\n                                goto lab_0x4083b5;\n                            }\n                            case 77: {\n                                goto lab_0x40833e;\n                            }\n                            case 78: {\n                                goto lab_0x4083b5;\n                            }\n                            case 79: {\n                                goto lab_0x4083b5;\n                            }\n                            case 80: {\n                                goto lab_0x408488;\n                            }\n                            case 81: {\n                                goto lab_0x4083b5;\n                            }\n                            case 82: {\n                                goto lab_0x4083b5;\n                            }\n                            case 83: {\n                                goto lab_0x4083b5;\n                            }\n                            case 84: {\n                                goto lab_0x408458;\n                            }\n                            case 85: {\n                                goto lab_0x4083b5;\n                            }\n                            case 86: {\n                                goto lab_0x4083b5;\n                            }\n                            case 87: {\n                                goto lab_0x4083b5;\n                            }\n                            case 88: {\n                                goto lab_0x4083b5;\n                            }\n                            case 89: {\n                                goto lab_0x408426;\n                            }\n                            case 90: {\n                                goto lab_0x4083eb;\n                            }\n                            case 91: {\n                                goto lab_0x4083b5;\n                            }\n                            case 92: {\n                                goto lab_0x4083b5;\n                            }\n                            case 93: {\n                                goto lab_0x4083b5;\n                            }\n                            case 94: {\n                                goto lab_0x4083b5;\n                            }\n                            case 95: {\n                                goto lab_0x4083b5;\n                            }\n                            case 96: {\n                                goto lab_0x4083b5;\n                            }\n                            case 97: {\n                                goto lab_0x4083b5;\n                            }\n                            case 98: {\n                                goto lab_0x4083cf;\n                            }\n                            case 99: {\n                                goto lab_0x408358;\n                            }\n                            case 100: {\n                                goto lab_0x4083b5;\n                            }\n                            case 101: {\n                                goto lab_0x4083b5;\n                            }\n                            case 102: {\n                                goto lab_0x4083b5;\n                            }\n                            case 103: {\n                                goto lab_0x4084f3;\n                            }\n                            case 104: {\n                                goto lab_0x4083b5;\n                            }\n                            case 105: {\n                                goto lab_0x4083b5;\n                            }\n                            case 106: {\n                                goto lab_0x4083b5;\n                            }\n                            case 107: {\n                                goto lab_0x40837c;\n                            }\n                            case 108: {\n                                goto lab_0x4083b5;\n                            }\n                            case 109: {\n                                goto lab_0x40833e;\n                            }\n                            case 110: {\n                                goto lab_0x4083b5;\n                            }\n                            case 111: {\n                                goto lab_0x4083b5;\n                            }\n                            case 112: {\n                                goto lab_0x4083b5;\n                            }\n                            case 113: {\n                                goto lab_0x4083b5;\n                            }\n                            case 114: {\n                                goto lab_0x4083b5;\n                            }\n                            case 115: {\n                                goto lab_0x4083b5;\n                            }\n                            case 116: {\n                                goto lab_0x408458;\n                            }\n                            default: {\n                                goto lab_0x40831a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40831a;\n    }\n  lab_0x408242:\n    // 0x408242\n    *a4 = v16;\n    // 0x408245\n    return v13 & 0xffffffff;\n  lab_0x40831a:\n    // 0x40831a\n    g63 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x4081a0\n    switch (v12) {\n        case 66: {\n            // 0x408514\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x408387;\n            } else {\n                // 0x408521\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x408358;\n            }\n        }\n        case 69: {\n            goto lab_0x4084bb;\n        }\n        case 71: {\n            goto lab_0x4084f3;\n        }\n        case 75: {\n            goto lab_0x40837c;\n        }\n        case 77: {\n            goto lab_0x40833e;\n        }\n        case 80: {\n            goto lab_0x408488;\n        }\n        case 84: {\n            goto lab_0x408458;\n        }\n        case 89: {\n            goto lab_0x408426;\n        }\n        case 90: {\n            goto lab_0x4083eb;\n        }\n        case 98: {\n            goto lab_0x4083cf;\n        }\n        case 99: {\n            goto lab_0x408358;\n        }\n        case 103: {\n            goto lab_0x4084f3;\n        }\n        case 107: {\n            goto lab_0x40837c;\n        }\n        case 109: {\n            goto lab_0x40833e;\n        }\n        case 116: {\n            goto lab_0x408458;\n        }\n        case 119: {\n            // 0x4083c0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x408387;\n            } else {\n                // 0x4083c5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x408358;\n            }\n        }\n        default: {\n            goto lab_0x4083b5;\n        }\n    }\n  lab_0x4084bb:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x4084d3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x4084df\n    int64_t v51 = v48; // 0x4084e2\n    int64_t v52 = v37; // 0x4084e2\n    int64_t v53 = v49; // 0x4084e2\n    int32_t v54 = v50; // 0x4084e2\n    int64_t v55 = v49; // 0x4084e2\n    while (v50 != 0) {\n        // 0x4084d0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x408414;\n  lab_0x4084f3:\n    // 0x4084f3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4084fe\n        int128_t v56; // 0x4084f9\n        uint128_t v57; // 0x4084f9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4084fe\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x4081a0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x408503\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x408508\n                v26 = v60;\n                int64_t v61; // 0x4081a0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x408358;\n  lab_0x40837c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40837f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x408358;\n    } else {\n        goto lab_0x408387;\n    }\n  lab_0x40833e:;\n    int128_t v65 = v27; // 0x408344\n    uint128_t v66 = v65 * (int128_t)v17; // 0x408344\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x408387;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x408349\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x408387;\n        } else {\n            // 0x40834e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x408358;\n        }\n    }\n  lab_0x408488:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40849b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x4084a7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x4084aa\n    int64_t v73 = v70; // 0x4084aa\n    while (v71 != 0) {\n        // 0x408498\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x408414;\n  lab_0x408458:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40846b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x408477\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40847a\n    int64_t v79 = v76; // 0x40847a\n    while (v77 != 0) {\n        // 0x408468\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x408414;\n  lab_0x408426:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40843b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x408447\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40844a\n    int64_t v85 = v82; // 0x40844a\n    while (v83 != 0) {\n        // 0x408438\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x408414;\n  lab_0x4083eb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x408403\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x40840f\n    int32_t v90 = v89; // 0x408412\n    int64_t v91 = v88; // 0x408412\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x408400\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x408414;\n  lab_0x4083cf:\n    // 0x4083cf\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x408387;\n    } else {\n        // 0x4083d8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x408358;\n    }\n  lab_0x408358:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40835d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x408242;\n  lab_0x4083b5:\n    // 0x4083b5\n    *a4 = v18;\n    // 0x408245\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x408387:\n    // 0x408387\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x408358;\n  lab_0x408414:\n    // 0x408414\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x408358;\n}\n"
        },
        {
            "funcName": "function_4085e0",
            "funcStartAddr": "4085e0",
            "funcEndAddr": "40865b",
            "decompiledFuncCode": "int64_t function_4085e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4085e7\n    if (fileno(stream) < 0) {\n        // 0x408647\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4085fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40862b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x408647\n            return fclose(stream);\n        }\n    }\n    // 0x4085fc\n    if ((int32_t)function_4087a0(a1, v1) == 0) {\n        // 0x408647\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x408608\n    int32_t v3 = *v2; // 0x408610\n    int64_t result = fclose(stream); // 0x40861e\n    if (v3 != 0) {\n        // 0x408650\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x408620\n    return result;\n}\n"
        },
        {
            "funcName": "function_408660",
            "funcStartAddr": "408660",
            "funcEndAddr": "408795",
            "decompiledFuncCode": "int64_t function_408660(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x408740\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40869c\n    int64_t v2; // 0x408660\n    if (g53 < 0) {\n        int64_t v3 = function_408660(fd, 0, v1, a4); // 0x4086e4\n        int64_t v4 = v3 & 0xffffffff; // 0x4086e9\n        if ((int32_t)v3 < 0) {\n            // 0x4086d0\n            return v4 & 0xffffffff;\n        }\n        // 0x4086ef\n        v2 = v4;\n        if (g53 != -1) {\n            // 0x4086d0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4086b7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4086c6\n            g53 = 1;\n            // 0x4086d0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_408660(fd & 0xffffffff, 0, v1, a4); // 0x408777\n        int64_t v7 = v6 & 0xffffffff; // 0x40877c\n        if ((int32_t)v6 < 0) {\n            // 0x4086d0\n            return v7 & 0xffffffff;\n        }\n        // 0x408786\n        g53 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4086ff\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40870a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4086d0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x408722\n    close(fd2);\n    // 0x4086d0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4087a0",
            "funcStartAddr": "4087a0",
            "funcEndAddr": "4087e0",
            "decompiledFuncCode": "int64_t function_4087a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4087ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4087ba\n        return fflush(stream);\n    }\n    // 0x4087c8\n    function_4087e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4087e0",
            "funcStartAddr": "4087e0",
            "funcEndAddr": "408837",
            "decompiledFuncCode": "int64_t function_4087e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4087e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4087ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40881b\n    int64_t result = -1; // 0x408824\n    if (v1 != -1) {\n        // 0x408826\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408832\n    return result;\n}\n"
        },
        {
            "funcName": "function_408840",
            "funcStartAddr": "408840",
            "funcEndAddr": "40891f",
            "decompiledFuncCode": "int64_t function_408840(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40884c\n    uint32_t v2 = *v1; // 0x40884c\n    int64_t v3 = a2 & 0xffffffff; // 0x408851\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408854\n    uint64_t v5 = (int64_t)*v4; // 0x408854\n    int64_t v6; // 0x4088c2\n    if (v3 <= v5) {\n      lab_0x4088bc_2:\n        // 0x4088bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408842\n    int64_t v8 = v2; // 0x408840\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4088bc\n        goto lab_0x4088bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408878\n    int64_t v17; // 0x408886\n    int64_t * v18; // 0x4088a0\n    int64_t * v19; // 0x4088a3\n    int64_t v20; // 0x4088ae\n    int64_t v21; // 0x408886\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408883\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4088a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4088b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4088bc\n            goto lab_0x4088bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4088bc\n            goto lab_0x4088bc_2;\n        }\n        // 0x408872\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4088fb\n    int64_t * v23 = (int64_t *)v22; // 0x408900\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408903\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408900\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408917\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40886d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4088bc\n            goto lab_0x4088bc_2;\n        }\n        // 0x408872\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408883\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4088a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4088b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4088bc\n                goto lab_0x4088bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4088bc\n                goto lab_0x4088bc_2;\n            }\n            // 0x408872\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4088e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408900\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408917\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4088bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408920",
            "funcStartAddr": "408920",
            "funcEndAddr": "408f3c",
            "decompiledFuncCode": "int64_t function_408920(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40893f\n    int64_t v2 = *v1; // 0x40893f\n    char * str2 = (char *)v2; // 0x40894c\n    char c = *str2; // 0x40894c\n    int64_t v3 = v2; // 0x408978\n    int64_t v4 = 0; // 0x408920\n    int32_t v5; // 0x408920\n    int64_t v6; // 0x408920\n    int64_t v7; // 0x408920\n    int64_t v8; // 0x408920\n    int64_t v9; // 0x408920\n    int64_t v10; // 0x408920\n    int64_t v11; // 0x408920\n    int64_t v12; // 0x408920\n    int64_t v13; // 0x408920\n    int64_t str3; // 0x408920\n    int64_t v14; // 0x408920\n    int64_t v15; // 0x408920\n    int64_t v16; // 0x408920\n    int64_t v17; // 0x408920\n    int32_t v18; // 0x408920\n    int32_t v19; // 0x408920\n    int32_t v20; // 0x408920\n    int32_t v21; // 0x408920\n    int32_t v22; // 0x408920\n    int32_t v23; // 0x408920\n    int32_t v24; // 0x408920\n    int32_t v25; // 0x408920\n    int32_t v26; // 0x408920\n    int32_t v27; // 0x408920\n    int32_t v28; // 0x408920\n    int32_t v29; // 0x408920\n    int64_t nmemb; // 0x408920\n    int64_t v30; // 0x408920\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40897c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408978\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408988\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40898e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408958\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4089bc\n                int64_t v34; // 0x408920\n                int64_t v35; // 0x408920\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4089c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408b40;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4089d6\n                int64_t v37 = *(int64_t *)v36; // 0x4089da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4089b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4089c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408b40;\n                        }\n                    }\n                    // 0x4089d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408a26:\n                    // 0x408a26\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408a80;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408bf0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408a80;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408ba0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x408a4a;\n                                } else {\n                                    // 0x408bac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x408a4a;\n                                    } else {\n                                        // 0x408bba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x408a4a;\n                                        } else {\n                                            goto lab_0x408a80;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x408a4a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408a91:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408c66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408e12\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x408e32\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x408e7f\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x408e99\n                            int64_t v45; // 0x408e9b\n                            if (*(char *)v42 != 0) {\n                                // 0x408e9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408e93\n                            while (v17 + nmemb != v42) {\n                                // 0x408e95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x408e9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x408e88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408ec0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x408c74\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x408dcf\n                        free((int64_t *)v17);\n                    }\n                    // 0x408cc9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408ce0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x408b8e\n                    return 63;\n                }\n                // 0x408ab0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408b34\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408b40:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408b50\n                    uint32_t v50 = *v49; // 0x408b50\n                    int64_t v51 = v50; // 0x408b50\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x408b5a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408b63\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x408d8f\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x408d3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x408b8e\n                            return 63;\n                        }\n                        // 0x408bd8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x408eef\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x408ded\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408e00\n                                // 0x408b8e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x408cfe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408d12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x408b7b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x408b7e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408b82\n                    int64_t result = v59; // 0x408b88\n                    if (v58 != 0) {\n                        // 0x408b8a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x408b8e\n                    return result;\n                }\n            } else {\n                // 0x40898e\n                v5 = v32;\n            }\n            // break -> 0x408ab5\n            break;\n        }\n    }\n    // 0x408ab5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x408acd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408ad7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x408b8e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408c19\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408b06\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408b16\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408a80:\n    // 0x408a80\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408a80\n    int64_t v63 = *(int64_t *)v62; // 0x408a84\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408a91\n        goto lab_0x408a91;\n    }\n    goto lab_0x408a26;\n  lab_0x408a4a:\n    // 0x408a4a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408920\n    int32_t v65; // 0x408920\n    int32_t v66; // 0x408920\n    if (v27 != 0) {\n        goto lab_0x408a80;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408c00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408a80;\n            } else {\n                goto lab_0x408a71;\n            }\n        } else {\n            // 0x408a65\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x408d5c\n                int64_t v67 = (int64_t)mem; // 0x408d5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408a80;\n                } else {\n                    // 0x408d6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408a71;\n                }\n            } else {\n                goto lab_0x408a71;\n            }\n        }\n    }\n  lab_0x408a71:\n    // 0x408a71\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408a80;\n}\n"
        },
        {
            "funcName": "function_408f40",
            "funcStartAddr": "408f40",
            "funcEndAddr": "409506",
            "decompiledFuncCode": "int64_t function_408f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408f61\n    if (v3 < 1) {\n        // 0x40911e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x408f5d\n    int32_t v5 = *(int32_t *)a7; // 0x408f69\n    uint64_t v6 = a1 & 0xffffffff; // 0x408f6b\n    int64_t v7 = v2; // 0x408f70\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408f73\n    *v8 = 0;\n    int64_t v9; // 0x408f40\n    int64_t v10; // 0x408f40\n    int64_t v11; // 0x408f40\n    int64_t v12; // 0x408f40\n    int64_t str; // 0x408f40\n    int64_t v13; // 0x408f40\n    int64_t v14; // 0x408f40\n    int64_t v15; // 0x408f40\n    int64_t v16; // 0x408f40\n    int64_t v17; // 0x408f40\n    int32_t v18; // 0x408f40\n    char v19; // 0x408f40\n    if (v5 == 0) {\n        // 0x409158\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x408f8a;\n    } else {\n        // 0x408f83\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x408fd0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x408fd3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x409098;\n            } else {\n                int64_t v22 = v7 + 1; // 0x408fe6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x408ff6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4090ac;\n                } else {\n                    goto lab_0x409008;\n                }\n            }\n        } else {\n            goto lab_0x408f8a;\n        }\n    }\n  lab_0x408f8a:\n    // 0x408f8a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x408f90\n    *v24 = 0;\n    int64_t v25; // 0x408f40\n    int64_t v26; // 0x408f40\n    int64_t v27; // 0x408f40\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409080\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40908d;\n        }\n        case 43: {\n            // 0x409390\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40908d;\n        }\n        default: {\n            // 0x408fac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40930f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409428\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40908d;\n                } else {\n                    // 0x40931d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x408fba;\n                }\n            } else {\n                goto lab_0x408fba;\n            }\n        }\n    }\n  lab_0x409098:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40909f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409008;\n    } else {\n        goto lab_0x4090ac;\n    }\n  lab_0x408fba:\n    // 0x408fba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40908d;\n  lab_0x40908d:\n    // 0x40908d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x409098;\n  lab_0x409008:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409008\n    int64_t v31 = v30; // 0x409008\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40900a\n    if ((int64_t)*v32 > v31) {\n        // 0x40900f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409012\n    if (*v33 > v30) {\n        // 0x409017\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40901a\n    int64_t v35 = v31; // 0x40901e\n    int64_t v36 = v15; // 0x40901e\n    int64_t v37; // 0x408f40\n    int64_t v38; // 0x408f40\n    int64_t v39; // 0x408f40\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x409188\n        int64_t v41 = v40; // 0x409188\n        v2 = v41;\n        int64_t v42; // 0x408f40\n        if (*v33 == v40) {\n            // 0x409370\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409378\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x409194\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409198\n                function_408840(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4091a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4091b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4091ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4091d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4091d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4091de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4091e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4091e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4091c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4091c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4091d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4091de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4091e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4091e6;\n                    }\n                }\n                // 0x4091c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x409388\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4091e6;\n    } else {\n        goto lab_0x409024;\n    }\n  lab_0x4090ac:\n    // 0x4090ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4090af\n    int64_t v51 = v12; // 0x4090af\n    int64_t v52 = v14; // 0x4090af\n    if (*(char *)v10 == 0) {\n        goto lab_0x409008;\n    } else {\n        goto lab_0x4090b5;\n    }\n  lab_0x409024:;\n    int32_t v53 = v35; // 0x409024\n    int64_t v54; // 0x408f40\n    int64_t v55; // 0x408f40\n    int64_t v56; // 0x408f40\n    int64_t v57; // 0x408f40\n    int64_t v58; // 0x408f40\n    int64_t v59; // 0x408f40\n    char * v60; // 0x408f40\n    int64_t v61; // 0x408f40\n    int64_t v62; // 0x409039\n    int64_t v63; // 0x408f40\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x409173\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x409176;\n    } else {\n        // 0x40902c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408f40\n        int64_t v66 = v65 ? -1 : 1; // 0x409040\n        int64_t v67 = (int64_t)\"--\"; // 0x408f40\n        int64_t v68 = v62; // 0x408f40\n        int64_t v69 = 3; // 0x409040\n        unsigned char v70 = *(char *)v68; // 0x409040\n        char v71 = *(char *)v67; // 0x409040\n        char v72 = v71; // 0x409040\n        bool v73 = false; // 0x409040\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409130\n            if (*(char *)v62 == 45) {\n                // 0x4091f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4091f0\n                if (c == 0) {\n                    goto lab_0x40913a;\n                } else {\n                    // 0x4091fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x409280;\n                    } else {\n                        if (c == 45) {\n                            // 0x409463\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4092d5;\n                        } else {\n                            // 0x40920e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x409280;\n                            } else {\n                                // 0x409213\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409234;\n                                } else {\n                                    // 0x40921a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x409280;\n                                    } else {\n                                        goto lab_0x409234;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40913a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409050\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409053\n            int64_t v77 = v35 + 1; // 0x409056\n            int32_t v78 = v77; // 0x409059\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4093c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409067\n                    function_408840(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409075\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x409176;\n        }\n    }\n  lab_0x4090b5:;\n    // 0x4090b5\n    int64_t v79; // bp-104, 0x408f40\n    int64_t v80 = &v79; // 0x408f4a\n    int64_t v81 = v50 + 1; // 0x4090b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4090bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4090c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4090c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4090c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4090d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4090d6\n    int32_t c2 = v84; // 0x4090d6\n    char * found_char_pos = strchr(str2, c2); // 0x4090d6\n    int64_t v87 = *v82; // 0x4090db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4090e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4090f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4093e0\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4093ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40911e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4090d6\n    char v91 = *(char *)(v90 + 1); // 0x40910b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4090c5\n        if (v91 != 58) {\n            // 0x40911e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409334\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409438\n                *v8 = 0;\n            } else {\n                // 0x40941c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40935e\n            *v83 = 0;\n            // 0x40911e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40933e\n        if (v93 != 0) {\n            // 0x4093d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40935e\n            *v83 = 0;\n            // 0x40911e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409351\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40935e\n            *v83 = 0;\n            // 0x40911e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40949a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40944a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x409451\n        // 0x40935e\n        *v83 = 0;\n        // 0x40911e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4092a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4092ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4094d0\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x409481\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x409488\n            // 0x40911e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4092b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4092ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4092d5;\n  lab_0x4091e6:\n    // 0x4091e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409024;\n  lab_0x4092d5:;\n    int64_t v99 = function_408920(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4092f3\n    // 0x40911e\n    return v99 & 0xffffffff;\n  lab_0x409176:;\n    int32_t v100 = v55; // 0x409176\n    if (v100 != (int32_t)v59) {\n        // 0x40917a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40911e\n    return 0xffffffff;\n  lab_0x40913a:\n    // 0x40913a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409141\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40911e\n    return v99 & 0xffffffff;\n  lab_0x409280:\n    // 0x409280\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4090b5;\n  lab_0x409234:\n    // 0x409234\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408920(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40925a\n    if ((int32_t)v101 != -1) {\n        // 0x40911e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40926f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x409280;\n}\n"
        },
        {
            "funcName": "function_409510",
            "funcStartAddr": "409510",
            "funcEndAddr": "409566",
            "decompiledFuncCode": "int64_t function_409510(int64_t a1) {\n    // 0x409510\n    *(int32_t *)&g54 = g28;\n    *(int32_t *)&g55 = g27;\n    int64_t v1; // 0x409510\n    int64_t result = function_408f40(v1, v1, v1, v1, v1, v1, &g54, a1 & 0xffffffff); // 0x409536\n    g28 = *(int32_t *)&g54;\n    g59 = g57;\n    *(int32_t *)&g26 = g56;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409570",
            "funcStartAddr": "409570",
            "funcEndAddr": "409588",
            "decompiledFuncCode": "int64_t function_409570(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409570\n    return function_409510(1);\n}\n"
        },
        {
            "funcName": "function_409590",
            "funcStartAddr": "409590",
            "funcEndAddr": "4095a3",
            "decompiledFuncCode": "int64_t function_409590(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x409590\n    return function_409510(0);\n}\n"
        },
        {
            "funcName": "function_4095b0",
            "funcStartAddr": "4095b0",
            "funcEndAddr": "4095c5",
            "decompiledFuncCode": "int64_t function_4095b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4095b0\n    return function_408f40(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4095d0",
            "funcStartAddr": "4095d0",
            "funcEndAddr": "4095e6",
            "decompiledFuncCode": "int64_t function_4095d0(void) {\n    // 0x4095d0\n    return function_409510(0);\n}\n"
        },
        {
            "funcName": "function_4095f0",
            "funcStartAddr": "4095f0",
            "funcEndAddr": "409608",
            "decompiledFuncCode": "int64_t function_4095f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4095f0\n    return function_408f40(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409610",
            "funcStartAddr": "409610",
            "funcEndAddr": "40968a",
            "decompiledFuncCode": "int64_t function_409610(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40961b\n    int64_t v2 = (int64_t)&g11; // 0x40961b\n    int32_t * pwc; // 0x409610\n    int64_t v3; // 0x409610\n    int64_t n; // 0x409610\n    if (a2 == 0) {\n        goto lab_0x409662;\n    } else {\n        // 0x40961d\n        if (a3 == 0) {\n            // 0x409648\n            return -2;\n        }\n        // 0x409629\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409662;\n        } else {\n            goto lab_0x409634;\n        }\n    }\n  lab_0x409662:\n    // 0x409662\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409610\n    pwc = (int32_t *)&v4;\n    goto lab_0x409634;\n  lab_0x409634:;\n    char * wstr = (char *)v3; // 0x40963a\n    int64_t ps; // 0x409610\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40963a\n    int64_t result = v5; // 0x40963a\n    if (v5 < 0xfffffffe) {\n        // 0x409648\n        return result;\n    }\n    int64_t result2 = result; // 0x409679\n    if ((char)function_4096f0(0, v3) == 0) {\n        // 0x40967b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409648\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409690",
            "funcStartAddr": "409690",
            "funcEndAddr": "4096ed",
            "decompiledFuncCode": "int64_t function_409690(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409697\n    int64_t v2; // 0x409690\n    int64_t result = function_4085e0(a1, v2); // 0x4096a8\n    if ((v2 & 32) != 0) {\n        // 0x4096d0\n        if ((int32_t)result == 0) {\n            // 0x4096d4\n            *__errno_location() = 0;\n        }\n        // 0x4096ca\n        return 0xffffffff;\n    }\n    // 0x4096b1\n    if ((int32_t)result == 0) {\n        // 0x4096ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4096b8\n    if (v1 == 0) {\n        // 0x4096ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4096ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4096f0",
            "funcStartAddr": "4096f0",
            "funcEndAddr": "40974e",
            "decompiledFuncCode": "int64_t function_4096f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4096f6\n    if (locale == NULL) {\n        // 0x409723\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4096f6\n    bool v2; // 0x4096f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x4096f0\n    int64_t v5 = v1; // 0x4096f0\n    int64_t v6 = 2; // 0x409715\n    unsigned char v7 = *(char *)v5; // 0x409715\n    char v8 = *(char *)v4; // 0x409715\n    char v9 = v8; // 0x409715\n    bool v10 = false; // 0x409715\n    while (v7 == v8) {\n        // 0x409708\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409721\n    int64_t v13 = v1; // 0x409721\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409723\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409721\n    unsigned char v15 = *(char *)v13; // 0x40973d\n    char v16 = *(char *)v12; // 0x40973d\n    char v17 = v16; // 0x40973d\n    bool v18 = false; // 0x40973d\n    while (v15 == v16) {\n        // 0x409730\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409750",
            "funcStartAddr": "409750",
            "funcEndAddr": "409cb2",
            "decompiledFuncCode": "int64_t function_409750(void) {\n    char * v1 = nl_langinfo(14); // 0x409766\n    char * v2 = g58; // 0x40976b\n    char * v3; // 0x409750\n    int64_t v4; // 0x409750\n    int64_t v5; // 0x409750\n    int64_t v6; // 0x409750\n    int64_t v7; // 0x409750\n    int32_t size; // 0x409750\n    int32_t size2; // 0x409750\n    int32_t len; // 0x409822\n    int64_t v8; // 0x409822\n    char * env_val; // 0x40980d\n    if (v2 == NULL) {\n        // 0x409808\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409875;\n        } else {\n            // 0x40981a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409875;\n            } else {\n                // 0x40981f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40980d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409ca5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409875;\n                    } else {\n                        // 0x409c19\n                        size2 = len + 14;\n                        goto lab_0x40983b;\n                    }\n                } else {\n                    goto lab_0x40983b;\n                }\n            }\n        }\n    } else {\n        // 0x409750\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40978a;\n    }\n  lab_0x409abc:;\n    // 0x409abc\n    struct _IO_FILE * stream; // 0x4098fb\n    int32_t v10 = __uflow(stream); // 0x409abf\n    int64_t v11; // 0x409750\n    int64_t v12 = v11; // 0x409ac9\n    int64_t v13; // 0x409750\n    int64_t v14 = v13; // 0x409ac9\n    int32_t v15 = v10; // 0x409ac9\n    int64_t v16; // 0x409750\n    int64_t v17 = v16; // 0x409ac9\n    int64_t v18 = v11; // 0x409ac9\n    int64_t v19 = v13; // 0x409ac9\n    int64_t v20 = v16; // 0x409ac9\n    if (v10 == -1) {\n        // break -> 0x409acf\n        goto lab_0x409acf;\n    }\n    goto lab_0x409949;\n  lab_0x40993e:;\n    // 0x40993e\n    int64_t v90; // 0x409750\n    int64_t * v32; // 0x409930\n    *v32 = v90 + 1;\n    int64_t v89; // 0x409750\n    v12 = v89;\n    int64_t v91; // 0x409750\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x409750\n    v17 = v92;\n    goto lab_0x409949;\n  lab_0x409949:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x409750\n    int32_t v25; // bp-120, 0x409750\n    int32_t v26; // bp-184, 0x409750\n    int64_t v27; // 0x4098fb\n    int64_t v28; // 0x409918\n    int64_t v29; // 0x40991d\n    int64_t * v30; // 0x409934\n    switch (c) {\n        case 32: {\n            goto lab_0x409930;\n        }\n        case 10: {\n            goto lab_0x409930;\n        }\n        case 9: {\n            goto lab_0x409930;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409b21\n            int32_t v33; // 0x409750\n            char v34; // 0x409750\n            int32_t v35; // 0x409b2e\n            if (v31 < *v30) {\n                // 0x409b00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x409b2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409b21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409b00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x409b2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409b10\n                v36 = v33;\n            }\n            // 0x409bff\n            if (v36 == -1) {\n                // break -> 0x409acf\n                break;\n            }\n            goto lab_0x409930;\n        }\n        default: {\n            // 0x40995f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x409acf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409988\n            int64_t v39 = v37 + 4; // 0x40998a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409996\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409998\n            while (v41 == 0) {\n                // 0x409988\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4099b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4099c2\n            int64_t v45 = v43 + 4; // 0x4099c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4099d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4099d2\n            while (v47 == 0) {\n                // 0x4099c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4099bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4099e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4099f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4099fc\n            int64_t v52 = v51 + v48; // 0x409a05\n            int64_t * mem; // 0x409750\n            int64_t v53; // 0x409750\n            int64_t v54; // 0x409750\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x409b3b\n                int64_t v56 = v55 + 3; // 0x409b47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409a21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409a30\n            if (mem == NULL) {\n                // 0x409c5c\n                free((int64_t *)v21);\n                function_4085e0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x4098d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409a48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409a52\n            uint32_t v62 = (int32_t)v59; // 0x409a55\n            int64_t v63; // 0x409750\n            if (v62 >= 8) {\n                // 0x409b64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x409b7e\n                int64_t v66 = v61 - v65; // 0x409b82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x409b8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x409b9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x409b9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x409b9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x409c2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409a67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x409a6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x409a7b\n            int64_t v74 = v60 - 1; // 0x409a7f\n            uint32_t v75 = (int32_t)v73; // 0x409a84\n            int64_t v76; // 0x409750\n            if (v75 >= 8) {\n                // 0x409bb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x409bbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x409bcc\n                int64_t v80 = v74 - v79; // 0x409bd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x409bdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x409beb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409be9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409c46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x409c4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409a96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x409a9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409c93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x409aae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40993e;\n            } else {\n                goto lab_0x409abc;\n            }\n        }\n    }\n  lab_0x409930:;\n    int64_t v93 = v23; // 0x409750\n    int64_t v94 = v22; // 0x409750\n    int64_t v95 = v21; // 0x409750\n    goto lab_0x409930_2;\n  lab_0x409875:;\n    int64_t * mem3 = malloc(size); // 0x409875\n    int64_t v97 = (int64_t)&g11; // 0x409880\n    int64_t v98; // 0x409750\n    int64_t path; // 0x409750\n    if (mem3 == NULL) {\n        goto lab_0x409852;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409875\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x409896;\n    }\n  lab_0x40978a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40977d\n    char v100 = *v3; // 0x40978a\n    int64_t v101; // 0x409750\n    if (v100 == 0) {\n        // 0x4097e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x409750\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x409750\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4097d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4097d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4097a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4097ad\n        char v107 = *(char *)v106; // 0x4097b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4097e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4097bb\n    v104 = v103 + 1;\n  lab_0x4097d7:\n    // 0x4097e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409852:;\n    char * v108 = (char *)v97;\n    g58 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40978a;\n  lab_0x409896:;\n    int64_t v109 = v98 + path; // 0x409896\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4098c2\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x4098f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409c22\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x409915\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409930_2:;\n                uint64_t v96 = *v32; // 0x409930\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x409abc;\n                } else {\n                    goto lab_0x40993e;\n                }\n            }\n          lab_0x409acf:\n            // 0x409acf\n            function_4085e0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x409aee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4098d4;\n  lab_0x40983b:;\n    int64_t * mem4 = malloc(size2); // 0x40983b\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x4098e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x409896;\n    } else {\n        goto lab_0x409852;\n    }\n  lab_0x4098d4:\n    // 0x4098d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409852;\n}\n"
        },
        {
            "funcName": "function_409cc0",
            "funcStartAddr": "409cc0",
            "funcEndAddr": "409d1d",
            "decompiledFuncCode": "int64_t function_409cc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409cc0\n    return function_4016b0();\n}\n"
        },
        {
            "funcName": "function_409d20",
            "funcStartAddr": "409d20",
            "funcEndAddr": "409d21",
            "decompiledFuncCode": "int64_t function_409d20(void) {\n    // 0x409d20\n    int64_t result; // 0x409d20\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d30",
            "funcStartAddr": "409d30",
            "funcEndAddr": "409d48",
            "decompiledFuncCode": "int64_t function_409d30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409d30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409d48",
            "funcStartAddr": "409d48",
            "funcEndAddr": "409d68",
            "decompiledFuncCode": "int64_t function_409d48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x409d52\n    while (*(int64_t *)v1 != -1) {\n        // 0x409d53\n        v1 -= 8;\n    }\n    // 0x409d64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_b2sum.elf"
}